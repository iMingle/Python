<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/">

<channel>
	<title>Planet Python</title>
	<link>http://planetpython.org/</link>
	<language>en</language>
	<description>Planet Python - http://planetpython.org/</description>

<item>
	<title>Weekly Python StackOverflow Report: (xxx) stackoverflow python report</title>
	<guid>http://python-weekly.blogspot.com/2016/07/xxx-stackoverflow-python-report.html</guid>
	<link>http://python-weekly.blogspot.com/2016/07/xxx-stackoverflow-python-report.html</link>
	<description>These are the ten most rated questions at &lt;a href=&quot;http://www.stackoverflow.com/&quot;&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2016-07-30 09:25:51 GMT&lt;br /&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/38588815&quot; target=&quot;_blank&quot;&gt;rounding errors in Python floor division&lt;/a&gt; - [&lt;b&gt;20&lt;/b&gt;/5]&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/38653346&quot; target=&quot;_blank&quot;&gt;0 is 0 == 0 (#evaluates to True?)&lt;/a&gt; - [&lt;b&gt;16&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/38570144&quot; target=&quot;_blank&quot;&gt;Type hint that a function never returns&lt;/a&gt; - [&lt;b&gt;9&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/38644696&quot; target=&quot;_blank&quot;&gt;Python: How to delete rows ending in certain characters?&lt;/a&gt; - [&lt;b&gt;8&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/38569992&quot; target=&quot;_blank&quot;&gt;Pycharm import RuntimeWarning after updating to 2016.2&lt;/a&gt; - [&lt;b&gt;8&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/38600453&quot; target=&quot;_blank&quot;&gt;Combination of two lists while keeping the order&lt;/a&gt; - [&lt;b&gt;7&lt;/b&gt;/5]&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/38619143&quot; target=&quot;_blank&quot;&gt;Convert Python sequence to NumPy array, filling missing values&lt;/a&gt; - [&lt;b&gt;7&lt;/b&gt;/5]&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/38576480&quot; target=&quot;_blank&quot;&gt;Python- np.mean() giving wrong means?&lt;/a&gt; - [&lt;b&gt;7&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/38611467&quot; target=&quot;_blank&quot;&gt;Python: get every possible combination of weights for a portfolio&lt;/a&gt; - [&lt;b&gt;6&lt;/b&gt;/6]&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/38555385&quot; target=&quot;_blank&quot;&gt;Removing duplicate edges from graph in Python list&lt;/a&gt; - [&lt;b&gt;6&lt;/b&gt;/4]&lt;/li&gt;&lt;/ol&gt;</description>
	<pubDate>Sat, 30 Jul 2016 09:26:00 +0000</pubDate>
</item>
<item>
	<title>Brian Okken: 20: Talk Python To Me host Michael Kennedy</title>
	<guid>http://pythontesting.net/podcast/talk-python-to-me-michael-kennedy/</guid>
	<link>http://pythontesting.net/podcast/talk-python-to-me-michael-kennedy/</link>
	<description>&lt;p&gt;I talk with Michael about: Episodes of his show having to do with testing. His transition from employee to podcst host and online training entrepreneur. His Python training courses. The Pyramid Web framework. Givaway We&amp;#8217;re giving away courses from Talk Python To Me, enter by signing up for my mailing list at pythontesting.net/subscribe Courses by [&amp;#8230;]&lt;/p&gt;
&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;http://pythontesting.net/podcast/talk-python-to-me-michael-kennedy/&quot;&gt;20: Talk Python To Me host Michael Kennedy&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;http://pythontesting.net&quot;&gt;Python Testing&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Fri, 29 Jul 2016 18:58:34 +0000</pubDate>
</item>
<item>
	<title>Jamal Moir: [Video Series] Taking Your Python Skills to the Next Level With Pythonic Code – Hacking Python’s Memory With __slots__</title>
	<guid>http://www.datadependence.com/2016/07/pythonic-code-video-series-slots/</guid>
	<link>http://www.datadependence.com/2016/07/pythonic-code-video-series-slots/</link>
	<description>&lt;p&gt;This is the second post in a series covering Pythonic code written by Michael Kennedy of Talk Python To Me. Be sure to catch the whole series with 5 powerful Pythonic recommendations and over 45 minutes of video examples. What if I told you there was a simple technique you can apply to your custom classes that would dramatically decrease [&amp;#8230;]&lt;/p&gt;&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;http://www.datadependence.com/2016/07/pythonic-code-video-series-slots/&quot;&gt;[Video Series] Taking Your Python Skills to the Next Level With Pythonic Code &amp;#8211; Hacking Python&amp;#8217;s Memory With __slots__&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;http://www.datadependence.com&quot;&gt;Data Dependence&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Fri, 29 Jul 2016 17:00:12 +0000</pubDate>
</item>
<item>
	<title>بايثون العربي: مقدمة لمكتبة urllip</title>
	<guid>http://pyarab.com/2016/07/intro-to-urllib.html</guid>
	<link>http://pyarab.com/2016/07/intro-to-urllib.html</link>
	<description>&lt;p&gt;إن وحدة urllip في بايثون 3 عبارة عن عن محموعة من الوحدات التي يمكننا إستخدامها للتعامل مع الروابط ، وإذا كنت قادم من بايثون 2 ستجد أن بايثون 2 لديها urllip و urllip2  أما في بايثون 3 أصبحوا عبارة عن حزمة واحدة تحت إسم urllip ويتكون الإصدار الحالي من :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;urllib.request&lt;/li&gt;
&lt;li&gt;urllib.error&lt;/li&gt;
&lt;li&gt;urllib.parse&lt;/li&gt;
&lt;li&gt;urllib.rebotparser&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;سنقوم بتغطية كل جزء ماعدا &lt;strong&gt;urllib.error &lt;/strong&gt;&lt;span id=&quot;more-719&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;urllib.request&lt;/h3&gt;
&lt;p&gt;تستخدم هذه الوحدة أساسا لفتح وجلب الروابط ، دعونا نقوم ببعض الأمثلة لنرى مالذي يمكننا فعله مع وظيفة &lt;strong&gt;urlopen&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;brush: python; title: ; notranslate&quot;&gt;

&amp;gt;&amp;gt;&amp;gt;import urllib.request
&amp;gt;&amp;gt;&amp;gt; url = urllib.request.urlopen('https://www.google.com/')
 &amp;gt;&amp;gt;&amp;gt;url.geturl()
'https://www.google.com/'
&amp;gt;&amp;gt;&amp;gt;url.info()
lt;http.client.HTTPMessage object at 0x7fddc2de04e0
&amp;gt;&amp;gt;&amp;gt; header = url.info()
&amp;gt;&amp;gt;&amp;gt;header.as_string()
('Date: Fri, 24 Jun 2016 18:21:19 GMT\n'
'Expires: -1\n'
'Cache-Control: private, max-age=0\n'
'Content-Type: text/html; charset=ISO-8859-1\n'
'P3P: CP=&amp;amp;quot;This is not a P3P policy! See '
'https://www.google.com/support/accounts/answer/151657?hl=en for more info.&amp;amp;quot;\n'
'Server: gws\n'
'X-XSS-Protection: 1; mode=block\n'
'X-Frame-Options: SAMEORIGIN\n'
'Set-Cookie: '
'NID=80=tYjmy0JY6flsSVj7DPSSZNOuqdvqKfKHDcHsPIGu3xFv41LvH_Jg6LrUsDgkPrtM2hmZ3j9V76pS4K_
cBg7pdwueMQfr0DFzw33SwpGex5qzLkXUvUVPfe9g699Qz4cx9ipcbU3HKwrRYA; '
'expires=Sat, 24-Dec-2016 18:21:19 GMT; path=/; domain=.google.com; HttpOnly\n'
'Alternate-Protocol: 443:quic\n'
'Alt-Svc: quic=&amp;amp;quot;:443&amp;amp;quot;; ma=2592000; v=&amp;amp;quot;34,33,32,31,30,29,28,27,26,25&amp;amp;quot;\n'
'Accept-Ranges: none\n'
'Vary: Accept-Encoding\n'
'Connection: close\n'
'\n')
&amp;gt;&amp;gt;&amp;gt; url.getcode()
200

&lt;/pre&gt;
&lt;p&gt;قمنا بإستدعاء وجدتنا وقمنا أيضا بفتح موقع google وأصبح لدينا كائن &lt;strong&gt;HTTPResponse &lt;/strong&gt;نستطيع التعامل معه ، الأمر الأول الذي قمنا به هو تنفيذ &lt;strong&gt;geturl &lt;/strong&gt;للحصول على رابط وهي مفيدة لمعرفة ما إذا تم إعادة توجيهنا إلى رابط أخر أم لا .&lt;/p&gt;
&lt;p&gt;بعد ذلك قمنا بإستدعاء  &lt;strong&gt;info &lt;/strong&gt;والذي سيعرض بيانات وصفية حول الصفحة مثل معلومات حول headers وهكذا يمكننا تعيين نتيجة هذا الأخير لمتغير &lt;strong&gt;headers &lt;/strong&gt;ثم نقوم بمناداة&lt;strong&gt; as_string &lt;/strong&gt;وهذا سيقوم بعرض&lt;strong&gt; header &lt;/strong&gt;المستقبل من موقع قوقل ، يمكننا أيضا الحصول على رمز الإستجابة الخاص ب HTTP بإستدعائنا ل &lt;strong&gt;getcode &lt;/strong&gt;وفي حالتنا هذه هو عبارة عن 200 وهذا يعني نجاح العملية .&lt;/p&gt;
&lt;p&gt;إذا كنت تريد الإطلاع على كود HTML الخاص بالصفحة يمكنك مناداة طريقة &lt;strong&gt;READ&lt;/strong&gt; على متغير url الذي قمنا بإنشاءه، لن أقوم بعرض الناتج لأنه سيكون كبير نوعا ما ولكن يمكنك تجربته لتتأكد.&lt;/p&gt;
&lt;p&gt;يرجى أيضا الـتأكد من أن كائن الطلب الإفتراضي هو GET مالم يتم تحديد خيارات البيانات .&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;تحميل ملف &lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;أهم إستخدامات حزمة  urllib هو تحميل الملفات فدعونا نارى بعض الأمثلة لتحقيق ذلك&lt;/p&gt;
&lt;pre class=&quot;brush: python; title: ; notranslate&quot;&gt;

&amp;gt;&amp;gt;&amp;gt; import urllib.request
&amp;gt;&amp;gt;&amp;gt;url = 'http://www.pyarab.com/wp-content/uploads/2016/07/n.zip'
&amp;gt;&amp;gt;&amp;gt;response = urllib.request.urlopen(url)
&amp;gt;&amp;gt;&amp;gt; data = response.read()
&amp;gt;&amp;gt;&amp;gt; with open('/home/mike/Desktop/test.zip', 'wb') as fobj:
... fobj.write(data)
...

&lt;/pre&gt;
&lt;p&gt;هنا قمنا بفتح الرابط الذي يقودنا إلى الملف المطلوب للتحميل ثم نقوم بقراءة البيانات وبالتالي تتم عملية التحميل .&lt;/p&gt;
&lt;p&gt;هناك طريقة أخرى لتحقيق نفس العملية وهي بإستخدام &lt;strong&gt;urlretrieve :&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;brush: python; title: ; notranslate&quot;&gt;

&amp;gt;&amp;gt;&amp;gt; import urllib.request
&amp;gt;&amp;gt;&amp;gt; url = 'http://www.pyarab.com/wp-content/uploads/2016/07/n.zip'
&amp;gt;&amp;gt;&amp;gt; urllib.request.urlretrieve(url, '/home/mike/Desktop/blog.zip')
('/home/mike/Desktop/blog.zip',
 &amp;lt;http.client.HTTPMessage object at 0x7fddc21c2470&amp;gt;)

&lt;/pre&gt;
&lt;p&gt;هذه الطريقة ستقوم بنسخ كائن الشبكة إلى الملف المحلي ويتم تسمية الملف المنسوخ عشوائيا ويتم نسخه على دليل مؤقت إلا في حالة إستخدام خيارات خاصة لتجعله يقوم بحفظ الملف في دليل معين :&lt;/p&gt;
&lt;pre class=&quot;brush: python; title: ; notranslate&quot;&gt;

&amp;gt;&amp;gt;&amp;gt; import urllib.request
&amp;gt;&amp;gt;&amp;gt; url = 'http://www.blog.pythonlibrary.org/wp-content/uploads/2012/06/wxDbViewer.zip'
&amp;gt;&amp;gt;&amp;gt; tmp_file, header = urllib.request.urlretrieve(url)
&amp;gt;&amp;gt;&amp;gt; with open('/home/mike/Desktop/test.zip', 'wb') as fobj:
...     with open(tmp_file, 'rb') as tmp:
...         fobj.write(tmp.read())

&lt;/pre&gt;
&lt;p&gt;وكما ترى فإنه في الأخير يقوم بعرض عنوان الدليل التي حفظ الملف عليه بالإضافة إلى معلومات رأس الطلب .&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;تحديد وكيل المستخدم الخاص بك&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;عندما تقوم بزيارة موقع ما من خلال المتصفح فإن هذالإخير يخبر الموقع من هو ، وهذا مايسمى بسلسلة &lt;strong&gt;user-agent &lt;/strong&gt;، مكتبة بايثون urllip تقوم بتحديد نفسها ك : &lt;strong&gt;Python-urllib/x.y &lt;/strong&gt;حيث أن X و Y رقم إصدار بايثون الرئيسي والثانوي ، بعض المواقع لن تتعرف على سلسلة وكيل المستخدم وستتصرف بطريقة غريبة أو لن تعمل على الإطلاق .&lt;/p&gt;
&lt;p&gt;لحسن الحظ يمكن إعداد سلسلة وكيل المستخدم خاص بك :&lt;/p&gt;
&lt;pre class=&quot;brush: python; title: ; notranslate&quot;&gt;

&amp;gt;&amp;gt;&amp;gt; import urllib.request
&amp;gt;&amp;gt;&amp;gt; user_agent = ' Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:47.0) Gecko/20100101 Firefox/47.0'
&amp;gt;&amp;gt;&amp;gt; url = 'http://www.pyarab.com/'
&amp;gt;&amp;gt;&amp;gt; headers = {'User-Agent': user_agent}
&amp;gt;&amp;gt;&amp;gt; request = urllib.request.Request(url, headers=headers)
&amp;gt;&amp;gt;&amp;gt; with urllib.request.urlopen(request) as response:
...     with open('/home/mdriscoll/Desktop/user_agent.html', 'wb') as out:
...         out.write(response.read())
&lt;/pre&gt;
&lt;p&gt;هنا قمنا بتعيين وكيل مستخدم لموزيلا فايرفوكس وقمنا بتعيين الموقع الذي نريد منه إختبار وكيل المستخدم الخاص بنا ، بعد ذلك قمنا بتعيين &lt;strong&gt;طلب &lt;/strong&gt;بإستخدام رابطنا والرأس ومررناه إلى&lt;strong&gt; urlopen &lt;/strong&gt;وأخير قمنا بحفظ الناتج وإذا قمت بفتح ملف الذي يحتوي على الناتج ستجد أننا قمنا بتغيير سلسلة وكيل المستخدك بنجاح .&lt;/p&gt;
&lt;p&gt;حاول أن تجرب تغيير وكيل المستخدم عدة مرات مع هذا الكود حتى تفهم ألية العمل .&lt;/p&gt;
&lt;h3&gt;urllib.parse&lt;/h3&gt;
&lt;p&gt;تعتبر مكتبة &lt;strong&gt;urllib.parse &lt;/strong&gt;هي الواجهة القياسية لتفكيك سلاسل الروابط و إعادة ربطهم مرة أخرى ويمكن أيضا إستخدامها لتحويل الروابط النسبية إلى روابط مطلقة ، دعونا نأخذ مثال عن تحليل الرابط يحتوي على علامة إستفهام&lt;/p&gt;
&lt;pre class=&quot;brush: python; title: ; notranslate&quot;&gt;

&amp;gt;&amp;gt;&amp;gt; from urllib.parse import urlparse
&amp;gt;&amp;gt;&amp;gt; result = urlparse('https://duckduckgo.com/?q=python+stubbing&amp;amp;t=canonical&amp;amp;ia=qa')
&amp;gt;&amp;gt;&amp;gt; result
ParseResult(scheme='https', netloc='duckduckgo.com', path='/', params='', query='q=python+stubbing&amp;amp;t=canonical&amp;amp;ia=qa', fragment='')
&amp;gt;&amp;gt;&amp;gt; result.netloc
'duckduckgo.com'
&amp;gt;&amp;gt;&amp;gt; result.geturl()
'https://duckduckgo.com/?q=python+stubbing&amp;amp;t=canonical&amp;amp;ia=qa'
&amp;gt;&amp;gt;&amp;gt; result.port
None
&lt;/pre&gt;
&lt;p&gt;قمنا بإستدعاء وظيفة &lt;strong&gt;urlparse &lt;/strong&gt;ومررناها إلى رابط يحتوي على علامة إستفهام والتي نسأل من خلالها على python stubbing وكان الناتج عبارة عن كائن &lt;strong&gt;ParseResult &lt;/strong&gt;والذي يكمن إستخدامه للمزيد من المعلومات عن الرابط (رقم المنفذ،مكان السبكة،المسار إلخ&amp;#8230;).&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;تقديم نموذج ويب &lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;هذه الوحدة أيضا تحتوي على طريقة &lt;strong&gt;urlencode &lt;/strong&gt;وهي جيدة لتمرير البيانات إلى عناوين الروابط ، والإستخدام الشائع لمكتبة urllib.parse هو تقديم نماذج الويب ، فدعونا نكتشف كيفية عمل محرك بحث ل duckduckgo خاص ببايثون&lt;/p&gt;
&lt;pre class=&quot;brush: python; title: ; notranslate&quot;&gt;

&amp;gt;&amp;gt;&amp;gt; import urllib.request
&amp;gt;&amp;gt;&amp;gt; import urllib.parse
&amp;gt;&amp;gt;&amp;gt; data = urllib.parse.urlencode({'q': 'Python'})
&amp;gt;&amp;gt;&amp;gt; data
'q=Python'
&amp;gt;&amp;gt;&amp;gt; url = 'http://duckduckgo.com/html/'
&amp;gt;&amp;gt;&amp;gt; full_url = url + '?' + data
&amp;gt;&amp;gt;&amp;gt; response = urllib.request.urlopen(full_url)
&amp;gt;&amp;gt;&amp;gt; with open('/home/mike/Desktop/results.html', 'wb') as f:
...     f.write(response.read())

&lt;/pre&gt;
&lt;p&gt;مثال واضح وصريح ففي الأساس نريد تقديم إستعلام ل  duckduckgo بإنفسنا بإستخدام بايثون بدلا من المتصفح ولفعل ذلك نحتاج إلى بناء سلسلة إستفهام بإستخدام &lt;strong&gt;urlencode &lt;/strong&gt;ثم نقوم بجمع كل ذلك لنشكل رابط مؤهل تماما ثم نقوم بإستخدام urllib.request لتقديم نموذج الويب بعد ذلك نقوم بالإستيلاء على النتيجة وحفظها .&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;إلى هنا نكون قد وصلنا إلى مرحلة ينبغي لك أن تكون قادرا على التعامل مع حزمة  urllib ، فقد تعلمنا كيفية تحميل ملف ، تقديم نموذج ويب ، تغيير عميل المستخدم وهذا ا يعني ان المكتبة تقوم بهذه الوظائف فقط بل على العكس هناك العديد من المهام التي يمكن لها أن تقوم بها .&lt;/p&gt;</description>
	<pubDate>Fri, 29 Jul 2016 11:44:37 +0000</pubDate>
</item>
<item>
	<title>Simon: udatetime a fast RFC3339 compliant date-time Python library</title>
	<guid>https://aboutsimon.com/blog/2016/07/29/udatetime-fast-rfc3339-date-time-python-library.html</guid>
	<link>https://aboutsimon.com/blog/2016/07/29/udatetime-fast-rfc3339-date-time-python-library.html</link>
	<description>&lt;p&gt;Working with date-time formats can be pretty upsetting because of the
variate of different formats people can come up with. date-times are used
everywhere not just only logging or meta data in database entries and are
pretty important. That’s why I encourage developers in using the
&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601&lt;/a&gt; derived
&lt;a href=&quot;https://www.ietf.org/rfc/rfc3339.txt&quot;&gt;RFC3339&lt;/a&gt; standard for their projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RFC3339 date-time: 2016-07-18T12:58:26.485897 +02:00&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The RFC3339 specification offers the following advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Defined date, time, timezone, date-time format&lt;/li&gt;
  &lt;li&gt;4 digit year&lt;/li&gt;
  &lt;li&gt;Fractional seconds&lt;/li&gt;
  &lt;li&gt;Human readable&lt;/li&gt;
  &lt;li&gt;No redundant information like weekday name&lt;/li&gt;
  &lt;li&gt;Simple specification&lt;/li&gt;
  &lt;li&gt;Machine readable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Having a date-time standard is nice, but using Python’s &lt;code class=&quot;highlighter-rouge&quot;&gt;datetime&lt;/code&gt; library
to parse/format a RFC3339 date-time string or even create a &lt;code class=&quot;highlighter-rouge&quot;&gt;datetime&lt;/code&gt; object
in UTC or local timezone can be painful and slowwwww. That’s why I decided to
implement a &lt;em&gt;Python 2&lt;/em&gt; library to deal with such tasks. The library is called
&lt;code class=&quot;highlighter-rouge&quot;&gt;udatetime&lt;/code&gt; and available on &lt;a href=&quot;https://github.com/freach/udatetime&quot;&gt;github&lt;/a&gt;
or &lt;a href=&quot;https://pypi.python.org/pypi/udatetime&quot;&gt;PyPI&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pip install udatetime
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The goal of the library is to be fast and handy with RFC3339 date-time
formatted strings. The average performance increase of &lt;code class=&quot;highlighter-rouge&quot;&gt;udatetime&lt;/code&gt; compared to
the equivalent &lt;code class=&quot;highlighter-rouge&quot;&gt;datetime&lt;/code&gt; code is 76%. Due to the usage of Python2
CPython API and POSIX features the library is currently only supported on POSIX
systems and not Python3 or Pypy compatible. I’m working on cross-platform and
Pypy support. Support in working on the library is greatly appreciated.&lt;/p&gt;

&lt;h2 id=&quot;benchmark&quot;&gt;Benchmark&lt;/h2&gt;

&lt;p&gt;The benchmark setup is the following.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;udatetime&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;RFC3339_DATE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'2016-07-18'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RFC3339_TIME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'12:58:26.485897+02:00'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RFC3339_DATE_TIME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RFC3339_DATE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'T'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RFC3339_TIME&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RFC3339_DATE_TIME_DTLIB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RFC3339_DATE_TIME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# datetime can't parse timezones through strptime&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DATE_TIME_FORMAT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Y-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;m-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;dT&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;H:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;M:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;S.&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;f'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DATETIME_OBJ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strptime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RFC3339_DATE_TIME_DTLIB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATE_TIME_FORMAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;benchmark_parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;datetime_strptime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strptime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RFC3339_DATE_TIME_DTLIB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATE_TIME_FORMAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;udatetime_parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;udatetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RFC3339_DATE_TIME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime_strptime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;udatetime_parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;benchmark_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;datetime_strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DATETIME_OBJ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATE_TIME_FORMAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;udatetime_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;udatetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATETIME_OBJ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime_strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;udatetime_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;benchmark_utcnow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;datetime_utcnow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utcnow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;udatetime_utcnow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;udatetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utcnow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime_utcnow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;udatetime_utcnow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;benchmark_now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;datetime_now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;udatetime_now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;udatetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime_now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;udatetime_now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;benchmark_utcnow_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;datetime_utcnow_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utcnow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATE_TIME_FORMAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;udatetime_utcnow_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;udatetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utcnow_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime_utcnow_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;udatetime_utcnow_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;benchmark_now_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;datetime_now_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATE_TIME_FORMAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;udatetime_now_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;udatetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime_now_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;udatetime_now_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you like you can run the benchmark yourself by running the &lt;code class=&quot;highlighter-rouge&quot;&gt;bench.py&lt;/code&gt; script
from the repository.&lt;/p&gt;

&lt;p&gt;The results of 1 million executions and 3 repeats look like this.&lt;/p&gt;

&lt;h3 id=&quot;benchmarkparse&quot;&gt;benchmark_parse&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;datetime.strptime(RFC3339_DATE_TIME_DTLIB, DATE_TIME_FORMAT)
vs
udatetime.from_string(RFC3339_DATE_TIME)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://aboutsimon.com/images/udatetime/benchmark_parse.png&quot; alt=&quot;Benchmark results benchmark_parse&quot; title=&quot;udatetime 89% faster&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;benchmarkformat&quot;&gt;benchmark_format&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DATETIME_OBJ.strftime(DATE_TIME_FORMAT)
vs
udatetime.to_string(DATETIME_OBJ)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://aboutsimon.com/images/udatetime/benchmark_format.png&quot; alt=&quot;Benchmark results benchmark_format&quot; title=&quot;udatetime 68% faster&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;benchmarknow&quot;&gt;benchmark_now&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;datetime.now()
vs
udatetime.now()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://aboutsimon.com/images/udatetime/benchmark_now.png&quot; alt=&quot;Benchmark results benchmark_now&quot; title=&quot;udatetime 85% faster&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;benchmarkutcnow&quot;&gt;benchmark_utcnow&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;datetime.utcnow()
vs
udatetime.utcnow()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://aboutsimon.com/images/udatetime/benchmark_utcnow.png&quot; alt=&quot;Benchmark results benchmark_utcnow&quot; title=&quot;udatetime 59% faster&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;benchmarknowtostring&quot;&gt;benchmark_now_to_string&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;datetime.now().strftime(DATE_TIME_FORMAT)
vs
udatetime.now_to_string()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://aboutsimon.com/images/udatetime/benchmark_now_to_string.png&quot; alt=&quot;Benchmark results benchmark_now_to_string&quot; title=&quot;udatetime 81% faster&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;benchmarkutcnowtostring&quot;&gt;benchmark_utcnow_to_string&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;datetime.utcnow().strftime(DATE_TIME_FORMAT)
vs
udatetime.utcnow_to_string()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://aboutsimon.com/images/udatetime/benchmark_utcnow_to_string.png&quot; alt=&quot;Benchmark results benchmark_utcnow_to_string&quot; title=&quot;udatetime 74% faster&quot; /&gt;&lt;/p&gt;</description>
	<pubDate>Fri, 29 Jul 2016 09:29:04 +0000</pubDate>
</item>
<item>
	<title>Semaphore Community: Getting Started with Behavior Testing in Python with Behave</title>
	<guid>https://semaphoreci.com/community/tutorials/getting-started-with-behavior-testing-in-python-with-behave</guid>
	<link>https://semaphoreci.com/community/tutorials/getting-started-with-behavior-testing-in-python-with-behave</link>
	<description>&lt;p&gt;This article is brought with ❤ to you by &lt;a href=&quot;https://semaphoreci.com?utm_source=rss&amp;utm_medium=feed&amp;utm_term=Getting_Started_with_Behavior_Testing_in_Python_with_Behave&amp;utm_content=toplink&amp;utm_campaign=community&quot;&gt;Semaphore&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Behavior testing simply means that we should test how an application behaves in
certain situations. Often the behavior is given to us developers by our
customers. They describe the functionality of an application, and we write code
to meet their specifications. Behavioral tests are a tool to formalize their
requirements into tests. This leads naturally to behavior-driven development
&lt;a href=&quot;https://semaphoreci.com/community/tutorials/behavior-driven-development&quot;&gt;(BDD)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After completing this tutorial, you should be able to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Explain the benefits of behavior testing&lt;/li&gt;
&lt;li&gt;Explain the &quot;given&quot;, &quot;when&quot;, and &quot;then&quot; phases of Behave&lt;/li&gt;
&lt;li&gt;Write basic behavioral tests using Behave&lt;/li&gt;
&lt;li&gt;Write parameterized behavioral tests using Behave&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;Before starting, make sure you have the following installed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;Python 3.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pythonhosted.org/behave/install.html&quot;&gt;Behave&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Setting Up Your Environment&lt;/h2&gt;

&lt;p&gt;This tutorial will walk you through writing tests for and coding a feature of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Blackjack&quot;&gt;Twenty-One&lt;/a&gt; (or &quot;Blackjack&quot;) game.
Specifically, we'll be testing the logic for the dealer. To get started, create
a root directory where your code will go, and then create the following
directories and blank files:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-sh&quot;&gt;&lt;pre&gt;.
├── features
│   ├── dealer.feature
│   └── steps
│       └── steps.py
└── twentyone.py
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here's a brief explanation of the files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;dealer.feature&lt;/code&gt;: The written out tests for the dealer feature.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;steps.py&lt;/code&gt;: The code that runs the tests in &lt;code&gt;dealer.feature&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;twentyone.py&lt;/code&gt;: The implementation code for the dealer feature.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Writing Your First Test&lt;/h2&gt;

&lt;p&gt;Although behavioral tests do not require test-driven development, the two
methodologies go hand-in-hand. We'll approach this problem from a test-driven
perspective, so instead of jumping to code, we'll start with the tests.&lt;/p&gt;

&lt;h3&gt;Writing the Scenario&lt;/h3&gt;

&lt;p&gt;Open &lt;code&gt;dealer.feature&lt;/code&gt; and add the following first line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Feature: The dealer for the game of 21
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This line describes the feature. In a large application, you would have many
features. Next, we'll add a test. The first test will be simple — when the round
starts, the dealer should deal itself two cards. The word Behave uses to define
a test is &quot;Scenario&quot;, so go ahead and add the following line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Scenario: Deal initial cards
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before we write more, we need to understand the three phases of a basic Behave
test: &quot;Given&quot;, &quot;When&quot;, and &quot;Then&quot;. &quot;Given&quot; initializes a state, &quot;When&quot; describes
an action, and &quot;Then&quot; states the expected outcome. For this test, our state is a
new dealer object, the action is the round starting, and the expected outcome is
that the dealer has two cards. Here's how this is translated into a Behave test:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Scenario: Deal initial cards
  Given a dealer
  When the round starts
  Then the dealer gives itself two cards
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the three phases read like a normal English sentence. You should
strive for this when writing behavioral tests because they are easily readable
by anyone working in the code base.&lt;/p&gt;

&lt;p&gt;Now to see how Behave works, simply open a terminal in the root directory of
your code and run the following command:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-sh&quot;&gt;&lt;pre&gt;behave
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should see this output:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-sh&quot;&gt;&lt;pre&gt;Feature: The dealer &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; the game of &lt;span class=&quot;m&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# features/dealer.feature:1&lt;/span&gt;

  Scenario: Deal initial cards             &lt;span class=&quot;c&quot;&gt;# features/dealer.feature:3&lt;/span&gt;
    Given a dealer                         &lt;span class=&quot;c&quot;&gt;# None&lt;/span&gt;
    When the round starts                  &lt;span class=&quot;c&quot;&gt;# None&lt;/span&gt;
    Then the dealer gives itself two cards &lt;span class=&quot;c&quot;&gt;# None&lt;/span&gt;


Failing scenarios:
  features/dealer.feature:3  Deal initial cards

&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; features passed, &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; failed, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; skipped
&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; scenarios passed, &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; failed, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; skipped
&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; steps passed, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; failed, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; skipped, &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; undefined
Took 0m0.000s

You can implement step definitions &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; undefined steps with these snippets:
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; The rest of output removed &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; brevity &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The key part here is that we have one failing scenario (and therefore a failing
feature) that we need to fix. Below that, Behave suggests how to implement
steps. You can think of a step as a task for Behave to execute. Each phase
(&quot;given&quot;, &quot;when&quot;, and &quot;then&quot;) are all implemented as steps.&lt;/p&gt;

&lt;h3&gt;Writing the Steps&lt;/h3&gt;

&lt;p&gt;The steps that Behave runs are written in Python and they are the link between
the descriptive tests in &lt;code&gt;.feature&lt;/code&gt; files and the actual application code. Go
ahead and open &lt;code&gt;steps.py&lt;/code&gt; and add the following imports:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-python&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;behave&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;twentyone&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Behave steps use annotations that match the names of the phases. This is the
first step as described in the scenario:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-python&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;@given&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a dealer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;step_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dealer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dealer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It's important to notice that the text inside of the annotation matches the
scenario text exactly. If it doesn't match, the test cannot run.&lt;/p&gt;

&lt;p&gt;The context object is passed from step to step, and it is where we can store
information to be used by other steps. Since this step is a &quot;given&quot;, we need to
initialize our state. We do that by creating a &lt;code&gt;Dealer&lt;/code&gt; object, and attaching
that object to the &lt;code&gt;context&lt;/code&gt;. If you run &lt;code&gt;behave&lt;/code&gt; again, you'll see the test
fails, but now for a different reason: We haven't defined the Dealer class yet!
Again, we have a failing test that is &quot;driving&quot; us to do work.&lt;/p&gt;

&lt;p&gt;Now we will open &lt;code&gt;twentyone.py&lt;/code&gt; and create a &lt;code&gt;Dealer&lt;/code&gt; class:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-python&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dealer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Run &lt;code&gt;behave&lt;/code&gt; once again to verify that we fixed the last error we saw, but that
the scenario still fails because the &quot;when&quot; and &quot;then&quot; steps are not
implemented. From here on, the tutorial will not explicitly state when you
should run &lt;code&gt;behave&lt;/code&gt;. But remember, the cycle is to write a test, see that it
fails, and then write code to make the test pass.&lt;/p&gt;

&lt;p&gt;Here are the next steps to add to &lt;code&gt;steps.py&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-python&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;@when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'the round starts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;step_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dealer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;


&lt;span class=&quot;nd&quot;&gt;@then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'the dealer gives itself two cards'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;step_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dealer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Again, the annotation text matches the text in the scenario exactly. In the
&quot;when&quot; step, we have access to the &lt;code&gt;dealer&lt;/code&gt; created in &quot;given&quot; and we can now
call a method on that object. Finally, in the &quot;then&quot; step, we still have access
to the &lt;code&gt;dealer&lt;/code&gt;, and we assert that the dealer has two cards in its hand.&lt;/p&gt;

&lt;p&gt;We defined two new pieces of code that need to be implemented: &lt;code&gt;new_round()&lt;/code&gt; and
&lt;code&gt;hand&lt;/code&gt;. Switch back to &lt;code&gt;twentyone.py&lt;/code&gt; and add the following to the &lt;code&gt;Dealer&lt;/code&gt;
class:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-python&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dealer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new_round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_next_card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_next_card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;_next_card()&lt;/code&gt; function will be defined as a top-level function of the
module, along with a definition of the cards. At the top of the file, add the
following:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-python&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_cards&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'4'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'5'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'6'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'7'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'9'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'10'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'J'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Q'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'K'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_next_card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remember that &lt;code&gt;random&lt;/code&gt; is not secure and should not be used in a real
implementation of this game, but for this tutorial it will be fine.&lt;/p&gt;

&lt;p&gt;If you run &lt;code&gt;behave&lt;/code&gt; now, you should see that the test passes:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-sh&quot;&gt;&lt;pre&gt;Feature: The dealer &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; the game of &lt;span class=&quot;m&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# features/dealer.feature:1&lt;/span&gt;

  Scenario: Deal initial cards             &lt;span class=&quot;c&quot;&gt;# features/dealer.feature:3&lt;/span&gt;
    Given a dealer                         &lt;span class=&quot;c&quot;&gt;# features/steps/steps.py:5 0.000s&lt;/span&gt;
    When the round starts                  &lt;span class=&quot;c&quot;&gt;# features/steps/steps.py:9 0.000s&lt;/span&gt;
    Then the dealer gives itself two cards &lt;span class=&quot;c&quot;&gt;# features/steps/steps.py:14 0.000s&lt;/span&gt;

&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; feature passed, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; failed, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; skipped
&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; scenario passed, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; failed, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; skipped
&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; steps passed, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; failed, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; skipped, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; undefined
Took 0m0.000s
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Writing Tableized Tests&lt;/h2&gt;

&lt;p&gt;Often when writing tests we want to test the same behavior against many
different parameters and check the results. Behave makes this easier to do by
providing tools to create a tableized test instead of writing out each test
separately. The next game logic to test is that the dealer knows the point value
of its hand. Here is a test that checks several scenarios:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Scenario Outline: Get hand total
  Given a &amp;lt;hand&amp;gt;
  When the dealer sums the cards
  Then the &amp;lt;total&amp;gt; is correct

  Examples: Hands
  | hand          | total |
  | 5,7           | 12    |
  | 5,Q           | 15    |
  | Q,Q,A         | 21    |
  | Q,A           | 21    |
  | A,A,A         | 13    |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should recognize the familiar &quot;given, when, then&quot; pattern, but there's a lot
of differences in this test. First, it is called a &quot;Scenario Outline&quot;. Next, it
uses parameters in angle brackets that correspond to the headers of the table.
Finally, there's a table of inputs (&quot;hand&quot;) and outputs (&quot;total&quot;).&lt;/p&gt;

&lt;p&gt;The steps will be similar to what we've seen before, but we'll now get to use
the parameterized steps feature of Behave.&lt;/p&gt;

&lt;p&gt;Here's how to implement the new &quot;given&quot; step:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-python&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;@given&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a {hand}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;step_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dealer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dealer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dealer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The angle brackets in the &lt;code&gt;dealer.feature&lt;/code&gt; file are replaced with braces, and
the &lt;code&gt;hand&lt;/code&gt; parameter becomes an object that is passed to the step, along with
the context.&lt;/p&gt;

&lt;p&gt;Just like before, we create a new &lt;code&gt;Dealer&lt;/code&gt; object, but this time we manually set
the dealer's cards instead of generating them randomly. Since the &lt;code&gt;hand&lt;/code&gt;
parameter is a simple string, we split the parameter to get a list.&lt;/p&gt;

&lt;p&gt;Next, add the remaining steps:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-python&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;@when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'the dealer sums the cards'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;step_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dealer_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dealer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_hand_total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'the {total:d} is correct'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;step_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dealer_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &quot;when&quot; step is nothing new, and the &quot;then&quot; step should look familiar. If
you're wondering about the &quot;:d&quot; after the &lt;code&gt;total&lt;/code&gt; parameter, that is a shortcut
to tell Behave to treat the parameter as an integer. It saves us from manually
casting with the &lt;code&gt;int()&lt;/code&gt; function. Here's a complete &lt;a href=&quot;https://pythonhosted.org/behave/parse_builtin_types.html&quot;&gt;list of patterns&lt;/a&gt; that Behave
accepts and if you need advanced parsing, you can &lt;a href=&quot;https://pythonhosted.org/behave/api.html#step-parameters&quot;&gt;define your own pattern&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There's many different approaches to summing values of cards, but here's one
solution to find the total of the dealer's hand. Create this as a top-level
function in the &lt;code&gt;twentyone.py&lt;/code&gt; module:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-python&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_hand_total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value_map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;card&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hand&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;card&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ace_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ace_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ace_count&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ace_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ace_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In short, the function maps the card character strings to point values, and sums
the values. However, aces have to be handled separately because they can value
1 or 11 points.&lt;/p&gt;

&lt;p&gt;We also need to give the dealer the ability to total its cards. Add this
function to the &lt;code&gt;Dealer&lt;/code&gt; class:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-python&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_hand_total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_hand_total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you run &lt;code&gt;behave&lt;/code&gt; now, you'll see that each example in the table runs as its
own scenario. This saves a lot of space in the features file, but still gives us
rigorous tests that pass or fail individually.&lt;/p&gt;

&lt;p&gt;We'll add one more tableized test, this time to test that the dealer plays by
the rules. Traditionally, the dealer must play &quot;hit&quot; until he or she has 17 or
more points. Add this scenario outline to test that behavior:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Scenario Outline: Dealer plays by the rules
  Given a hand &amp;lt;total&amp;gt;
   when the dealer determines a play
   then the &amp;lt;play&amp;gt; is correct

  Examples: Hands
  | total  | play   |
  | 10     | hit    |
  | 15     | hit    |
  | 16     | hit    |
  | 17     | stand  |
  | 18     | stand  |
  | 19     | stand  |
  | 20     | stand  |
  | 21     | stand  |
  | 22     | stand  |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before we add the next steps, it's important to understand that when using
parameters, the order matters. Parameterized steps should be ordered from most
restrictive to least restrictive. If you do not do this, the correct step may
not be matched by Behave. To make this easier, group your steps by type. Here is
the new given step, ordered properly:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-python&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;@given&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a dealer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;step_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dealer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dealer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;## NEW STEP&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@given&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a hand {total:d}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;step_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dealer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dealer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;


&lt;span class=&quot;nd&quot;&gt;@given&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a {hand}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;step_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dealer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dealer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dealer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The typed parameter &lt;code&gt;{total:d}&lt;/code&gt; is more restrictive than the untyped &lt;code&gt;{hand}&lt;/code&gt;,
so it must come earlier in the file.&lt;/p&gt;

&lt;p&gt;The new &quot;when&quot; step is not parameterized and can be placed anywhere, but, for
readability, should be grouped with the other &lt;code&gt;when&lt;/code&gt; steps:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-python&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;@when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'the dealer determines a play'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;step_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dealer_play&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dealer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;determine_play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that this test expects a &lt;code&gt;determine_play()&lt;/code&gt; method, which we can add to
the &lt;code&gt;Dealer&lt;/code&gt; class:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-python&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;determine_play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'hit'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'stand'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Last, the &quot;then&quot; step is parameterized so it needs to also be ordered properly:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-python&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;@then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'the dealer gives itself two cards'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;step_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dealer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;nd&quot;&gt;@then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'the {total:d} is correct'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;step_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dealer_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;## NEW STEP&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'the {play} is correct'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;step_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dealer_play&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Putting Everything Together&lt;/h2&gt;

&lt;p&gt;We're going to add one final test that will tie together all of the code we've
just written. We've proven to ourselves with tests that the dealer can deal
itself cards, determine its hand total, and make a play separately, but there's
no code to tie this together. Since we are emphasizing test-driven development,
let's add a test for this behavior.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Scenario: A Dealer can always play
  Given a dealer
  When the round starts
  Then the dealer chooses a play
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We already wrote steps for the &quot;given&quot; and &quot;when&quot; statements, but we need to add
a step for &quot;the dealer chooses a play.&quot; Add this new step, and be sure to order
it properly:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-python&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;@then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'the dealer gives itself two cards'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;step_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dealer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#NEW STEP&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'the dealer chooses a play'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;step_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dealer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'stand'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'hit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;


&lt;span class=&quot;nd&quot;&gt;@then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'the {total:d} is correct'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;step_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dealer_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This test relies on a new method &lt;code&gt;make_play()&lt;/code&gt; that you should now add to the
&lt;code&gt;Dealer&lt;/code&gt; class:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-python&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;determine_play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_hand_total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This method isn't critical, but makes it easier to use the &lt;code&gt;Dealer&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;If you've done everything correctly, running &lt;code&gt;behave&lt;/code&gt; should display all of the
tests and give a summary similar to this:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-sh&quot;&gt;&lt;pre&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; feature passed, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; failed, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; skipped
&lt;span class=&quot;m&quot;&gt;16&lt;/span&gt; scenarios passed, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; failed, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; skipped
&lt;span class=&quot;m&quot;&gt;48&lt;/span&gt; steps passed, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; failed, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; skipped, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; undefined
Took 0m0.007s
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This tutorial walked you through setting up a new project with the Behave
library and using test-driven development to build the code based off of
behavioral tests.&lt;/p&gt;

&lt;p&gt;If you would like to get experience writing more tests with this project, try
implementing a &lt;code&gt;Player&lt;/code&gt; class and &lt;code&gt;player.feature&lt;/code&gt; that plays with some &lt;a href=&quot;https://en.wikipedia.org/wiki/Blackjack#Basic_strategy&quot;&gt;basic
strategy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To learn more about BDD and why you might want to adopt it, check out our
article on &lt;a href=&quot;https://semaphoreci.com/community/tutorials/behavior-driven-development&quot;&gt;Behavior-Driven Development&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This article is brought with ❤ to you by &lt;a href=&quot;https://semaphoreci.com?utm_source=rss&amp;utm_medium=feed&amp;utm_term=Getting_Started_with_Behavior_Testing_in_Python_with_Behave&amp;utm_content=bottomlink&amp;utm_campaign=community&quot;&gt;Semaphore&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Fri, 29 Jul 2016 08:47:20 +0000</pubDate>
</item>
<item>
	<title>Glyph Lefkowitz: Don’t Trust Sourceforge, Ever</title>
	<guid>https://glyph.twistedmatrix.com/2016/07/dont-trust-sourceforge.html</guid>
	<link>https://glyph.twistedmatrix.com/2016/07/dont-trust-sourceforge.html</link>
	<description>&lt;p&gt;If you use a computer and you use the Internet, chances are you’ll eventually
find some software that, for whatever reason, is still hosted on Sourceforge.
In case you’re not familiar with it, Sourceforge is a publicly-available
&lt;a href=&quot;http://www.howtogeek.com/218764/warning-don’t-download-software-from-sourceforge-if-you-can-help-it/&quot;&gt;malware vector&lt;/a&gt;
that also sometimes contains useful open source binary downloads, especially
for Windows.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In addition to injecting malware into their downloads (a practice they claim,
hopefully truthfully, to have stopped), Sourceforge also presents an initial
download page over HTTPS, &lt;em&gt;then redirects the user to HTTP for the download
itself&lt;/em&gt;, snatching defeat from the jaws of victory.  This is fantastically
irresponsible, &lt;em&gt;especially&lt;/em&gt; for a site offering un-sandboxed binaries for
download, &lt;em&gt;especially&lt;/em&gt; in the era of &lt;a href=&quot;https://letsencrypt.org&quot;&gt;Let’s Encrypt&lt;/a&gt;
where getting a TLS certificate takes
&lt;a href=&quot;https://txacme.readthedocs.io/en/latest/using.html#server-endpoint-string&quot;&gt;approximately thirty seconds and exactly zero dollars&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So: if you can possibly find your downloads anywhere else, go there.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;But, rarely, you will find yourself at the mercy of whatever responsible
stewards&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;http://glyph.twistedmatrix.com/feeds/all.atom.xml#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; are still operating Sourceforge if you want to get access to some
useful software.  As it happens, there is a loophole that will let you
authenticate the binaries that you download from them so you won’t be left
vulnerable to an evil barista: their “file release system”, the thing you use
to upload your projects, will allow you to &lt;em&gt;download&lt;/em&gt; other projects as well.&lt;/p&gt;
&lt;p&gt;To use it, first,
&lt;a href=&quot;https://sourceforge.net/user/registration&quot;&gt;make yourself a sourceforge account&lt;/a&gt;.
You may need to create a dummy project as well.  Sourceforge maintains
&lt;a href=&quot;https://sourceforge.net/p/forge/documentation/SSH%20Key%20Fingerprints/&quot;&gt;an HTTPS-accessible list of key fingerprints&lt;/a&gt;
for all the SSH servers that they operate, so you can verify the public key
below.&lt;/p&gt;
&lt;p&gt;Then you’ll need to connect to their upload server over SFTP, and go to the
path &lt;code&gt;/home/frs/project/&amp;lt;the project’s name&amp;gt;/.../&lt;/code&gt; to get the file.&lt;/p&gt;
&lt;p&gt;I have written a little Python script&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;http://glyph.twistedmatrix.com/feeds/all.atom.xml#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; that automates the translation of a
Sourceforge file-browser download URL, one that you can get if you right-click
on a download in the “files” section of a project’s website, and runs the
relevant &lt;code&gt;scp&lt;/code&gt; command to retrieve the file for you.  This isn’t on PyPI or
anything, and I’m not putting any effort into polishing it further; the best
possible outcome of this blog post is that it immediately stops being
necessary.&lt;/p&gt;
&lt;div class=&quot;footnote&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;Are you one of those people? I would prefer to be lauding your legacy of
decades of valuable contributions to the open source community instead of
ridiculing your dangerous incompetence, but repeated bug reports and
support emails have gone unanswered. Please
&lt;a href=&quot;mailto:sourceforge-stewards-255237@glyph.im&quot;&gt;get in touch&lt;/a&gt; so we can
discuss this.&amp;#160;&lt;a class=&quot;footnote-backref&quot; href=&quot;http://glyph.twistedmatrix.com/feeds/all.atom.xml#fnref:1&quot; rev=&quot;footnote&quot; title=&quot;Jump back to footnote 1 in the text&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;Code:&lt;/p&gt;
&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;ch&quot;&gt;#!/usr/bin/env python2&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sfuri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# for example,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# http://sourceforge.net/projects/refind/files/0.9.2/refind-bin-0.9.2.zip/download&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;r&amp;quot;https://sourceforge.net/projects/(.*)/files/(.*)/download&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sfuri&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Not a SourceForge download link.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sftppath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/home/frs/project/{project}/{path}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;knows_about_web_sf_net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expanduser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;~/.ssh/known_hosts&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;rb&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_known_hosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_known_hosts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'web.sourceforge.net'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sfkey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;web.sourceforge.net ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA2uifHZbNexw6cXbyg1JnzDitL5VhYs0E65Hk/tLAPmcmm5GuiGeUoI/B0eUSNFsbqzwgwrttjnzKMKiGLN5CWVmlN1IXGGAfLYsQwK6wAu7kYFzkqP4jcwc5Jr9UPRpJdYIK733tSEmzab4qc5Oq8izKQKIaxXNe7FgmL15HjSpatFt9w/ot/CHS78FUAr3j3RwekHCm/jhPeqhlMAgC+jUgNJbFt3DlhDaRMa0NYamVzmX8D47rtmBbEDU3ld6AezWBPUR5Lh7ODOwlfVI58NAf/aYNlmvl2TZiauBCTa7OPYSyXJnIPbQXg6YQlDknNCr0K769EjeIlAfY87Z4tw==&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;knows_about_web_sf_net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expanduser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;~/.ssh/known_hosts&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;append_known_hosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;append_known_hosts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sfkey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;scp web.sourceforge.net:{sftppath} .&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sftppath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sftppath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;a class=&quot;footnote-backref&quot; href=&quot;http://glyph.twistedmatrix.com/feeds/all.atom.xml#fnref:2&quot; rev=&quot;footnote&quot; title=&quot;Jump back to footnote 2 in the text&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
	<pubDate>Fri, 29 Jul 2016 06:06:00 +0000</pubDate>
</item>
<item>
	<title>tryexceptpass: Great! Glad to hear I inspired some creativity!!!</title>
	<guid>https://medium.com/@tryexceptpass/great-glad-to-hear-i-inspired-some-creativity-bea58fdf5217?source=rss-138c0eb26be5------2</guid>
	<link>https://medium.com/@tryexceptpass/great-glad-to-hear-i-inspired-some-creativity-bea58fdf5217?source=rss-138c0eb26be5------2</link>
	<description>&lt;div class=&quot;medium-feed-item&quot;&gt;&lt;p class=&quot;medium-feed-snippet&quot;&gt;I&amp;#x2019;ll be posting some project links soon so folks can start contributing if interested.&lt;/p&gt;&lt;p class=&quot;medium-feed-link&quot;&gt;&lt;a href=&quot;https://medium.com/@tryexceptpass/great-glad-to-hear-i-inspired-some-creativity-bea58fdf5217?source=rss-138c0eb26be5------2&quot;&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description>
	<pubDate>Fri, 29 Jul 2016 04:24:09 +0000</pubDate>
</item>
<item>
	<title>tryexceptpass: I’ve seen flexx, but I want to try to do it in native Python without transpiling.</title>
	<guid>https://medium.com/@tryexceptpass/ive-seen-flexx-but-i-want-to-try-to-do-it-in-native-python-without-transpiling-be8571f1a19a?source=rss-138c0eb26be5------2</guid>
	<link>https://medium.com/@tryexceptpass/ive-seen-flexx-but-i-want-to-try-to-do-it-in-native-python-without-transpiling-be8571f1a19a?source=rss-138c0eb26be5------2</link>
	<description>&lt;div class=&quot;medium-feed-item&quot;&gt;&lt;p class=&quot;medium-feed-link&quot;&gt;&lt;a href=&quot;https://medium.com/@tryexceptpass/ive-seen-flexx-but-i-want-to-try-to-do-it-in-native-python-without-transpiling-be8571f1a19a?source=rss-138c0eb26be5------2&quot;&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description>
	<pubDate>Fri, 29 Jul 2016 04:21:03 +0000</pubDate>
</item>
<item>
	<title>tryexceptpass: Yes, I was made aware of remi after my first article.</title>
	<guid>https://medium.com/@tryexceptpass/yes-i-was-made-aware-of-remi-after-my-first-article-5aeddd9e4845?source=rss-138c0eb26be5------2</guid>
	<link>https://medium.com/@tryexceptpass/yes-i-was-made-aware-of-remi-after-my-first-article-5aeddd9e4845?source=rss-138c0eb26be5------2</link>
	<description>&lt;div class=&quot;medium-feed-item&quot;&gt;&lt;p class=&quot;medium-feed-snippet&quot;&gt;I think it&amp;#x2019;s great to see that other folks have gone down a similar path&amp;#x2026; I&amp;#x2019;m mostly doing this as an exercise in working with websockets&amp;#x2026;&lt;/p&gt;&lt;p class=&quot;medium-feed-link&quot;&gt;&lt;a href=&quot;https://medium.com/@tryexceptpass/yes-i-was-made-aware-of-remi-after-my-first-article-5aeddd9e4845?source=rss-138c0eb26be5------2&quot;&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description>
	<pubDate>Fri, 29 Jul 2016 04:19:12 +0000</pubDate>
</item>
<item>
	<title>Marcos Dione: osm-centerlines-two-days-after</title>
	<guid>http://www.grulic.org.ar/~mdione/glob//posts/osm-centerlines-two-days-after/</guid>
	<link>http://www.grulic.org.ar/~mdione/glob//posts/osm-centerlines-two-days-after/</link>
	<description>&lt;p&gt;In this last two days I've been expanding
&lt;a href=&quot;https://github.com/StyXman/osm-centerlines&quot;&gt;&lt;code&gt;osm-centerlines&lt;/code&gt;&lt;/a&gt;. Now it not only
supports ways more complex than a simple rectangle, but also ones that lead to
'branches' (unfortunately, most probably because the mapper either imported
bad data or mapped it himself). Still, I tested it in very complex polygons
and the result is not pretty. There is still lots of room for improvements.&lt;/p&gt;

&lt;p&gt;Unluckily, it's not as stand alone as it could be.
The problem is that, so far, the algos force you to provide now only the polygon
you want to process, but also its
&lt;a href=&quot;https://en.wikipedia.org/wiki/Topological_skeleton&quot;&gt;skeleton&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Medial_axis&quot;&gt;medial&lt;/a&gt;. The code extends the
medial using info extracted from the skeleton in such a way that the resulting
medial ends on a segment of the polygon, hopefully the one(s) that cross
from one riverbank to another at down and upstream. Calculating the skeleton
could be performed by &lt;a href=&quot;http://www.cgal.org/&quot;&gt;&lt;code&gt;CGAL&lt;/code&gt;&lt;/a&gt;, but the current
&lt;a href=&quot;https://github.com/cgal/cgal-swig-bindings&quot;&gt;Python binding&lt;/a&gt; doesn't include
that function yet. As for the medial, SFCGAL (a C++ wrapper for CGAL)
&lt;a href=&quot;https://oslandia.github.io/SFCGAL/doxygen/group__public__api.html#ga85786b4c262436d1f1fccad17f3cb7f2&quot;&gt;exports a function that calculates an approximative medial&lt;/a&gt;,
but there seem to be no Python bindings for them yet.&lt;/p&gt;

&lt;p&gt;So, a partial solution would be to use PostGIS-2.2's &lt;code&gt;ST_StraightSkeleton()&lt;/code&gt; and
&lt;code&gt;ST_ApproximateMedialAxis()&lt;/code&gt;, so I added a function called
&lt;code&gt;skeleton_medial_from_postgis()&lt;/code&gt;. The parameters are a &lt;code&gt;psycopg2&lt;/code&gt; connection to a
PostgreSQL+PostGIS database and the way you want to calculate, as a &lt;code&gt;shapely.geometry&lt;/code&gt;,
and it returns the skeleton and the medial ready to be fed into &lt;code&gt;extend_medials()&lt;/code&gt;.
The result of that should be ready for mapping.&lt;/p&gt;

&lt;p&gt;So there's that. I'll be trying to improve it in the next days, and start looking
into converting it into a JOSM plugin.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;http://www.grulic.org.ar/~mdione/glob//tags/openstreetmap/&quot;&gt;openstreetmap&lt;/a&gt; &lt;a href=&quot;http://www.grulic.org.ar/~mdione/glob//tags/gis/&quot;&gt;gis&lt;/a&gt; &lt;span class=&quot;selflink&quot;&gt;python&lt;/span&gt;&lt;/p&gt;</description>
	<pubDate>Thu, 28 Jul 2016 22:39:57 +0000</pubDate>
</item>
<item>
	<title>Continuum Analytics News: Dask and scikit-learn: a 3-Part Tutorial</title>
	<guid>https://www.continuum.io/blog/developer-blog/dask-and-scikit-learn-3-part-tutorial</guid>
	<link>https://www.continuum.io/blog/developer-blog/dask-and-scikit-learn-3-part-tutorial</link>
	<description>&lt;h2 class=&quot;article__category&quot;&gt;
    &lt;a href=&quot;https://www.continuum.io/article-categories/developer-blog&quot;&gt;Developer Blog&lt;/a&gt;  &lt;/h2&gt;
&lt;div class=&quot;article__posted&quot;&gt;
      &lt;span class=&quot;article__posted-label&quot;&gt;Posted&lt;/span&gt; &lt;span class=&quot;article__posted-date&quot;&gt;&lt;span class=&quot;date-display-single&quot;&gt;Thursday, July 28, 2016&lt;/span&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;div class=&quot;article__authors&quot;&gt;
      &lt;div class=&quot;article__author&quot;&gt;&lt;div class=&quot;profile-teaser&quot;&gt;

  &lt;div class=&quot;profile__photo&quot;&gt;
      &lt;a href=&quot;https://www.continuum.io/people/jim-crist&quot;&gt;&lt;img src=&quot;https://www.continuum.io/sites/default/files/styles/profile/public/jim_crist.jpg?itok=z52hBO9T&quot; width=&quot;180&quot; height=&quot;180&quot; alt=&quot;Jim Crist&quot; title=&quot;Jim Crist&quot; /&gt;&lt;/a&gt;  &lt;/div&gt;

  &lt;div class=&quot;profile-teaser__details&quot;&gt;
    &lt;h3 class=&quot;profile-teaser__name&quot;&gt;
      &lt;a class=&quot;profile-teaser__name-link&quot; href=&quot;https://www.continuum.io/people/jim-crist&quot;&gt;Jim Crist&lt;/a&gt;
    &lt;/h3&gt;
              &lt;div class=&quot;profile-teaser__company&quot;&gt;  Continuum Analytics&lt;/div&gt;
      &lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
&lt;div class=&quot;article__body&quot;&gt;
      &lt;p&gt;Dask core contributor Jim Crist has put together a series of posts discussing some recent experiments combining &lt;a href=&quot;http://dask.pydata.org/en/latest/&quot;&gt;Dask&lt;/a&gt; and &lt;a href=&quot;http://scikit-learn.org/stable/&quot;&gt;scikit-learn&lt;/a&gt; on his blog, &lt;a href=&quot;http://jcrist.github.io/blog.html&quot;&gt;Marginally Stable&lt;/a&gt;. From these experiments, a small library has been built up, and can be found &lt;a href=&quot;https://github.com/dask/dask-learn&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The tutorial spans three posts, which covers model parallelism, data parallelism and combining the two with a real-life dataset. &lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;http://jcrist.github.io/dask-sklearn-part-1.html&quot;&gt;Part I: Dask &amp;amp; scikit-learn: Model Parallelism&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this post we'll look instead at model-parallelism (use same data across different models), and dive into a daskified implementation of GridSearchCV.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;media media-element-container media-default&quot;&gt;&lt;div id=&quot;file-677&quot; class=&quot;file file-image file-image-gif&quot;&gt;

        &lt;h2 class=&quot;element-invisible&quot;&gt;&lt;a href=&quot;https://www.continuum.io/files/gridsearchschedulegif&quot;&gt;grid_search_schedule.gif&lt;/a&gt;&lt;/h2&gt;
    
  
  &lt;div class=&quot;content&quot;&gt;
    &lt;img height=&quot;300&quot; width=&quot;1207&quot; class=&quot;media-element file-default&quot; src=&quot;https://www.continuum.io/sites/default/files/grid_search_schedule.gif&quot; alt=&quot;&quot; /&gt;  &lt;/div&gt;

  
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;http://jcrist.github.io/dask-sklearn-part-2.html&quot;&gt;Part II: Dask &amp;amp; scikit-learn: Data Parallelism&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the last post we discussed model-parallelism — fitting several models across the same data. In this post we'll look into simple patterns for data-parallelism, which will allow fitting a single model on larger datasets.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;media media-element-container media-default&quot;&gt;&lt;div id=&quot;file-678&quot; class=&quot;file file-image file-image-png&quot;&gt;

        &lt;h2 class=&quot;element-invisible&quot;&gt;&lt;a href=&quot;https://www.continuum.io/files/screen-shot-2016-07-28-123122-pmpng&quot;&gt;Screen Shot 2016-07-28 at 12.31.22 PM.png&lt;/a&gt;&lt;/h2&gt;
    
  
  &lt;div class=&quot;content&quot;&gt;
    &lt;img height=&quot;595&quot; width=&quot;889&quot; class=&quot;media-element file-default&quot; src=&quot;https://www.continuum.io/sites/default/files/Screen%20Shot%202016-07-28%20at%2012.31.22%20PM.png&quot; alt=&quot;&quot; /&gt;  &lt;/div&gt;

  
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;http://jcrist.github.io/dask-sklearn-part-3.html&quot;&gt;Part III: Dask &amp;amp; scikit-learn: Putting it All Together&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this post we'll combine the above concepts together to do distributed learning and grid search on a real dataset; namely the airline dataset. This contains information on every flight in the USA between 1987 and 2008.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;media media-element-container media-default&quot;&gt;&lt;div id=&quot;file-679&quot; class=&quot;file file-image file-image-gif&quot;&gt;

        &lt;h2 class=&quot;element-invisible&quot;&gt;&lt;a href=&quot;https://www.continuum.io/files/distributedgridsearchwebuigif&quot;&gt;distributed_grid_search_webui.gif&lt;/a&gt;&lt;/h2&gt;
    
  
  &lt;div class=&quot;content&quot;&gt;
    &lt;img height=&quot;354&quot; width=&quot;700&quot; class=&quot;media-element file-default&quot; src=&quot;https://www.continuum.io/sites/default/files/distributed_grid_search_webui.gif&quot; alt=&quot;&quot; /&gt;  &lt;/div&gt;

  
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Keep up with Jim and his blog by following him on Twitter, &lt;a href=&quot;https://twitter.com/jiminy_crist&quot;&gt;@jiminy_crist&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
  &lt;/div&gt;</description>
	<pubDate>Thu, 28 Jul 2016 17:34:43 +0000</pubDate>
</item>
<item>
	<title>Automating OSINT: Dark Web OSINT With Python and OnionScan: Part One</title>
	<guid>http://www.automatingosint.com/blog/2016/07/dark-web-osint-with-python-and-onionscan-part-one/</guid>
	<link>http://www.automatingosint.com/blog/2016/07/dark-web-osint-with-python-and-onionscan-part-one/</link>
	<description>&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;You may have heard of this awesome tool called &lt;a href=&quot;https://github.com/s-rah/onionscan&quot; target=&quot;_blank&quot;&gt;OnionScan&lt;/a&gt; that is used to scan hidden services in the dark web looking for potential data leaks. Recently the project released some &lt;a href=&quot;https://mascherari.press/onionscan-report-june-2016/&quot;&gt;cool visualizations&lt;/a&gt; and a high level description of what their scanning results looked like. What they didn&amp;#8217;t provide is how to actually go about scanning as much of the dark web as possible, and then how to produce those very cool visualizations that they show.&lt;/p&gt;
&lt;p&gt;At a high level we need to do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Setup a server somewhere to host our scanner 24/7 because it takes some time to do the scanning work.&lt;/li&gt;
&lt;li&gt;Get TOR running on the server.&lt;/li&gt;
&lt;li&gt;Get OnionScan setup.&lt;/li&gt;
&lt;li&gt;Write some Python to handle the scanning and some of the other data management to deal with the scan results.&lt;/li&gt;
&lt;li&gt;Write some more Python to make some cool graphs. (Part Two of the series)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let&amp;#8217;s get started!&lt;/p&gt;
&lt;h2&gt;Setting up a Digital Ocean Droplet&lt;/h2&gt;
&lt;p&gt;If you already use Amazon, or have your own Linux server somewhere you can skip this step. For the rest of you, you can use my &lt;a href=&quot;https://www.digitalocean.com/?refcode=4eff058c416c&quot; target=&quot;_blank&quot;&gt;referral link here&lt;/a&gt; to get a $10 credit with Digital Ocean that will get you a couple months free (full disclosure I make money in my Digital Ocean account if you start paying for your server, feel free to bypass that referral link and pay for your own server). I am assuming you are running Ubuntu 16.04 for the rest of the instructions.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The first thing you need to do is to create a new Droplet by clicking on the big &lt;strong&gt;Create Droplet &lt;/strong&gt;button.&lt;/li&gt;
&lt;li&gt;Next select a Ubuntu 16.04 configuration, and select the $5.00/month option (unless you want something more powerful).&lt;/li&gt;
&lt;li&gt;You can pick a datacenter wherever you like, and then scroll to the bottom and click &lt;strong&gt;Create.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It will begin creating your droplet, and soon you should receive an email with how to access your new Linux server. If you are on Mac OSX or Linux get your terminal open. If you are on Windows then grab Putty from &lt;a href=&quot;https://the.earth.li/~sgtatham/putty/latest/x86/putty.exe&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On Mac OSX it is: Finder -&amp;gt; Applications -&amp;gt; Utilities -&amp;gt; Terminal&lt;/li&gt;
&lt;li&gt;On Linux: Click your start menu and search for Terminal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you are going to SSH into your new server. Windows Putty users just punch the IP address in that you received in your email and hit Enter. You will be authenticating as the &lt;strong&gt;root&lt;/strong&gt; user and then type in the password you were provided in your email.&lt;/p&gt;
&lt;p&gt;For Mac OSX and Linux people you will type the following into your terminal:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;ssh root@IPADDRESS&lt;/pre&gt;&lt;p&gt;You will be forced enter your password a second time, and then you have to change your password. Once that is done you should now be logged into your server.&lt;/p&gt;
&lt;h2&gt;Installing Prerequisites&lt;/h2&gt;
&lt;p&gt;Now we need to install the prerequisites for our upcoming code and for OnionScan. Follow each of these steps carefully and the instructions are the same for Mac OSX, Linux or Windows because the commands are all being run on the server.&lt;/p&gt;
&lt;p&gt;Feel free to copy and paste each command instead of typing it out. Hit Enter on your keyboard after each step and watch for any problems or errors.&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;screen&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;apt-get update&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;apt-get install tor git bison libexif-dev&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;apt-get install python-pip&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;pip install stem&lt;/pre&gt;&lt;p&gt;Now we need to install the Go requirements (OnionScan is written in Go). The following instructions are from Ryan Frankel&amp;#8217;s post &lt;a href=&quot;http://www.hostingadvice.com/how-to/install-golang-on-ubuntu/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;bash &amp;lt; &amp;lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;[[ -s &quot;$HOME/.gvm/scripts/gvm&quot; ]] &amp;amp;&amp;amp; source &quot;$HOME/.gvm/scripts/gvm&quot;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;source /root/.gvm/scripts/gvm&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;gvm install go1.4 --binary&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;gvm use go1.4&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Ok beauty we have Go installed. Now let&amp;#8217;s get OnionScan setup by entering the following:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;go get github.com/s-rah/onionscan&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;go install github.com/s-rah/onionscan&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Now if you just type:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;onionscan&lt;/pre&gt;&lt;p&gt;And hit Enter you should get the &lt;strong&gt;onionscan&lt;/strong&gt; command line usage information. If this all worked then you have successfully installed OnionScan. If you for some reason close your terminal and you can&amp;#8217;t run the &lt;strong&gt;onionscan &lt;/strong&gt;binary anymore just simply do a:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;gvm use go1.4&lt;/pre&gt;&lt;p&gt;and it will fix it for you.&lt;/p&gt;
&lt;p&gt;Now we need to make a small modification to the TOR configuration to allow our Python script to request a new identity (a new IP address) which we will use when we run into scanning trouble later on. We have to enable this by doing the following:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;tor --hash-password PythonRocks&lt;/pre&gt;&lt;p&gt;This will give you output that will include the bottom line that looks like this:&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;16:3E73307B3E434914604C25C498FBE5F9B3A3AE2FB97DAF70616591AAF8&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Copy this line and then type:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;nano -w /etc/tor/torrc&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;This will open a simple text editor. Now go to the bottom of the file by hitting the following keystrokes (or endlessly scrolling down):&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;strong&gt;CTRL+W CTRL+V&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Paste in the following values at the bottom of the file:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;ControlPort 9051
ControlListenAddress 127.0.0.1
HashedControlPassword 16:3E73307B3E434914604C25C498FBE5F9B3A3AE2FB97DAF70616591AAF8&lt;/pre&gt;&lt;p&gt;Now hit &lt;strong&gt;CTRL+O&lt;/strong&gt; to write the file and &lt;strong&gt;CTRL+X&lt;/strong&gt; to exit the file editor. Now type:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;service tor restart&lt;/pre&gt;&lt;p&gt;This will restart TOR and it should have our new settings in place. Note that if you want to use a password other than &lt;em&gt;PythonRocks&lt;/em&gt; you will have to follow the steps above substituting your own password in place, and you will also have to later change the associated Python code.&lt;/p&gt;
&lt;p&gt;We are almost ready to start writing some code. The last step is to grab my list of .onion addresses (at last count around 7182 addresses) so that your script has a starting point to start scanning hidden services.&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;wget https://raw.githubusercontent.com/automatingosint/osint_public/master/onionrunner/onion_master_list.txt&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Whew! We are all setup and ready to start punching out some code. At this point you can switch to your local machine or if you are comfortable writing code on a Linux server by all means go for it. I find it easier to use &lt;a href=&quot;https://www.wingide.com&quot; target=&quot;_blank&quot;&gt;WingIDE&lt;/a&gt; on my local machine personally.&lt;/p&gt;
&lt;h3 class=&quot;p1&quot;&gt;A Note About Screen&lt;/h3&gt;
&lt;p&gt;You notice that both sets of instructions I have you run the &lt;strong&gt;screen &lt;/strong&gt;command. This is a handy way to keep your session alive even if you get disconnected from your server. When you want to jump back into that session, you simply SSH back into the server and execute:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;screen -rx&lt;/pre&gt;&lt;p&gt;This will be handy later on when you start doing your scanning work, as it can take days for it to complete fully.&lt;/p&gt;
&lt;h2 class=&quot;p1&quot;&gt;Writing an OnionScan Wrapper&lt;/h2&gt;
&lt;p&gt;OnionScan is a great tool but we need to be able to systematically control it, and process the results. As well, TOR connections are notoriously unstable so we need a way to kill a stuck scan process and grab a fresh IP address from the TOR network. Let&amp;#8217;s get coding! Crack open a new Python file, name it &lt;em&gt;onionrunner.py&lt;/em&gt; and start punching out the following (you can download the full code &lt;a href=&quot;https://raw.githubusercontent.com/automatingosint/osint_public/master/onionrunner/onionrunner.py&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;from stem.control import Controller
from stem import Signal
from threading import Timer
from threading import Event

import codecs
import json
import os
import random
import subprocess
import sys
import time

onions         = []
session_onions = []

identity_lock  = Event()
identity_lock.set()

#
# Grab the list of onions from our master list file.
#
def get_onion_list():
	
	# open the master list
	if os.path.exists(&quot;onion_master_list.txt&quot;):
	
		with open(&quot;onion_master_list.txt&quot;,&quot;rb&quot;) as fd:

			stored_onions = fd.read().splitlines()	
	else:
		print &quot;[!] No onion master list. Download it!&quot;
		sys.exit(0)
	
	print &quot;[*] Total onions for scanning: %d&quot; % len(stored_onions)

	return stored_onions
#
# Stores an onion in the master list of onions.
#
def store_onion(onion):
	
	print &quot;[++] Storing %s in master list.&quot; % onion
	
	with codecs.open(&quot;onion_master_list.txt&quot;,&quot;ab&quot;,encoding=&quot;utf8&quot;) as fd:
		fd.write(&quot;%s\n&quot; % onion)

	return

#
# Handle a timeout from the onionscan process.
#
def handle_timeout(process,onion):
	
	global session_onions
	global identity_lock 

	# halt the main thread while we grab a new identity
	identity_lock.clear()

	# kill the onionscan process
	try:
		process.kill()
		print &quot;[!!!] Killed the onionscan process.&quot;
	except:
		pass

	# Now we switch TOR identities to make sure we have a good connection
	with Controller.from_port(port=9051) as torcontrol:
		
		# authenticate to our local TOR controller
        	torcontrol.authenticate(&quot;PythonRocks&quot;)
		
		# send the signal for a new identity
        	torcontrol.signal(Signal.NEWNYM)
		
		# wait for the new identity to be initialized
        	time.sleep(torcontrol.get_newnym_wait())
		
        	print &quot;[!!!] Switched TOR identities.&quot;
	
	# push the onion back on to the list	
	session_onions.append(onion)
	random.shuffle(session_onions)

	# allow the main thread to resume executing
	identity_lock.set()	

	return
	
#
# Runs onion scan as a child process.
#		
def run_onionscan(onion):
	
	print &quot;[*] Onionscanning %s&quot; % onion
	
	# fire up onionscan
	process = subprocess.Popen([&quot;onionscan&quot;,&quot;--jsonReport&quot;,&quot;--simpleReport=false&quot;,onion],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
	
	# start the timer and let it run 5 minutes
	process_timer = Timer(300,handle_timeout,args=[process,onion])
	process_timer.start()

	# wait for the onion scan results
	stdout = process.communicate()[0]

	# we have received valid results so we can kill the timer 
	if process_timer.is_alive():
		process_timer.cancel()
		return stdout

	print &quot;[!!!] Process timed out!&quot;	

	return None

#
# Handle new onions.
#
def add_new_onions(new_onion_list):
	
	global onions
	global session_onions
	
	for linked_onion in new_onion_list:

		if linked_onion not in onions and linked_onion.endswith(&quot;.onion&quot;):

			print &quot;[++] Discovered new .onion =&amp;gt; %s&quot; % linked_onion

			onions.append(linked_onion)
			session_onions.append(linked_onion)
			random.shuffle(session_onions)
			store_onion(linked_onion)
	
	return

#
# Processes the JSON result from onionscan.
#
def process_results(onion,json_response):
	global onions
	global session_onions

	# create our output folder if necessary
	if not os.path.exists(&quot;onionscan_results&quot;):
		os.mkdir(&quot;onionscan_results&quot;)

	# write out the JSON results of the scan
	with open(&quot;%s/%s.json&quot; % (&quot;onionscan_results&quot;,onion), &quot;wb&quot;) as fd:
		fd.write(json_response)

	# look for additional .onion domains to add to our scan list
	scan_result = ur&quot;%s&quot; % json_response.decode(&quot;utf8&quot;)
	scan_result = json.loads(scan_result)
	
	if scan_result['linkedSites'] is not None:
		add_new_onions(scan_result['linkedSites'])		
		
	if scan_result['relatedOnionDomains'] is not None:
		add_new_onions(scan_result['relatedOnionDomains'])
		
	if scan_result['relatedOnionServices'] is not None:
		add_new_onions(scan_result['relatedOnionServices'])
		

	return

# get a list of onions to process
onions = get_onion_list()

# randomize the list a bit
random.shuffle(onions)
session_onions = list(onions)

count = 0

while count &amp;lt; len(onions):

	# if the event is cleared we will halt here
	# otherwise we continue executing
	identity_lock.wait()

	# grab a new onion to scan
	print &quot;[*] Running %d of %d.&quot; % (count,len(onions))
	onion  = session_onions.pop()
	
	# test to see if we have already retrieved results for this onion
	if os.path.exists(&quot;onionscan_results/%s.json&quot; % onion):

		print &quot;[!] Already retrieved %s. Skipping.&quot; % onion
		count += 1

		continue

	# run the onion scan	
	result = run_onionscan(onion)

	# process the results
	if result is not None:
		
		if len(result):
			process_results(onion,result)		

	count += 1&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Lines 1-12: &lt;/strong&gt;we import all of the required modules that we are going to be using in this script.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lines 14-15: &lt;/strong&gt;we initialize two empty lists to hold our full onion list and the list of onions we are working through during the current scanning session.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lines 17-18: &lt;/strong&gt;we utilize an Event object that will help us to coordinate two threads that will be executing. We have to &lt;strong&gt;set &lt;/strong&gt;the Event object first so that by default our main thread will execute later. More on these threads later.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we have to build some helper functions that will deal with loading our master list of onions and to be able to continue adding newly discovered onions to this list:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;from stem.control import Controller
from stem import Signal
from threading import Timer
from threading import Event

import codecs
import json
import os
import random
import subprocess
import sys
import time

onions         = []
session_onions = []

identity_lock  = Event()
identity_lock.set()

#
# Grab the list of onions from our master list file.
#
def get_onion_list():
	
	# open the master list
	if os.path.exists(&quot;onion_master_list.txt&quot;):
	
		with open(&quot;onion_master_list.txt&quot;,&quot;rb&quot;) as fd:

			stored_onions = fd.read().splitlines()	
	else:
		print &quot;[!] No onion master list. Download it!&quot;
		sys.exit(0)
	
	print &quot;[*] Total onions for scanning: %d&quot; % len(stored_onions)

	return stored_onions
#
# Stores an onion in the master list of onions.
#
def store_onion(onion):
	
	print &quot;[++] Storing %s in master list.&quot; % onion
	
	with codecs.open(&quot;onion_master_list.txt&quot;,&quot;ab&quot;,encoding=&quot;utf8&quot;) as fd:
		fd.write(&quot;%s\n&quot; % onion)

	return
	
#
# Runs onion scan as a child process.
#		
def run_onionscan(onion):
	
	print &quot;[*] Onionscanning %s&quot; % onion
	
	# fire up onionscan
	process = subprocess.Popen([&quot;onionscan&quot;,&quot;--jsonReport&quot;,&quot;--simpleReport=false&quot;,onion],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
	
	# start the timer and let it run 5 minutes
	process_timer = Timer(300,handle_timeout,args=[process,onion])
	process_timer.start()

	# wait for the onion scan results
	stdout = process.communicate()[0]

	# we have received valid results so we can kill the timer 
	if process_timer.is_alive():
		process_timer.cancel()
		return stdout

	print &quot;[!!!] Process timed out!&quot;	

	return None

#
# Handle a timeout from the onionscan process.
#
def handle_timeout(process,onion):

	global session_onions
	global identity_lock 

	# halt the main thread while we grab a new identity
	identity_lock.clear()

	# kill the onionscan process
	try:
		process.kill()
		print &quot;[!!!] Killed the onionscan process.&quot;
	except:
		pass

	# Now we switch TOR identities to make sure we have a good connection
	with Controller.from_port(port=9051) as torcontrol:

		# authenticate to our local TOR controller
		torcontrol.authenticate(&quot;PythonRocks&quot;)

		# send the signal for a new identity
		torcontrol.signal(Signal.NEWNYM)

		# wait for the new identity to be initialized
		time.sleep(torcontrol.get_newnym_wait())

		print &quot;[!!!] Switched TOR identities.&quot;

	# push the onion back on to the list	
	session_onions.append(onion)
	random.shuffle(session_onions)

	# allow the main thread to resume executing
	identity_lock.set()	

	return


#
# Processes the JSON result from onionscan.
#
def process_results(onion,json_response):
	global onions
	global session_onions

	# create our output folder if necessary
	if not os.path.exists(&quot;onionscan_results&quot;):
		os.mkdir(&quot;onionscan_results&quot;)

	# write out the JSON results of the scan
	with open(&quot;%s/%s.json&quot; % (&quot;onionscan_results&quot;,onion), &quot;wb&quot;) as fd:
		fd.write(json_response)

	# look for additional .onion domains to add to our scan list
	scan_result = ur&quot;%s&quot; % json_response.decode(&quot;utf8&quot;)
	scan_result = json.loads(scan_result)
	
	if scan_result['linkedSites'] is not None:
		add_new_onions(scan_result['linkedSites'])		
		
	if scan_result['relatedOnionDomains'] is not None:
		add_new_onions(scan_result['relatedOnionDomains'])
		
	if scan_result['relatedOnionServices'] is not None:
		add_new_onions(scan_result['relatedOnionServices'])
		

	return

#
# Handle new onions.
#
def add_new_onions(new_onion_list):

	global onions
	global session_onions

	for linked_onion in new_onion_list:

		if linked_onion not in onions and linked_onion.endswith(&quot;.onion&quot;):

			print &quot;[++] Discovered new .onion =&amp;gt; %s&quot; % linked_onion

			onions.append(linked_onion)
			session_onions.append(linked_onion)
			random.shuffle(session_onions)
			store_onion(linked_onion)

	return

# get a list of onions to process
onions = get_onion_list()

# randomize the list a bit
random.shuffle(onions)
session_onions = list(onions)

count = 0

while count &amp;lt; len(onions):

	# if the event is cleared we will halt here
	# otherwise we continue executing
	identity_lock.wait()

	# grab a new onion to scan
	print &quot;[*] Running %d of %d.&quot; % (count,len(onions))
	onion  = session_onions.pop()
	
	# test to see if we have already retrieved results for this onion
	if os.path.exists(&quot;onionscan_results/%s.json&quot; % onion):

		print &quot;[!] Already retrieved %s. Skipping.&quot; % onion
		count += 1

		continue

	# run the onion scan	
	result = run_onionscan(onion)

	# process the results
	if result is not None:
		
		if len(result):
			process_results(onion,result)		

	count += 1&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Line 23: &lt;/strong&gt;we define our &lt;strong&gt;get_onion_list &lt;/strong&gt;function that is going to load our master list.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lines 26-33: &lt;/strong&gt;we check to see if the &lt;em&gt;onion_master_list.txt&lt;/em&gt; file is present (26) and if it is we crack it open (28) and then read the contents back and split it so that each line gets append to a list called &lt;strong&gt;stored_onions &lt;/strong&gt;(30). If the file isn&amp;#8217;t present then we output an error message (32) and exit the script (33).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lines 35-37: &lt;/strong&gt;we simply output the total number of onions loaded (35) and return the list back from the function (37).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 41: &lt;/strong&gt;we define our &lt;strong&gt;store_onion &lt;/strong&gt;function that takes a single parameter &lt;strong&gt;onion &lt;/strong&gt;which is the hidden service we wish to add to the master list.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lines 45-46: &lt;/strong&gt;we crack open the master list file (45) and then write out the hidden service address (46).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we will implement the function that deals with running the &lt;em&gt;onionscan &lt;/em&gt;binary to do the actual scanning work. Keep adding code in your editor:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;from stem.control import Controller
from stem import Signal
from threading import Timer
from threading import Event

import codecs
import json
import os
import random
import subprocess
import sys
import time

onions         = []
session_onions = []

identity_lock  = Event()
identity_lock.set()

#
# Grab the list of onions from our master list file.
#
def get_onion_list():
	
	# open the master list
	if os.path.exists(&quot;onion_master_list.txt&quot;):
	
		with open(&quot;onion_master_list.txt&quot;,&quot;rb&quot;) as fd:

			stored_onions = fd.read().splitlines()	
	else:
		print &quot;[!] No onion master list. Download it!&quot;
		sys.exit(0)
	
	print &quot;[*] Total onions for scanning: %d&quot; % len(stored_onions)

	return stored_onions
#
# Stores an onion in the master list of onions.
#
def store_onion(onion):
	
	print &quot;[++] Storing %s in master list.&quot; % onion
	
	with codecs.open(&quot;onion_master_list.txt&quot;,&quot;ab&quot;,encoding=&quot;utf8&quot;) as fd:
		fd.write(&quot;%s\n&quot; % onion)

	return
	
#
# Runs onion scan as a child process.
#		
def run_onionscan(onion):
	
	print &quot;[*] Onionscanning %s&quot; % onion
	
	# fire up onionscan
	process = subprocess.Popen([&quot;onionscan&quot;,&quot;--jsonReport&quot;,&quot;--simpleReport=false&quot;,onion],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
	
	# start the timer and let it run 5 minutes
	process_timer = Timer(300,handle_timeout,args=[process,onion])
	process_timer.start()

	# wait for the onion scan results
	stdout = process.communicate()[0]

	# we have received valid results so we can kill the timer 
	if process_timer.is_alive():
		process_timer.cancel()
		return stdout

	print &quot;[!!!] Process timed out!&quot;	

	return None

#
# Handle a timeout from the onionscan process.
#
def handle_timeout(process,onion):

	global session_onions
	global identity_lock 

	# halt the main thread while we grab a new identity
	identity_lock.clear()

	# kill the onionscan process
	try:
		process.kill()
		print &quot;[!!!] Killed the onionscan process.&quot;
	except:
		pass

	# Now we switch TOR identities to make sure we have a good connection
	with Controller.from_port(port=9051) as torcontrol:

		# authenticate to our local TOR controller
		torcontrol.authenticate(&quot;PythonRocks&quot;)

		# send the signal for a new identity
		torcontrol.signal(Signal.NEWNYM)

		# wait for the new identity to be initialized
		time.sleep(torcontrol.get_newnym_wait())

		print &quot;[!!!] Switched TOR identities.&quot;

	# push the onion back on to the list	
	session_onions.append(onion)
	random.shuffle(session_onions)

	# allow the main thread to resume executing
	identity_lock.set()	

	return


#
# Processes the JSON result from onionscan.
#
def process_results(onion,json_response):
	global onions
	global session_onions

	# create our output folder if necessary
	if not os.path.exists(&quot;onionscan_results&quot;):
		os.mkdir(&quot;onionscan_results&quot;)

	# write out the JSON results of the scan
	with open(&quot;%s/%s.json&quot; % (&quot;onionscan_results&quot;,onion), &quot;wb&quot;) as fd:
		fd.write(json_response)

	# look for additional .onion domains to add to our scan list
	scan_result = ur&quot;%s&quot; % json_response.decode(&quot;utf8&quot;)
	scan_result = json.loads(scan_result)
	
	if scan_result['linkedSites'] is not None:
		add_new_onions(scan_result['linkedSites'])		
		
	if scan_result['relatedOnionDomains'] is not None:
		add_new_onions(scan_result['relatedOnionDomains'])
		
	if scan_result['relatedOnionServices'] is not None:
		add_new_onions(scan_result['relatedOnionServices'])
		

	return

#
# Handle new onions.
#
def add_new_onions(new_onion_list):

	global onions
	global session_onions

	for linked_onion in new_onion_list:

		if linked_onion not in onions and linked_onion.endswith(&quot;.onion&quot;):

			print &quot;[++] Discovered new .onion =&amp;gt; %s&quot; % linked_onion

			onions.append(linked_onion)
			session_onions.append(linked_onion)
			random.shuffle(session_onions)
			store_onion(linked_onion)

	return

# get a list of onions to process
onions = get_onion_list()

# randomize the list a bit
random.shuffle(onions)
session_onions = list(onions)

count = 0

while count &amp;lt; len(onions):

	# if the event is cleared we will halt here
	# otherwise we continue executing
	identity_lock.wait()

	# grab a new onion to scan
	print &quot;[*] Running %d of %d.&quot; % (count,len(onions))
	onion  = session_onions.pop()
	
	# test to see if we have already retrieved results for this onion
	if os.path.exists(&quot;onionscan_results/%s.json&quot; % onion):

		print &quot;[!] Already retrieved %s. Skipping.&quot; % onion
		count += 1

		continue

	# run the onion scan	
	result = run_onionscan(onion)

	# process the results
	if result is not None:
		
		if len(result):
			process_results(onion,result)		

	count += 1&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Line 53: &lt;/strong&gt;we define the &lt;strong&gt;run_onionscan &lt;/strong&gt;function to take one parameter &lt;strong&gt;onion &lt;/strong&gt;that is the address of our hidden service.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 58: &lt;/strong&gt;here we are using the &lt;strong&gt;subprocess.Popen &lt;/strong&gt;class to start &lt;em&gt;onionscan &lt;/em&gt;passing in the command line arguments &lt;em&gt;&amp;#8211;jsonReport &lt;/em&gt;and &lt;em&gt;&amp;#8211;simpleReport=false &lt;/em&gt;which will give us JSON output on STDOUT and disable the normal output from OnionScan. The final two parameters are telling &lt;strong&gt;Popen &lt;/strong&gt;that we want to communicate with &lt;strong&gt;stdout &lt;/strong&gt;and &lt;strong&gt;stderr &lt;/strong&gt;meaning we want to be able to retrieve the output of both.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lines 61-62: &lt;/strong&gt;here is where we have a bit of magic. We create a new &lt;strong&gt;Timer &lt;/strong&gt;object that is provided from the &lt;strong&gt;threading &lt;/strong&gt;module. A &lt;strong&gt;Timer &lt;/strong&gt;will run for a specified time, and then execute a function when that time has been reached unless you cancel the &lt;strong&gt;Timer&lt;/strong&gt;. In this case we are setting it to 300 seconds (5 minutes) and then telling it to call the &lt;strong&gt;handle_timeout &lt;/strong&gt;function when 300 seconds have been hit. We also pass in the &lt;strong&gt;process &lt;/strong&gt;object and the current &lt;strong&gt;onion &lt;/strong&gt;we are processing. This will allow us to handle when onionscan executes for 5 minutes which could indicate that our Tor connection has gone down or that the hidden service can&amp;#8217;t be reached any longer, so we want to be able to kill the onionscan, request a new IP from the Tor network, and continue working through our list of hidden services. We start the timer on line 62.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 65: &lt;/strong&gt;here we are waiting for OnionScan to return the JSON results from the scan and we store it in the &lt;strong&gt;stdout &lt;/strong&gt;variable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lines 68-70: &lt;/strong&gt;if we reach this line then we know that OnionScan was finished before the 300 seconds are up, so we check if the &lt;strong&gt;Timer &lt;/strong&gt;is still running (68) and then cancel the &lt;strong&gt;Timer &lt;/strong&gt;(69) and return the JSON output (70).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So there you have a neat trick to deal with some timing issues when running command line binaries. Now let&amp;#8217;s implement the actual timeout handling function to deal will killing the OnionScan and requesting a new IP from the Tor network. Keep on adding code:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;from stem.control import Controller
from stem import Signal
from threading import Timer
from threading import Event

import codecs
import json
import os
import random
import subprocess
import sys
import time

onions         = []
session_onions = []

identity_lock  = Event()
identity_lock.set()

#
# Grab the list of onions from our master list file.
#
def get_onion_list():
	
	# open the master list
	if os.path.exists(&quot;onion_master_list.txt&quot;):
	
		with open(&quot;onion_master_list.txt&quot;,&quot;rb&quot;) as fd:

			stored_onions = fd.read().splitlines()	
	else:
		print &quot;[!] No onion master list. Download it!&quot;
		sys.exit(0)
	
	print &quot;[*] Total onions for scanning: %d&quot; % len(stored_onions)

	return stored_onions
#
# Stores an onion in the master list of onions.
#
def store_onion(onion):
	
	print &quot;[++] Storing %s in master list.&quot; % onion
	
	with codecs.open(&quot;onion_master_list.txt&quot;,&quot;ab&quot;,encoding=&quot;utf8&quot;) as fd:
		fd.write(&quot;%s\n&quot; % onion)

	return
	
#
# Runs onion scan as a child process.
#		
def run_onionscan(onion):
	
	print &quot;[*] Onionscanning %s&quot; % onion
	
	# fire up onionscan
	process = subprocess.Popen([&quot;onionscan&quot;,&quot;--jsonReport&quot;,&quot;--simpleReport=false&quot;,onion],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
	
	# start the timer and let it run 5 minutes
	process_timer = Timer(300,handle_timeout,args=[process,onion])
	process_timer.start()

	# wait for the onion scan results
	stdout = process.communicate()[0]

	# we have received valid results so we can kill the timer 
	if process_timer.is_alive():
		process_timer.cancel()
		return stdout

	print &quot;[!!!] Process timed out!&quot;	

	return None

#
# Handle a timeout from the onionscan process.
#
def handle_timeout(process,onion):

	global session_onions
	global identity_lock 

	# halt the main thread while we grab a new identity
	identity_lock.clear()

	# kill the onionscan process
	try:
		process.kill()
		print &quot;[!!!] Killed the onionscan process.&quot;
	except:
		pass

	# Now we switch TOR identities to make sure we have a good connection
	with Controller.from_port(port=9051) as torcontrol:

		# authenticate to our local TOR controller
		torcontrol.authenticate(&quot;PythonRocks&quot;)

		# send the signal for a new identity
		torcontrol.signal(Signal.NEWNYM)

		# wait for the new identity to be initialized
		time.sleep(torcontrol.get_newnym_wait())

		print &quot;[!!!] Switched TOR identities.&quot;

	# push the onion back on to the list	
	session_onions.append(onion)
	random.shuffle(session_onions)

	# allow the main thread to resume executing
	identity_lock.set()	

	return


#
# Processes the JSON result from onionscan.
#
def process_results(onion,json_response):
	global onions
	global session_onions

	# create our output folder if necessary
	if not os.path.exists(&quot;onionscan_results&quot;):
		os.mkdir(&quot;onionscan_results&quot;)

	# write out the JSON results of the scan
	with open(&quot;%s/%s.json&quot; % (&quot;onionscan_results&quot;,onion), &quot;wb&quot;) as fd:
		fd.write(json_response)

	# look for additional .onion domains to add to our scan list
	scan_result = ur&quot;%s&quot; % json_response.decode(&quot;utf8&quot;)
	scan_result = json.loads(scan_result)
	
	if scan_result['linkedSites'] is not None:
		add_new_onions(scan_result['linkedSites'])		
		
	if scan_result['relatedOnionDomains'] is not None:
		add_new_onions(scan_result['relatedOnionDomains'])
		
	if scan_result['relatedOnionServices'] is not None:
		add_new_onions(scan_result['relatedOnionServices'])
		

	return

#
# Handle new onions.
#
def add_new_onions(new_onion_list):

	global onions
	global session_onions

	for linked_onion in new_onion_list:

		if linked_onion not in onions and linked_onion.endswith(&quot;.onion&quot;):

			print &quot;[++] Discovered new .onion =&amp;gt; %s&quot; % linked_onion

			onions.append(linked_onion)
			session_onions.append(linked_onion)
			random.shuffle(session_onions)
			store_onion(linked_onion)

	return

# get a list of onions to process
onions = get_onion_list()

# randomize the list a bit
random.shuffle(onions)
session_onions = list(onions)

count = 0

while count &amp;lt; len(onions):

	# if the event is cleared we will halt here
	# otherwise we continue executing
	identity_lock.wait()

	# grab a new onion to scan
	print &quot;[*] Running %d of %d.&quot; % (count,len(onions))
	onion  = session_onions.pop()
	
	# test to see if we have already retrieved results for this onion
	if os.path.exists(&quot;onionscan_results/%s.json&quot; % onion):

		print &quot;[!] Already retrieved %s. Skipping.&quot; % onion
		count += 1

		continue

	# run the onion scan	
	result = run_onionscan(onion)

	# process the results
	if result is not None:
		
		if len(result):
			process_results(onion,result)		

	count += 1&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Line 79: &lt;/strong&gt;we define the &lt;strong&gt;handle_timeout &lt;/strong&gt;function that takes the &lt;strong&gt;process &lt;/strong&gt;parameter (our Popen object) and the &lt;strong&gt;onion &lt;/strong&gt;parameter which is the current hidden service we are scanning.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 85: &lt;/strong&gt;here we are clearing the &lt;strong&gt;identity_lock &lt;/strong&gt;which will halt our main thread (you&amp;#8217;ll see in a bit). This will allow us to do the process killing, and grab a new identity without the main thread trying to process a new hidden service. We want to be able to cleanly deal with the &lt;em&gt;onionscan &lt;/em&gt;process that has timed out before continuing on to a new hidden service.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lines 88-92: &lt;/strong&gt;here we are using the &lt;strong&gt;kill() &lt;/strong&gt;function that our &lt;strong&gt;process &lt;/strong&gt;object has to kill off the &lt;em&gt;onionscan &lt;/em&gt;process that took to long to execute.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 95: &lt;/strong&gt;we now connect to our local Tor controller port and store the connection object in the &lt;strong&gt;torcontrol &lt;/strong&gt;variable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 98: &lt;/strong&gt;we authenticate to the Tor controller using our &lt;em&gt;PythonRocks &lt;/em&gt;password that you set at the beginning of this blog post. Remember if you decided to use a different password, make sure you put it in here.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 101: &lt;/strong&gt;we send the signal to the local Tor controller that we would like a new identity (IP address).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 104: &lt;/strong&gt;we pause execution until the new IP address has been acquired.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 109-110: &lt;/strong&gt;here we are re-adding the current hidden service back into our session list. This is because we didn&amp;#8217;t get a full scan done on the hidden service so we want to make sure we re-scan it at some point in the future. We then shuffle the list (110) so that we don&amp;#8217;t end up just grabbing this same hidden service again. If this hidden service is not working properly or is down, you would end up in an infinite loop of timeouts, kills, re-add to list, rescan. This is why we shuffle!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 113: &lt;/strong&gt;we set the &lt;strong&gt;identity_lock &lt;/strong&gt;object again so that the main thread is now notified to continue executing, which will load a fresh hidden service for scanning.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we need to implement the function that will handle processing the JSON results that OnionScan hands back to us. March on good Python soldier:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;from stem.control import Controller
from stem import Signal
from threading import Timer
from threading import Event

import codecs
import json
import os
import random
import subprocess
import sys
import time

onions         = []
session_onions = []

identity_lock  = Event()
identity_lock.set()

#
# Grab the list of onions from our master list file.
#
def get_onion_list():
	
	# open the master list
	if os.path.exists(&quot;onion_master_list.txt&quot;):
	
		with open(&quot;onion_master_list.txt&quot;,&quot;rb&quot;) as fd:

			stored_onions = fd.read().splitlines()	
	else:
		print &quot;[!] No onion master list. Download it!&quot;
		sys.exit(0)
	
	print &quot;[*] Total onions for scanning: %d&quot; % len(stored_onions)

	return stored_onions
#
# Stores an onion in the master list of onions.
#
def store_onion(onion):
	
	print &quot;[++] Storing %s in master list.&quot; % onion
	
	with codecs.open(&quot;onion_master_list.txt&quot;,&quot;ab&quot;,encoding=&quot;utf8&quot;) as fd:
		fd.write(&quot;%s\n&quot; % onion)

	return
	
#
# Runs onion scan as a child process.
#		
def run_onionscan(onion):
	
	print &quot;[*] Onionscanning %s&quot; % onion
	
	# fire up onionscan
	process = subprocess.Popen([&quot;onionscan&quot;,&quot;--jsonReport&quot;,&quot;--simpleReport=false&quot;,onion],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
	
	# start the timer and let it run 5 minutes
	process_timer = Timer(300,handle_timeout,args=[process,onion])
	process_timer.start()

	# wait for the onion scan results
	stdout = process.communicate()[0]

	# we have received valid results so we can kill the timer 
	if process_timer.is_alive():
		process_timer.cancel()
		return stdout

	print &quot;[!!!] Process timed out!&quot;	

	return None

#
# Handle a timeout from the onionscan process.
#
def handle_timeout(process,onion):

	global session_onions
	global identity_lock 

	# halt the main thread while we grab a new identity
	identity_lock.clear()

	# kill the onionscan process
	try:
		process.kill()
		print &quot;[!!!] Killed the onionscan process.&quot;
	except:
		pass

	# Now we switch TOR identities to make sure we have a good connection
	with Controller.from_port(port=9051) as torcontrol:

		# authenticate to our local TOR controller
		torcontrol.authenticate(&quot;PythonRocks&quot;)

		# send the signal for a new identity
		torcontrol.signal(Signal.NEWNYM)

		# wait for the new identity to be initialized
		time.sleep(torcontrol.get_newnym_wait())

		print &quot;[!!!] Switched TOR identities.&quot;

	# push the onion back on to the list	
	session_onions.append(onion)
	random.shuffle(session_onions)

	# allow the main thread to resume executing
	identity_lock.set()	

	return


#
# Processes the JSON result from onionscan.
#
def process_results(onion,json_response):
	global onions
	global session_onions

	# create our output folder if necessary
	if not os.path.exists(&quot;onionscan_results&quot;):
		os.mkdir(&quot;onionscan_results&quot;)

	# write out the JSON results of the scan
	with open(&quot;%s/%s.json&quot; % (&quot;onionscan_results&quot;,onion), &quot;wb&quot;) as fd:
		fd.write(json_response)

	# look for additional .onion domains to add to our scan list
	scan_result = ur&quot;%s&quot; % json_response.decode(&quot;utf8&quot;)
	scan_result = json.loads(scan_result)
	
	if scan_result['linkedSites'] is not None:
		add_new_onions(scan_result['linkedSites'])		
		
	if scan_result['relatedOnionDomains'] is not None:
		add_new_onions(scan_result['relatedOnionDomains'])
		
	if scan_result['relatedOnionServices'] is not None:
		add_new_onions(scan_result['relatedOnionServices'])
		

	return

#
# Handle new onions.
#
def add_new_onions(new_onion_list):

	global onions
	global session_onions

	for linked_onion in new_onion_list:

		if linked_onion not in onions and linked_onion.endswith(&quot;.onion&quot;):

			print &quot;[++] Discovered new .onion =&amp;gt; %s&quot; % linked_onion

			onions.append(linked_onion)
			session_onions.append(linked_onion)
			random.shuffle(session_onions)
			store_onion(linked_onion)

	return

# get a list of onions to process
onions = get_onion_list()

# randomize the list a bit
random.shuffle(onions)
session_onions = list(onions)

count = 0

while count &amp;lt; len(onions):

	# if the event is cleared we will halt here
	# otherwise we continue executing
	identity_lock.wait()

	# grab a new onion to scan
	print &quot;[*] Running %d of %d.&quot; % (count,len(onions))
	onion  = session_onions.pop()
	
	# test to see if we have already retrieved results for this onion
	if os.path.exists(&quot;onionscan_results/%s.json&quot; % onion):

		print &quot;[!] Already retrieved %s. Skipping.&quot; % onion
		count += 1

		continue

	# run the onion scan	
	result = run_onionscan(onion)

	# process the results
	if result is not None:
		
		if len(result):
			process_results(onion,result)		

	count += 1&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Line 121: &lt;/strong&gt;we define our &lt;strong&gt;process_results &lt;/strong&gt;function to take in the &lt;strong&gt;onion &lt;/strong&gt;parameter and the &lt;strong&gt;json_response&lt;/strong&gt; respectively.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lines 126-127: &lt;/strong&gt;if the &lt;em&gt;onionscan_results &lt;/em&gt;directory doesn&amp;#8217;t exist (126) we create it (127) because that&amp;#8217;s how we roll.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lines 130-131: &lt;/strong&gt;here we are writing out the JSON results to a file that is named by the hidden service that we just scanned. Pretty straightforward.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lines 134-135: &lt;/strong&gt;we do a bit of string conversion to get the JSON string into a format we can use (134) and then we decode the JSON (135) to turn it into a native Python dictionary.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lines 137-144: &lt;/strong&gt;there are three fields that we are interested in that could contain additional .onion domains that we may want to add to our list of scan targets. The &lt;strong&gt;linkedSites&lt;/strong&gt;, &lt;strong&gt;relatedOnionDomains&lt;/strong&gt; and &lt;strong&gt;relatedOnionServices &lt;/strong&gt;keys all will return lists. If they are set appropriately we hand the list off to our &lt;strong&gt;add_new_onions &lt;/strong&gt;function.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;#8217;s implement that function now.&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;from stem.control import Controller
from stem import Signal
from threading import Timer
from threading import Event

import codecs
import json
import os
import random
import subprocess
import sys
import time

onions         = []
session_onions = []

identity_lock  = Event()
identity_lock.set()

#
# Grab the list of onions from our master list file.
#
def get_onion_list():
	
	# open the master list
	if os.path.exists(&quot;onion_master_list.txt&quot;):
	
		with open(&quot;onion_master_list.txt&quot;,&quot;rb&quot;) as fd:

			stored_onions = fd.read().splitlines()	
	else:
		print &quot;[!] No onion master list. Download it!&quot;
		sys.exit(0)
	
	print &quot;[*] Total onions for scanning: %d&quot; % len(stored_onions)

	return stored_onions
#
# Stores an onion in the master list of onions.
#
def store_onion(onion):
	
	print &quot;[++] Storing %s in master list.&quot; % onion
	
	with codecs.open(&quot;onion_master_list.txt&quot;,&quot;ab&quot;,encoding=&quot;utf8&quot;) as fd:
		fd.write(&quot;%s\n&quot; % onion)

	return
	
#
# Runs onion scan as a child process.
#		
def run_onionscan(onion):
	
	print &quot;[*] Onionscanning %s&quot; % onion
	
	# fire up onionscan
	process = subprocess.Popen([&quot;onionscan&quot;,&quot;--jsonReport&quot;,&quot;--simpleReport=false&quot;,onion],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
	
	# start the timer and let it run 5 minutes
	process_timer = Timer(300,handle_timeout,args=[process,onion])
	process_timer.start()

	# wait for the onion scan results
	stdout = process.communicate()[0]

	# we have received valid results so we can kill the timer 
	if process_timer.is_alive():
		process_timer.cancel()
		return stdout

	print &quot;[!!!] Process timed out!&quot;	

	return None

#
# Handle a timeout from the onionscan process.
#
def handle_timeout(process,onion):

	global session_onions
	global identity_lock 

	# halt the main thread while we grab a new identity
	identity_lock.clear()

	# kill the onionscan process
	try:
		process.kill()
		print &quot;[!!!] Killed the onionscan process.&quot;
	except:
		pass

	# Now we switch TOR identities to make sure we have a good connection
	with Controller.from_port(port=9051) as torcontrol:

		# authenticate to our local TOR controller
		torcontrol.authenticate(&quot;PythonRocks&quot;)

		# send the signal for a new identity
		torcontrol.signal(Signal.NEWNYM)

		# wait for the new identity to be initialized
		time.sleep(torcontrol.get_newnym_wait())

		print &quot;[!!!] Switched TOR identities.&quot;

	# push the onion back on to the list	
	session_onions.append(onion)
	random.shuffle(session_onions)

	# allow the main thread to resume executing
	identity_lock.set()	

	return


#
# Processes the JSON result from onionscan.
#
def process_results(onion,json_response):
	global onions
	global session_onions

	# create our output folder if necessary
	if not os.path.exists(&quot;onionscan_results&quot;):
		os.mkdir(&quot;onionscan_results&quot;)

	# write out the JSON results of the scan
	with open(&quot;%s/%s.json&quot; % (&quot;onionscan_results&quot;,onion), &quot;wb&quot;) as fd:
		fd.write(json_response)

	# look for additional .onion domains to add to our scan list
	scan_result = ur&quot;%s&quot; % json_response.decode(&quot;utf8&quot;)
	scan_result = json.loads(scan_result)
	
	if scan_result['linkedSites'] is not None:
		add_new_onions(scan_result['linkedSites'])		
		
	if scan_result['relatedOnionDomains'] is not None:
		add_new_onions(scan_result['relatedOnionDomains'])
		
	if scan_result['relatedOnionServices'] is not None:
		add_new_onions(scan_result['relatedOnionServices'])
		

	return

#
# Handle new onions.
#
def add_new_onions(new_onion_list):

	global onions
	global session_onions

	for linked_onion in new_onion_list:

		if linked_onion not in onions and linked_onion.endswith(&quot;.onion&quot;):

			print &quot;[++] Discovered new .onion =&amp;gt; %s&quot; % linked_onion

			onions.append(linked_onion)
			session_onions.append(linked_onion)
			random.shuffle(session_onions)
			store_onion(linked_onion)

	return

# get a list of onions to process
onions = get_onion_list()

# randomize the list a bit
random.shuffle(onions)
session_onions = list(onions)

count = 0

while count &amp;lt; len(onions):

	# if the event is cleared we will halt here
	# otherwise we continue executing
	identity_lock.wait()

	# grab a new onion to scan
	print &quot;[*] Running %d of %d.&quot; % (count,len(onions))
	onion  = session_onions.pop()
	
	# test to see if we have already retrieved results for this onion
	if os.path.exists(&quot;onionscan_results/%s.json&quot; % onion):

		print &quot;[!] Already retrieved %s. Skipping.&quot; % onion
		count += 1

		continue

	# run the onion scan	
	result = run_onionscan(onion)

	# process the results
	if result is not None:
		
		if len(result):
			process_results(onion,result)		

	count += 1&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Line &lt;/strong&gt;&lt;strong&gt;152: &lt;/strong&gt;we define our &lt;strong&gt;add_new_onions &lt;/strong&gt;function to take in the list of .onion domains we have just discovered.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lines 157-159: &lt;/strong&gt;we walk through the list of onions (157) and then check to make sure that we don&amp;#8217;t already have this onion in our master list and that it is a .onion domain (159). There are cases where OnionScan will discover sites that are not in the dark web, and we&amp;#8217;ll get to those in our visualization post.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lines 163-166: &lt;/strong&gt;we add the new onion to our master list (163), we add it to our current session list of onions to scan (164), we shuffle the session list again (165) and then we store the onion in our &lt;em&gt;onion_master_list.txt &lt;/em&gt;file (166).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now let&amp;#8217;s start putting the finishing touches on this script.&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;from stem.control import Controller
from stem import Signal
from threading import Timer
from threading import Event

import codecs
import json
import os
import random
import subprocess
import sys
import time

onions         = []
session_onions = []

identity_lock  = Event()
identity_lock.set()

#
# Grab the list of onions from our master list file.
#
def get_onion_list():
	
	# open the master list
	if os.path.exists(&quot;onion_master_list.txt&quot;):
	
		with open(&quot;onion_master_list.txt&quot;,&quot;rb&quot;) as fd:

			stored_onions = fd.read().splitlines()	
	else:
		print &quot;[!] No onion master list. Download it!&quot;
		sys.exit(0)
	
	print &quot;[*] Total onions for scanning: %d&quot; % len(stored_onions)

	return stored_onions
#
# Stores an onion in the master list of onions.
#
def store_onion(onion):
	
	print &quot;[++] Storing %s in master list.&quot; % onion
	
	with codecs.open(&quot;onion_master_list.txt&quot;,&quot;ab&quot;,encoding=&quot;utf8&quot;) as fd:
		fd.write(&quot;%s\n&quot; % onion)

	return
	
#
# Runs onion scan as a child process.
#		
def run_onionscan(onion):
	
	print &quot;[*] Onionscanning %s&quot; % onion
	
	# fire up onionscan
	process = subprocess.Popen([&quot;onionscan&quot;,&quot;--jsonReport&quot;,&quot;--simpleReport=false&quot;,onion],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
	
	# start the timer and let it run 5 minutes
	process_timer = Timer(300,handle_timeout,args=[process,onion])
	process_timer.start()

	# wait for the onion scan results
	stdout = process.communicate()[0]

	# we have received valid results so we can kill the timer 
	if process_timer.is_alive():
		process_timer.cancel()
		return stdout

	print &quot;[!!!] Process timed out!&quot;	

	return None

#
# Handle a timeout from the onionscan process.
#
def handle_timeout(process,onion):

	global session_onions
	global identity_lock 

	# halt the main thread while we grab a new identity
	identity_lock.clear()

	# kill the onionscan process
	try:
		process.kill()
		print &quot;[!!!] Killed the onionscan process.&quot;
	except:
		pass

	# Now we switch TOR identities to make sure we have a good connection
	with Controller.from_port(port=9051) as torcontrol:

		# authenticate to our local TOR controller
		torcontrol.authenticate(&quot;PythonRocks&quot;)

		# send the signal for a new identity
		torcontrol.signal(Signal.NEWNYM)

		# wait for the new identity to be initialized
		time.sleep(torcontrol.get_newnym_wait())

		print &quot;[!!!] Switched TOR identities.&quot;

	# push the onion back on to the list	
	session_onions.append(onion)
	random.shuffle(session_onions)

	# allow the main thread to resume executing
	identity_lock.set()	

	return


#
# Processes the JSON result from onionscan.
#
def process_results(onion,json_response):
	global onions
	global session_onions

	# create our output folder if necessary
	if not os.path.exists(&quot;onionscan_results&quot;):
		os.mkdir(&quot;onionscan_results&quot;)

	# write out the JSON results of the scan
	with open(&quot;%s/%s.json&quot; % (&quot;onionscan_results&quot;,onion), &quot;wb&quot;) as fd:
		fd.write(json_response)

	# look for additional .onion domains to add to our scan list
	scan_result = ur&quot;%s&quot; % json_response.decode(&quot;utf8&quot;)
	scan_result = json.loads(scan_result)
	
	if scan_result['linkedSites'] is not None:
		add_new_onions(scan_result['linkedSites'])		
		
	if scan_result['relatedOnionDomains'] is not None:
		add_new_onions(scan_result['relatedOnionDomains'])
		
	if scan_result['relatedOnionServices'] is not None:
		add_new_onions(scan_result['relatedOnionServices'])
		

	return

#
# Handle new onions.
#
def add_new_onions(new_onion_list):

	global onions
	global session_onions

	for linked_onion in new_onion_list:

		if linked_onion not in onions and linked_onion.endswith(&quot;.onion&quot;):

			print &quot;[++] Discovered new .onion =&amp;gt; %s&quot; % linked_onion

			onions.append(linked_onion)
			session_onions.append(linked_onion)
			random.shuffle(session_onions)
			store_onion(linked_onion)

	return

# get a list of onions to process
onions = get_onion_list()

# randomize the list a bit
random.shuffle(onions)
session_onions = list(onions)

count = 0

while count &amp;lt; len(onions):

	# if the event is cleared we will halt here
	# otherwise we continue executing
	identity_lock.wait()

	# grab a new onion to scan
	print &quot;[*] Running %d of %d.&quot; % (count,len(onions))
	onion  = session_onions.pop()
	
	# test to see if we have already retrieved results for this onion
	if os.path.exists(&quot;onionscan_results/%s.json&quot; % onion):

		print &quot;[!] Already retrieved %s. Skipping.&quot; % onion
		count += 1

		continue

	# run the onion scan	
	result = run_onionscan(onion)

	# process the results
	if result is not None:
		
		if len(result):
			process_results(onion,result)		

	count += 1&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Line 171: &lt;/strong&gt;we call our &lt;strong&gt;get_onion_list &lt;/strong&gt;function that will load up all of our stored hidden service addresses.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lines 174-175: &lt;/strong&gt;we shuffle the onions up (174) and then create a copy of the list and store it in our &lt;strong&gt;session_onions &lt;/strong&gt;variable (175).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 177: &lt;/strong&gt;we initialize a counter variable that we will use to determine when we are finished looping over all of our hidden services.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now it&amp;#8217;s time to put the main loop in place that will be responsible for kickstarting OnionScan for each hidden service that we have stored.&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;from stem.control import Controller
from stem import Signal
from threading import Timer
from threading import Event

import codecs
import json
import os
import random
import subprocess
import sys
import time

onions         = []
session_onions = []

identity_lock  = Event()
identity_lock.set()

#
# Grab the list of onions from our master list file.
#
def get_onion_list():
	
	# open the master list
	if os.path.exists(&quot;onion_master_list.txt&quot;):
	
		with open(&quot;onion_master_list.txt&quot;,&quot;rb&quot;) as fd:

			stored_onions = fd.read().splitlines()	
	else:
		print &quot;[!] No onion master list. Download it!&quot;
		sys.exit(0)
	
	print &quot;[*] Total onions for scanning: %d&quot; % len(stored_onions)

	return stored_onions
#
# Stores an onion in the master list of onions.
#
def store_onion(onion):
	
	print &quot;[++] Storing %s in master list.&quot; % onion
	
	with codecs.open(&quot;onion_master_list.txt&quot;,&quot;ab&quot;,encoding=&quot;utf8&quot;) as fd:
		fd.write(&quot;%s\n&quot; % onion)

	return
	
#
# Runs onion scan as a child process.
#		
def run_onionscan(onion):
	
	print &quot;[*] Onionscanning %s&quot; % onion
	
	# fire up onionscan
	process = subprocess.Popen([&quot;onionscan&quot;,&quot;--jsonReport&quot;,&quot;--simpleReport=false&quot;,onion],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
	
	# start the timer and let it run 5 minutes
	process_timer = Timer(300,handle_timeout,args=[process,onion])
	process_timer.start()

	# wait for the onion scan results
	stdout = process.communicate()[0]

	# we have received valid results so we can kill the timer 
	if process_timer.is_alive():
		process_timer.cancel()
		return stdout

	print &quot;[!!!] Process timed out!&quot;	

	return None

#
# Handle a timeout from the onionscan process.
#
def handle_timeout(process,onion):

	global session_onions
	global identity_lock 

	# halt the main thread while we grab a new identity
	identity_lock.clear()

	# kill the onionscan process
	try:
		process.kill()
		print &quot;[!!!] Killed the onionscan process.&quot;
	except:
		pass

	# Now we switch TOR identities to make sure we have a good connection
	with Controller.from_port(port=9051) as torcontrol:

		# authenticate to our local TOR controller
		torcontrol.authenticate(&quot;PythonRocks&quot;)

		# send the signal for a new identity
		torcontrol.signal(Signal.NEWNYM)

		# wait for the new identity to be initialized
		time.sleep(torcontrol.get_newnym_wait())

		print &quot;[!!!] Switched TOR identities.&quot;

	# push the onion back on to the list	
	session_onions.append(onion)
	random.shuffle(session_onions)

	# allow the main thread to resume executing
	identity_lock.set()	

	return


#
# Processes the JSON result from onionscan.
#
def process_results(onion,json_response):
	global onions
	global session_onions

	# create our output folder if necessary
	if not os.path.exists(&quot;onionscan_results&quot;):
		os.mkdir(&quot;onionscan_results&quot;)

	# write out the JSON results of the scan
	with open(&quot;%s/%s.json&quot; % (&quot;onionscan_results&quot;,onion), &quot;wb&quot;) as fd:
		fd.write(json_response)

	# look for additional .onion domains to add to our scan list
	scan_result = ur&quot;%s&quot; % json_response.decode(&quot;utf8&quot;)
	scan_result = json.loads(scan_result)
	
	if scan_result['linkedSites'] is not None:
		add_new_onions(scan_result['linkedSites'])		
		
	if scan_result['relatedOnionDomains'] is not None:
		add_new_onions(scan_result['relatedOnionDomains'])
		
	if scan_result['relatedOnionServices'] is not None:
		add_new_onions(scan_result['relatedOnionServices'])
		

	return

#
# Handle new onions.
#
def add_new_onions(new_onion_list):

	global onions
	global session_onions

	for linked_onion in new_onion_list:

		if linked_onion not in onions and linked_onion.endswith(&quot;.onion&quot;):

			print &quot;[++] Discovered new .onion =&amp;gt; %s&quot; % linked_onion

			onions.append(linked_onion)
			session_onions.append(linked_onion)
			random.shuffle(session_onions)
			store_onion(linked_onion)

	return

# get a list of onions to process
onions = get_onion_list()

# randomize the list a bit
random.shuffle(onions)
session_onions = list(onions)

count = 0

while count &amp;lt; len(onions):

	# if the event is cleared we will halt here
	# otherwise we continue executing
	identity_lock.wait()

	# grab a new onion to scan
	print &quot;[*] Running %d of %d.&quot; % (count,len(onions))
	onion  = session_onions.pop()
	
	# test to see if we have already retrieved results for this onion
	if os.path.exists(&quot;onionscan_results/%s.json&quot; % onion):

		print &quot;[!] Already retrieved %s. Skipping.&quot; % onion
		count += 1

		continue

	# run the onion scan	
	result = run_onionscan(onion)

	# process the results
	if result is not None:
		
		if len(result):
			process_results(onion,result)		

	                count += 1&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Line 179: &lt;/strong&gt;we create our while loop that will stop executing once we have worked through all of our hidden services.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 183: &lt;/strong&gt;we are waiting for our &lt;strong&gt;Event &lt;/strong&gt;object to be set before continuing execution. You will remember that this will only halt here if our &lt;strong&gt;handle_timeout &lt;/strong&gt;function is dealing with grabbing a new Tor identity. Once the &lt;strong&gt;identity_lock &lt;/strong&gt;is cleared we will move past this line.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 187: &lt;/strong&gt;we remove a hidden service from our list and store it in the &lt;strong&gt;onion &lt;/strong&gt;variable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lines 190-195: &lt;/strong&gt;we are testing to see if we have already scanned the hidden service by checking to see if the JSON file exists (190) and if so we increment our &lt;strong&gt;count &lt;/strong&gt;variable (193) and then we go back to the top of the while loop using the &lt;strong&gt;continue &lt;/strong&gt;keyword (195).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 198: &lt;/strong&gt;since we have not yet scanned the current hidden service, we kick off the scan process and return the result in the aptly named &lt;strong&gt;result &lt;/strong&gt;variable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lines 201-206: &lt;/strong&gt;if we get a good result back we test the length of the JSON string (203) and if it is greater than zero we pass the JSON string and hidden service off to our &lt;strong&gt;process_results &lt;/strong&gt;function for storage (204) and then increment our &lt;strong&gt;count &lt;/strong&gt;variable before returning to the top of the while loop.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whew! That is a lot of code, but hopefully you have learned a few new Python coding tricks along the way, and it might give you ideas on how you can wrap other scanning software in a similar way as we did with OnionScan. Now for the moment of truth&amp;#8230;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;Let it Rip!&lt;/h2&gt;
&lt;p&gt;Now you are ready to start scanning! Simple run:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;python onionrunner.py&lt;/pre&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;And you should start seeing output like the following:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;# python onionrunner.py&lt;br /&gt;
&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;[*] Total onions for scanning: 7182&lt;br /&gt;
&lt;/span&gt;[*] Running 0 of 7182.&lt;br /&gt;
&lt;span class=&quot;s1&quot;&gt;[*] Onionscanning nfokjthabqzfndmj.onion&lt;br /&gt;
&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;[*] Running 1 of 7182.&lt;br /&gt;
&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;[*] Onionscanning gmts3xxfrbfxdm3a.onion&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&amp;#8230;&lt;/p&gt;
&lt;hr /&gt;
&lt;p class=&quot;p1&quot;&gt;If you check the &lt;strong&gt;onionscan_results &lt;/strong&gt;directory you should see a JSON files that are named by the hidden service that was scanned. Let this puppy run as long as you can tolerate, in the second post we are going to process these JSON files and begin to create some visualizations. For bonus points you can also push those JSON files into Elasticsearch (or modify onionrunner.py to do so on the fly) and analyze the results using Kibana!&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;If you don&amp;#8217;t want to wait to get all of the data yourself, you can download the scan results for 8,167 onions from &lt;a href=&quot;https://github.com/automatingosint/osint_public/tree/master/onionrunner&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Thu, 28 Jul 2016 13:39:16 +0000</pubDate>
</item>
<item>
	<title>Mike Driscoll: Python 201: A Tutorial on Threads</title>
	<guid>http://www.blog.pythonlibrary.org/2016/07/28/python-201-a-tutorial-on-threads/</guid>
	<link>http://www.blog.pythonlibrary.org/2016/07/28/python-201-a-tutorial-on-threads/</link>
	<description>&lt;div class=&quot;pf-content&quot;&gt;&lt;p&gt;The &lt;strong&gt;threading&lt;/strong&gt; module was first introduced in Python 1.5.2 as an enhancement of the low-level &lt;strong&gt;thread&lt;/strong&gt; module. The threading module makes working with threads much easier and allows the program to run multiple operations at once.&lt;/p&gt;
&lt;p&gt;Note that the threads in Python work best with I/O operations, such as downloading resources from the Internet or reading files and directories on your computer. If you need to do something that will be CPU intensive, then you will want to look at Python&amp;#8217;s &lt;strong&gt;multiprocessing&lt;/strong&gt; module instead. The reason for this is that Python has the Global Interpreter Lock (GIL) that basically makes all threads run inside of one master thread. Because of this, when you go to run multiple CPU intensive operations with threads, you may find that it actually runs slower. So we will be focusing on what threads do best: I/O operations!&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Intro to Threads&lt;/h3&gt;
&lt;p&gt;
&lt;p&gt;A thread let&amp;#8217;s you run a piece of long running code as if it were a separate program. It&amp;#8217;s kind of like calling &lt;strong&gt;subprocess&lt;/strong&gt; except that you are calling a function or class instead of a separate program. I always find it helpful to look at a concrete example. Let&amp;#8217;s take a look at something that&amp;#8217;s really simple:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;threading&lt;/span&gt;
&amp;nbsp;
&amp;nbsp;
&lt;span&gt;def&lt;/span&gt; doubler&lt;span&gt;&amp;#40;&lt;/span&gt;number&lt;span&gt;&amp;#41;&lt;/span&gt;:
    &lt;span&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;
    A function that can be used by a thread
    &amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;threading&lt;/span&gt;.&lt;span&gt;currentThread&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;.&lt;span&gt;getName&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; + &lt;span&gt;'&lt;span&gt;\n&lt;/span&gt;'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;number &lt;span&gt;*&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&amp;nbsp;
&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'__main__'&lt;/span&gt;:
    &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; &lt;span&gt;range&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
        my_thread = &lt;span&gt;threading&lt;/span&gt;.&lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;target=doubler, args=&lt;span&gt;&amp;#40;&lt;/span&gt;i,&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        my_thread.&lt;span&gt;start&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span id=&quot;more-5754&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Here we import the threading module and create a regular function called &lt;strong&gt;doubler&lt;/strong&gt;. Our function takes a value and doubles it. It also prints out the name of the thread that is calling the function and prints a blank line at the end. Then in the last block of code, we create five threads and start each one in turn. You will note that when we instantiate a thread, we set its &lt;strong&gt;target&lt;/strong&gt; to our doubler function and we also pass an argument to the function. The reason the &lt;strong&gt;args&lt;/strong&gt; parameter looks a bit odd is that we need to pass a sequence to the doubler function and it only takes one argument, so we need to put a comma on the end to actually create a sequence of one.&lt;/p&gt;
&lt;p&gt;Note that if you&amp;#8217;d like to wait for a thread to terminate, you would need to call its &lt;strong&gt;join()&lt;/strong&gt; method.&lt;/p&gt;
&lt;p&gt;When you run this code, you should get the following output:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;Thread&lt;span&gt;-1&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;0&lt;/span&gt;
&amp;nbsp;
Thread&lt;span&gt;-2&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;2&lt;/span&gt;
&amp;nbsp;
Thread&lt;span&gt;-3&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;4&lt;/span&gt;
&amp;nbsp;
Thread&lt;span&gt;-4&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;6&lt;/span&gt;
&amp;nbsp;
Thread&lt;span&gt;-5&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;8&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Of course, you normally wouldn&amp;#8217;t want to print your output to stdout. This can end up being a really jumbled mess when you do. Instead, you should use Python&amp;#8217;s &lt;strong&gt;logging&lt;/strong&gt; module. It&amp;#8217;s thread-safe and does an excellent job. Let&amp;#8217;s modify the example above to use the logging module and name our threads while we&amp;#8217;ll at it:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;logging&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt; &lt;span&gt;threading&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;def&lt;/span&gt; get_logger&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
    logger = &lt;span&gt;logging&lt;/span&gt;.&lt;span&gt;getLogger&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;threading_example&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    logger.&lt;span&gt;setLevel&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;logging&lt;/span&gt;.&lt;span&gt;DEBUG&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    fh = &lt;span&gt;logging&lt;/span&gt;.&lt;span&gt;FileHandler&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;threading.log&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    fmt = &lt;span&gt;'%(asctime)s - %(threadName)s - %(levelname)s - %(message)s'&lt;/span&gt;
    &lt;span&gt;formatter&lt;/span&gt; = &lt;span&gt;logging&lt;/span&gt;.&lt;span&gt;Formatter&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;fmt&lt;span&gt;&amp;#41;&lt;/span&gt;
    fh.&lt;span&gt;setFormatter&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;formatter&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    logger.&lt;span&gt;addHandler&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;fh&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; logger
&amp;nbsp;
&amp;nbsp;
&lt;span&gt;def&lt;/span&gt; doubler&lt;span&gt;&amp;#40;&lt;/span&gt;number, logger&lt;span&gt;&amp;#41;&lt;/span&gt;:
    &lt;span&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;
    A function that can be used by a thread
    &amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    logger.&lt;span&gt;debug&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'doubler function executing'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    result = number &lt;span&gt;*&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;
    logger.&lt;span&gt;debug&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'doubler function ended with: {}'&lt;/span&gt;.&lt;span&gt;format&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;
        result&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&amp;nbsp;
&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'__main__'&lt;/span&gt;:
    logger = get_logger&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    thread_names = &lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;'Mike'&lt;/span&gt;, &lt;span&gt;'George'&lt;/span&gt;, &lt;span&gt;'Wanda'&lt;/span&gt;, &lt;span&gt;'Dingbat'&lt;/span&gt;, &lt;span&gt;'Nina'&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; &lt;span&gt;range&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
        my_thread = &lt;span&gt;threading&lt;/span&gt;.&lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;
            target=doubler, name=thread_names&lt;span&gt;&amp;#91;&lt;/span&gt;i&lt;span&gt;&amp;#93;&lt;/span&gt;, args=&lt;span&gt;&amp;#40;&lt;/span&gt;i,logger&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        my_thread.&lt;span&gt;start&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;The big change in this code is the addition of the &lt;strong&gt;get_logger&lt;/strong&gt; function. This piece of code will create a logger that&amp;#8217;s set to the debug level. It will save the log to the current working directory (i.e. where the script is run from) and then we set up the format for each line logged. The format includes the time stamp, the thread name, the logging level and the message logged.&lt;/p&gt;
&lt;p&gt;In the doubler function, we change our &lt;strong&gt;print&lt;/strong&gt; statements to logging statements. You will note that we are passing the logger into the doubler function when we create the thread. The reason we do this is that if you instantiated the logging object in each thread, you would end up with multiple logging singletons and your log would have a lot of duplicate lines in it.&lt;/p&gt;
&lt;p&gt;Lastly, we name our threads by creating a list of names and then setting each thread to a specific name using the &lt;strong&gt;name&lt;/strong&gt; parameter. When you run this code, you should get a log file with the following contents:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;2016&lt;/span&gt;&lt;span&gt;-07&lt;/span&gt;&lt;span&gt;-24&lt;/span&gt; &lt;span&gt;20&lt;/span&gt;:&lt;span&gt;39&lt;/span&gt;:&lt;span&gt;50&lt;/span&gt;,&lt;span&gt;055&lt;/span&gt; - Mike - DEBUG - doubler function executing
&lt;span&gt;2016&lt;/span&gt;&lt;span&gt;-07&lt;/span&gt;&lt;span&gt;-24&lt;/span&gt; &lt;span&gt;20&lt;/span&gt;:&lt;span&gt;39&lt;/span&gt;:&lt;span&gt;50&lt;/span&gt;,&lt;span&gt;055&lt;/span&gt; - Mike - DEBUG - doubler function ended with: &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;2016&lt;/span&gt;&lt;span&gt;-07&lt;/span&gt;&lt;span&gt;-24&lt;/span&gt; &lt;span&gt;20&lt;/span&gt;:&lt;span&gt;39&lt;/span&gt;:&lt;span&gt;50&lt;/span&gt;,&lt;span&gt;055&lt;/span&gt; - George - DEBUG - doubler function executing
&lt;span&gt;2016&lt;/span&gt;&lt;span&gt;-07&lt;/span&gt;&lt;span&gt;-24&lt;/span&gt; &lt;span&gt;20&lt;/span&gt;:&lt;span&gt;39&lt;/span&gt;:&lt;span&gt;50&lt;/span&gt;,&lt;span&gt;056&lt;/span&gt; - George - DEBUG - doubler function ended with: &lt;span&gt;2&lt;/span&gt;
&lt;span&gt;2016&lt;/span&gt;&lt;span&gt;-07&lt;/span&gt;&lt;span&gt;-24&lt;/span&gt; &lt;span&gt;20&lt;/span&gt;:&lt;span&gt;39&lt;/span&gt;:&lt;span&gt;50&lt;/span&gt;,&lt;span&gt;056&lt;/span&gt; - Wanda - DEBUG - doubler function executing
&lt;span&gt;2016&lt;/span&gt;&lt;span&gt;-07&lt;/span&gt;&lt;span&gt;-24&lt;/span&gt; &lt;span&gt;20&lt;/span&gt;:&lt;span&gt;39&lt;/span&gt;:&lt;span&gt;50&lt;/span&gt;,&lt;span&gt;056&lt;/span&gt; - Wanda - DEBUG - doubler function ended with: &lt;span&gt;4&lt;/span&gt;
&lt;span&gt;2016&lt;/span&gt;&lt;span&gt;-07&lt;/span&gt;&lt;span&gt;-24&lt;/span&gt; &lt;span&gt;20&lt;/span&gt;:&lt;span&gt;39&lt;/span&gt;:&lt;span&gt;50&lt;/span&gt;,&lt;span&gt;056&lt;/span&gt; - Dingbat - DEBUG - doubler function executing
&lt;span&gt;2016&lt;/span&gt;&lt;span&gt;-07&lt;/span&gt;&lt;span&gt;-24&lt;/span&gt; &lt;span&gt;20&lt;/span&gt;:&lt;span&gt;39&lt;/span&gt;:&lt;span&gt;50&lt;/span&gt;,&lt;span&gt;057&lt;/span&gt; - Dingbat - DEBUG - doubler function ended with: &lt;span&gt;6&lt;/span&gt;
&lt;span&gt;2016&lt;/span&gt;&lt;span&gt;-07&lt;/span&gt;&lt;span&gt;-24&lt;/span&gt; &lt;span&gt;20&lt;/span&gt;:&lt;span&gt;39&lt;/span&gt;:&lt;span&gt;50&lt;/span&gt;,&lt;span&gt;057&lt;/span&gt; - Nina - DEBUG - doubler function executing
&lt;span&gt;2016&lt;/span&gt;&lt;span&gt;-07&lt;/span&gt;&lt;span&gt;-24&lt;/span&gt; &lt;span&gt;20&lt;/span&gt;:&lt;span&gt;39&lt;/span&gt;:&lt;span&gt;50&lt;/span&gt;,&lt;span&gt;057&lt;/span&gt; - Nina - DEBUG - doubler function ended with: &lt;span&gt;8&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;That output is pretty self-explanatory, so let&amp;#8217;s move on. I want to cover one more topic in this section. Namely, subclassing &lt;strong&gt;threading.Thread&lt;/strong&gt;. Let&amp;#8217;s take this last example and instead of calling Thread directly, we&amp;#8217;ll create our own custom subclass. Here is the updated code:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;logging&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt; &lt;span&gt;threading&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;class&lt;/span&gt; MyThread&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;threading&lt;/span&gt;.&lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
&amp;nbsp;
    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, number, logger&lt;span&gt;&amp;#41;&lt;/span&gt;:
        &lt;span&gt;threading&lt;/span&gt;.&lt;span&gt;Thread&lt;/span&gt;.&lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;number&lt;/span&gt; = number
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;logger&lt;/span&gt; = logger
&amp;nbsp;
    &lt;span&gt;def&lt;/span&gt; run&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
        &lt;span&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;
        Run the thread
        &amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        logger.&lt;span&gt;debug&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'Calling doubler'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        doubler&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;number&lt;/span&gt;, &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;logger&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&amp;nbsp;
&lt;span&gt;def&lt;/span&gt; get_logger&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
    logger = &lt;span&gt;logging&lt;/span&gt;.&lt;span&gt;getLogger&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;threading_example&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    logger.&lt;span&gt;setLevel&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;logging&lt;/span&gt;.&lt;span&gt;DEBUG&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    fh = &lt;span&gt;logging&lt;/span&gt;.&lt;span&gt;FileHandler&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;threading_class.log&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    fmt = &lt;span&gt;'%(asctime)s - %(threadName)s - %(levelname)s - %(message)s'&lt;/span&gt;
    &lt;span&gt;formatter&lt;/span&gt; = &lt;span&gt;logging&lt;/span&gt;.&lt;span&gt;Formatter&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;fmt&lt;span&gt;&amp;#41;&lt;/span&gt;
    fh.&lt;span&gt;setFormatter&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;formatter&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    logger.&lt;span&gt;addHandler&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;fh&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; logger
&amp;nbsp;
&amp;nbsp;
&lt;span&gt;def&lt;/span&gt; doubler&lt;span&gt;&amp;#40;&lt;/span&gt;number, logger&lt;span&gt;&amp;#41;&lt;/span&gt;:
    &lt;span&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;
    A function that can be used by a thread
    &amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    logger.&lt;span&gt;debug&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'doubler function executing'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    result = number &lt;span&gt;*&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;
    logger.&lt;span&gt;debug&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'doubler function ended with: {}'&lt;/span&gt;.&lt;span&gt;format&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;
        result&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&amp;nbsp;
&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'__main__'&lt;/span&gt;:
    logger = get_logger&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    thread_names = &lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;'Mike'&lt;/span&gt;, &lt;span&gt;'George'&lt;/span&gt;, &lt;span&gt;'Wanda'&lt;/span&gt;, &lt;span&gt;'Dingbat'&lt;/span&gt;, &lt;span&gt;'Nina'&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; &lt;span&gt;range&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
        &lt;span&gt;thread&lt;/span&gt; = MyThread&lt;span&gt;&amp;#40;&lt;/span&gt;i, logger&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;thread&lt;/span&gt;.&lt;span&gt;setName&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;thread_names&lt;span&gt;&amp;#91;&lt;/span&gt;i&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;thread&lt;/span&gt;.&lt;span&gt;start&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;In this example, we just subclassed &lt;strong&gt;threading.Thread&lt;/strong&gt;. We pass in the number that we want to double and the logging object as before. But this time, we set the name of the thread differently by calling &lt;strong&gt;setName&lt;/strong&gt; on the thread object. We still need to call &lt;strong&gt;start&lt;/strong&gt; on each thread, but you will notice that we didn&amp;#8217;t need to define that in our subclass. When you call &lt;strong&gt;start&lt;/strong&gt;, it will run your thread by calling the &lt;strong&gt;run&lt;/strong&gt; method. In our class, we call the doubler function to do our processing. The output is pretty much the same except that I added an extra line of output. Go ahead and run it to see what you get.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Locks and Synchronization&lt;/h3&gt;
&lt;p&gt;
&lt;p&gt;When you have more than one thread, then you may find yourself needing to consider how to avoid conflicts. What I mean by this is that you may have a use case where more than one thread will need to access the same resource at the same time. If you don&amp;#8217;t think about these issues and plan accordingly, then you will end up with some issues that always happen at the worst of times and usually in production. &lt;/p&gt;
&lt;p&gt;The solution is to use locks. A lock is provided by Python&amp;#8217;s threading module and can be held by either a single thread or no thread at all. Should a thread try to acquire a lock on a resource that is already locked, that thread will basically pause until the lock is released. Let&amp;#8217;s look at a fairly typical example of some code that doesn&amp;#8217;t have any locking functionality but that should have it added:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;threading&lt;/span&gt;
&amp;nbsp;
total = &lt;span&gt;0&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;def&lt;/span&gt; update_total&lt;span&gt;&amp;#40;&lt;/span&gt;amount&lt;span&gt;&amp;#41;&lt;/span&gt;:
    &lt;span&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;
    Updates the total by the given amount
    &amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span&gt;global&lt;/span&gt; total
    total += amount
    &lt;span&gt;print&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;total&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'__main__'&lt;/span&gt;:
    &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; &lt;span&gt;range&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
        my_thread = &lt;span&gt;threading&lt;/span&gt;.&lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;
            target=update_total, args=&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        my_thread.&lt;span&gt;start&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;What would make this an even more interesting example would be to add a &lt;strong&gt;time.sleep&lt;/strong&gt; call that is of varying length. Regardless, the issue here is that one thread might call &lt;strong&gt;update_total&lt;/strong&gt; and before it&amp;#8217;s done updating it, another thread might call it and attempt to update it too. Depending on the order of operations, the value might only get added to once. &lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s add a lock to the function. There are two ways to do this. The first way would be to use a &lt;strong&gt;try/finally&lt;/strong&gt; as we want to ensure that the lock is always released. Here&amp;#8217;s an example:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;threading&lt;/span&gt;
&amp;nbsp;
total = &lt;span&gt;0&lt;/span&gt;
lock = &lt;span&gt;threading&lt;/span&gt;.&lt;span&gt;Lock&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;def&lt;/span&gt; update_total&lt;span&gt;&amp;#40;&lt;/span&gt;amount&lt;span&gt;&amp;#41;&lt;/span&gt;:
    &lt;span&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;
    Updates the total by the given amount
    &amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span&gt;global&lt;/span&gt; total
    lock.&lt;span&gt;acquire&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;try&lt;/span&gt;:
        total += amount
    &lt;span&gt;finally&lt;/span&gt;:
        lock.&lt;span&gt;release&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;total&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'__main__'&lt;/span&gt;:
    &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; &lt;span&gt;range&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
        my_thread = &lt;span&gt;threading&lt;/span&gt;.&lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;
            target=update_total, args=&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        my_thread.&lt;span&gt;start&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Here we just acquire the lock before we do anything else. Then we attempt to update the total and finally, we release the lock and print the current total. We can actually eliminate a lot of this boilerplate using Python&amp;#8217;s &lt;strong&gt;with&lt;/strong&gt; statement:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;threading&lt;/span&gt;
&amp;nbsp;
total = &lt;span&gt;0&lt;/span&gt;
lock = &lt;span&gt;threading&lt;/span&gt;.&lt;span&gt;Lock&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;def&lt;/span&gt; update_total&lt;span&gt;&amp;#40;&lt;/span&gt;amount&lt;span&gt;&amp;#41;&lt;/span&gt;:
    &lt;span&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;
    Updates the total by the given amount
    &amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span&gt;global&lt;/span&gt; total
    with lock:
        total += amount
    &lt;span&gt;print&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;total&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'__main__'&lt;/span&gt;:
    &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; &lt;span&gt;range&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
        my_thread = &lt;span&gt;threading&lt;/span&gt;.&lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;
            target=update_total, args=&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        my_thread.&lt;span&gt;start&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, we no longer need the &lt;strong&gt;try/finally&lt;/strong&gt; as the context manager that is provided by the &lt;strong&gt;with&lt;/strong&gt; statement does all of that for us. &lt;/p&gt;
&lt;p&gt;Of course you will also find yourself writing code where you need multiple threads accessing multiple functions. When you first start writing concurrent code, you might do something like this:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;threading&lt;/span&gt;
&amp;nbsp;
total = &lt;span&gt;0&lt;/span&gt;
lock = &lt;span&gt;threading&lt;/span&gt;.&lt;span&gt;Lock&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&amp;nbsp;
&lt;span&gt;def&lt;/span&gt; do_something&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
    lock.&lt;span&gt;acquire&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;try&lt;/span&gt;:
        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'Lock acquired in the do_something function'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;finally&lt;/span&gt;:
        lock.&lt;span&gt;release&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'Lock released in the do_something function'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;quot;Done doing something&amp;quot;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;def&lt;/span&gt; do_something_else&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
    lock.&lt;span&gt;acquire&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;try&lt;/span&gt;:
        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'Lock acquired in the do_something_else function'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;finally&lt;/span&gt;:
        lock.&lt;span&gt;release&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'Lock released in the do_something_else function'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;quot;Finished something else&amp;quot;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'__main__'&lt;/span&gt;:
	result_one = do_something&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
	result_two = do_something_else&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;This works alright in this circumstance, but suppose you have multiple threads calling both of these functions. While one thread is running over the functions, another one could be modifying the data too and you&amp;#8217;ll end up with some incorrect results. The problem is that you might not even notice the results are wrong immediately. What&amp;#8217;s the solution? Let&amp;#8217;s try to figure that out.&lt;/p&gt;
&lt;p&gt;A common first thought would be to add a lock around the two function calls. Let&amp;#8217;s try modifying the example above to look like the following:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;threading&lt;/span&gt;
&amp;nbsp;
total = &lt;span&gt;0&lt;/span&gt;
lock = &lt;span&gt;threading&lt;/span&gt;.&lt;span&gt;RLock&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;def&lt;/span&gt; do_something&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
&amp;nbsp;
    with lock:
        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'Lock acquired in the do_something function'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'Lock released in the do_something function'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;quot;Done doing something&amp;quot;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;def&lt;/span&gt; do_something_else&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
    with lock:
        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'Lock acquired in the do_something_else function'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'Lock released in the do_something_else function'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;quot;Finished something else&amp;quot;&lt;/span&gt;
&amp;nbsp;
&amp;nbsp;
&lt;span&gt;def&lt;/span&gt; main&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
    with lock:
        result_one = do_something&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        result_two = do_something_else&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;print&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;result_one&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;result_two&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'__main__'&lt;/span&gt;:
    main&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;When you actually go to run this code, you will find that it just hangs. The reason is that we just told the threading module to acquire the lock. So when we call the first function, it finds that the lock is already held and blocks. It will continue to block until the lock is released, which will never happen. &lt;/p&gt;
&lt;p&gt;The real solution here is to use a &lt;strong&gt;Re-Entrant Lock&lt;/strong&gt;. Python&amp;#8217;s threading module provides one via the &lt;strong&gt;RLock&lt;/strong&gt; function. Just change the line &lt;strong&gt;lock = threading.Lock()&lt;/strong&gt; to &lt;strong&gt;lock = threading.RLock()&lt;/strong&gt; and try re-running the code. Your code should work now!&lt;/p&gt;
&lt;p&gt;If you want to try the code above with actual threads, then we can replace the call to &lt;strong&gt;main&lt;/strong&gt; with the following:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'__main__'&lt;/span&gt;:
    &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; &lt;span&gt;range&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
        my_thread = &lt;span&gt;threading&lt;/span&gt;.&lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;
            target=main&lt;span&gt;&amp;#41;&lt;/span&gt;
        my_thread.&lt;span&gt;start&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;This will run the &lt;strong&gt;main&lt;/strong&gt; function in each thread, which will in turn call the other two functions. You&amp;#8217;ll end up with 10 sets of output too.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Timers&lt;/h3&gt;
&lt;p&gt;
&lt;p&gt;The threading module has a neat class called &lt;strong&gt;Timer&lt;/strong&gt; that you can use to represent an action that should take place after a specified amount of time. They actually spin up their own custom thread and are started using the same &lt;strong&gt;start()&lt;/strong&gt; method that a regular thread uses. You can also stop a timer using its &lt;strong&gt;cancel&lt;/strong&gt; method. It should be noted that you can even cancel the timer before it&amp;#8217;s even started. &lt;/p&gt;
&lt;p&gt;The other day I ran into a use case where I needed to communicate with a subprocess I had started but I needed it to timeout. While there are lots of different approaches to this particular problem, my favorite solution was using the threading module&amp;#8217;s Timer class. &lt;/p&gt;
&lt;p&gt;For this example, we will look at using the &lt;strong&gt;ping&lt;/strong&gt; command. In Linux, the ping command will run until you kill it. So the Timer class becomes especially handy in Linux-land. Here&amp;#8217;s an example:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;subprocess&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;from&lt;/span&gt; &lt;span&gt;threading&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; Timer
&amp;nbsp;
kill = &lt;span&gt;lambda&lt;/span&gt; process: process.&lt;span&gt;kill&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;cmd&lt;/span&gt; = &lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;'ping'&lt;/span&gt;, &lt;span&gt;'www.google.com'&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;
ping = &lt;span&gt;subprocess&lt;/span&gt;.&lt;span&gt;Popen&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;
    &lt;span&gt;cmd&lt;/span&gt;, stdout=&lt;span&gt;subprocess&lt;/span&gt;.&lt;span&gt;PIPE&lt;/span&gt;, stderr=&lt;span&gt;subprocess&lt;/span&gt;.&lt;span&gt;PIPE&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
my_timer = Timer&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;, kill, &lt;span&gt;&amp;#91;&lt;/span&gt;ping&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;try&lt;/span&gt;:
    my_timer.&lt;span&gt;start&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    stdout, stderr = ping.&lt;span&gt;communicate&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;finally&lt;/span&gt;:
    my_timer.&lt;span&gt;cancel&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;print&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;str&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;stdout&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Here we just set up a lambda that we can use to kill the process. Then we start our ping job and create a Timer object. You will note that the first argument is the time in seconds to wait, then the function to call and the argument to pass to the function. In this case, our function is a lambda and we pass it a list of arguments where the list happens to only have one element. If you run this code, it should run for about 5 seconds and then print out the results of the ping.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Other Thread Components&lt;/h3&gt;
&lt;p&gt;
&lt;p&gt;The threading module includes support for other items too. For example, you can create a &lt;strong&gt;Semaphore&lt;/strong&gt; which is one of the oldest synchronization primitives in computer science. Basically, a Semaphore manages an internal counter which will be decremented whenever you call &lt;strong&gt;acquire&lt;/strong&gt; on it and &lt;strong&gt;incremented&lt;/strong&gt; when you call &lt;strong&gt;release&lt;/strong&gt;. The counter is designed in such a way that it cannot go below zero. So if you happen to call acquire when it&amp;#8217;s zero, then it will block.&lt;/p&gt;
&lt;p&gt;Another useful tool that&amp;#8217;s included is the &lt;strong&gt;Event&lt;/strong&gt;. It will allow you to communicate between threads using signals. We will be looking at an example that uses an Event in the next section.&lt;/p&gt;
&lt;p&gt;Finally in Python 3.2, the &lt;strong&gt;Barrier&lt;/strong&gt; object was added. The Barrier is a primitive that basically manages a thread pool wherein the threads have to wait for each other. To pass the barrier, the thread needs to call the &lt;strong&gt;wait()&lt;/strong&gt; method which will block until all the threads have made the call. Then it will release all the threads simultaneously. &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Thread Communication&lt;/h3&gt;
&lt;p&gt;
&lt;p&gt;There are some use cases where you will want to have your threads communicate with each other. As we mentioned earlier, you can use create an &lt;strong&gt;Event&lt;/strong&gt; for this purpose. But a more common method is to use a &lt;strong&gt;Queue&lt;/strong&gt;. For our example, we&amp;#8217;ll actually use both! Let&amp;#8217;s see what that looks like:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;threading&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;from&lt;/span&gt; queue &lt;span&gt;import&lt;/span&gt; &lt;span&gt;Queue&lt;/span&gt;
&amp;nbsp;
&amp;nbsp;
&lt;span&gt;def&lt;/span&gt; creator&lt;span&gt;&amp;#40;&lt;/span&gt;data, q&lt;span&gt;&amp;#41;&lt;/span&gt;:
    &lt;span&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;
    Creates data to be consumed and waits for the consumer
    to finish processing
    &amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'Creating data and putting it on the queue'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt; data:
        evt = &lt;span&gt;threading&lt;/span&gt;.&lt;span&gt;Event&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        q.&lt;span&gt;put&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;item, evt&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'Waiting for data to be doubled'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        evt.&lt;span&gt;wait&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&amp;nbsp;
&lt;span&gt;def&lt;/span&gt; my_consumer&lt;span&gt;&amp;#40;&lt;/span&gt;q&lt;span&gt;&amp;#41;&lt;/span&gt;:
    &lt;span&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;
    Consumes some data and works on it
&amp;nbsp;
    In this case, all it does is double the input
    &amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span&gt;while&lt;/span&gt; &lt;span&gt;True&lt;/span&gt;:
        data, evt = q.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'data found to be processed: {}'&lt;/span&gt;.&lt;span&gt;format&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;data&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        processed = data &lt;span&gt;*&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;processed&lt;span&gt;&amp;#41;&lt;/span&gt;
        evt.&lt;span&gt;set&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        q.&lt;span&gt;task_done&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&amp;nbsp;
&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'__main__'&lt;/span&gt;:
    q = &lt;span&gt;Queue&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    data = &lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;, &lt;span&gt;13&lt;/span&gt;, &lt;span&gt;-1&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;
    thread_one = &lt;span&gt;threading&lt;/span&gt;.&lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;target=creator, args=&lt;span&gt;&amp;#40;&lt;/span&gt;data, q&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    thread_two = &lt;span&gt;threading&lt;/span&gt;.&lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;target=my_consumer, args=&lt;span&gt;&amp;#40;&lt;/span&gt;q,&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    thread_one.&lt;span&gt;start&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    thread_two.&lt;span&gt;start&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    q.&lt;span&gt;join&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;#8217;s break this down a bit. First off, we have a creator (AKA a producer) function that we use to create data that we want to work on (or consume). Then we have another function that we use for processing the data that we are calling &lt;strong&gt;my_consumer&lt;/strong&gt;. The creator function will use the Queue&amp;#8217;s &lt;strong&gt;put&lt;/strong&gt; method to put the data into the Queue and the consumer will continually check for more data and process it when it becomes available. The Queue handles all the acquires and releases of the locks so you don&amp;#8217;t have to. &lt;/p&gt;
&lt;p&gt;In this example, we create a list of values that we want to double. Then we create two threads, one for the creator / producer and one for the consumer. You will note that we pass a Queue object to each thread which is the magic behind how the locks get handled. The queue will have the first thread feed data to the second. When the first puts some data into the queue, it also passes in an Event and then waits for the event to finish. Then in the consumer, the data is processed and when it&amp;#8217;s done, it calls the &lt;strong&gt;set&lt;/strong&gt; method of the Event which tells the first thread that the second is done processing and it can continue.&lt;/p&gt;
&lt;p&gt;The very last line of code call&amp;#8217;s the Queue object&amp;#8217;s &lt;strong&gt;join&lt;/strong&gt; method which tells the Queue to wait for the threads to finish. The first thread ends when it runs out of items to put into the Queue.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Wrapping Up&lt;/h3&gt;
&lt;p&gt;
&lt;p&gt;We covered a lot of material here. You have learned the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The basics of threading&lt;/li&gt;
&lt;li&gt;How locking works&lt;/li&gt;
&lt;li&gt;What Events are and how they can be used&lt;/li&gt;
&lt;li&gt;How to use a Timer&lt;/li&gt;
&lt;li&gt;Inter-Thread Communication using Queues / Events&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that you know how threads are used and what they are good for, I hope you will find many good uses for them in your own code. &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Related Reading&lt;/h3&gt;
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;Python documentation on the &lt;a href=&quot;https://docs.python.org/3/library/threading.html&quot; target=&quot;_blank&quot;&gt;threading module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Eli Bendersky &amp;#8211; &lt;a href=&quot;http://eli.thegreenplace.net/2011/12/27/python-threads-communication-and-stopping&quot; target=&quot;_blank&quot;&gt;Python threads: communication and stopping &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 28 Jul 2016 12:30:24 +0000</pubDate>
</item>
<item>
	<title>Import Python: ImportPython Issue 83</title>
	<guid>http://importpython.com/blog/post/importpython-issue-83</guid>
	<link>http://importpython.com/blog/post/importpython-issue-83</link>
	<description>&lt;table&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot; class=&quot;container-padding content&quot;&gt;&lt;br /&gt;&lt;div class=&quot;title&quot;&gt;Worthy Read&lt;/div&gt;&lt;div class=&quot;hr&quot;&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Bv25Dwe84g0&quot; target=&quot;_blank&quot;&gt;Raymond Hettinger - Thinking about Concurrency (Pycon RU 2016)&lt;/a&gt;&lt;/div&gt;&lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;video&lt;/div&gt;&lt;/em&gt;&lt;div class=&quot;body-text&quot;&gt;Walk through two examples of threading and multiprocessing to illustrate rules and best practices for taking advantage of concurrency. Documentation and code from the presentation is here - https://dl.dropboxusercontent.com/u/3967849/pyru/_build/html/index.html &lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;a href=&quot;http://slott-softwarearchitect.blogspot.com/2016/07/another-python-to-rescue-story-creating.html&quot; target=&quot;_blank&quot;&gt;Another Python to the Rescue Story -- Creating a DSL from Python Class Definitions&lt;/a&gt;&lt;/div&gt;&lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;core python&lt;/div&gt;&lt;/em&gt;&lt;div class=&quot;body-text&quot;&gt;We didn’t invent a new DSL, we merely adapted Python’s existing syntax to our needs. A simple class structure and a metaclass definition gave us everything we needed to build the configuration parameter files we needed. &lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;a href=&quot;https://goo.gl/PQSqLb&quot; target=&quot;_blank&quot;&gt;Python has come a long way. So has job hunting.&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;body-text&quot;&gt;&lt;div&gt;&lt;a href=&quot;https://goo.gl/PQSqLb&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://importpython.com/blog/feed/&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt; Get in front of 4,000+ companies with one application. No more pushy recruiters, no more dead end applications and mismatched companies.&lt;/div&gt;&lt;div class=&quot;body-text&quot;&gt;&lt;em&gt;Sponsor&lt;/em&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;a href=&quot;https://www.dataquest.io/blog/apartment-finding-slackbot&quot; target=&quot;_blank&quot;&gt;I built a slackbot in Python to help me find an apartment in SF&lt;/a&gt;&lt;/div&gt;&lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;bot&lt;/div&gt;&lt;/em&gt;&lt;div class=&quot;body-text&quot;&gt;Scrapes listings from Craigslist. Filter out listings that don’t match our criteria. Post the listings to Slack, a team chat tool, so we can discuss and rate them. Wrap the whole process into a persistent loop and deploy it to a server (so it would run continuously). Built by Vik Paruchuri - https://twitter.com/vikparuchuri &lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;a href=&quot;http://www.machinalis.com/blog/a-day-with-mypy-part-1/&quot; target=&quot;_blank&quot;&gt;A day with mypy. 3 Part Series.&lt;/a&gt;&lt;/div&gt;&lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;mypy&lt;/div&gt;&lt;/em&gt;&lt;div class=&quot;body-text&quot;&gt;Earlier this year PEP-484 was accepted, the typing module was added to Python 3.5, and mypy moved into the umbrella of official python projects. Since it was a visible topic at the last Pycon.us, I decided to get some experience with it and see how it feels to use it. I decided I’d take a working, mature, open-source project that wasn’t written by me and “convert” it to mypy. Note this is a 3 part series with a follow up. Have a look at the latest post here - http://www.machinalis.com/blog/writing-type-stubs-for-numpy/ &lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;a href=&quot;https://www.djangounderthehood.com/&quot; target=&quot;_blank&quot;&gt;Registration for Django: Under the Hood 2016 is now open!&lt;/a&gt;&lt;/div&gt;&lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;conference&lt;/div&gt;&lt;/em&gt;&lt;div class=&quot;body-text&quot;&gt;Based on the videos I have watched this is a must Go ( if you can that's ) Django Conference. &lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;a href=&quot;https://emptysqua.re/blog/talk-python-episode-on-writing/&quot; target=&quot;_blank&quot;&gt;A. Jesse Jiryu Davis's conversation on &quot;Write an Excellent Programming Blog&quot;&lt;/a&gt;&lt;/div&gt;&lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;podcast&lt;/div&gt;&lt;/em&gt;&lt;div class=&quot;body-text&quot;&gt;Michael Kennedy ( guy behind the TalkPython Podcast ) and I talked about writing about programming. What kind of writing is most valuable, how do you choose a topic, improve your writing, find an audience, and find the time to write? Listen to the podcast on the Talk Python To Me site. &lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;a href=&quot;https://worthwhile.com/blog/2016/07/11/django-page-load-speed/&quot; target=&quot;_blank&quot;&gt;Django Page Load Speeds&lt;/a&gt;&lt;/div&gt;&lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;django&lt;/div&gt;&lt;/em&gt;&lt;div class=&quot;body-text&quot;&gt;Django and Python tips and tricks on how to improve website page load times by optimizing images. &lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;a href=&quot;http://blog.yhat.com/posts/words2map.html&quot; target=&quot;_blank&quot;&gt;words2map: A recommender framework built with word2vec, t-SNE and HDBSCAN to power overlap.ai&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;body-text&quot;&gt;At overlap.ai we’re building artificial intelligence to unite people through their overlapping passions, and here we introduce a framework we call words2map for considering what our users love, like these personal passions of ours. Github repo - https://github.com/overlap-ai/words2map &lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;a href=&quot;http://goo.gl/m3HS3g&quot; target=&quot;_blank&quot;&gt;Counting Pizza with Python&lt;/a&gt;&lt;/div&gt;&lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;security&lt;/div&gt;&lt;/em&gt;&lt;div class=&quot;body-text&quot;&gt;I'm a full time nerd, even when I'm ordering pizza online I can't stop myself from investigating how the websites I'm ordering from work. My latest investigation was Dominoes where I found a neat way to count the number of orders that they process throughout the day. This post is supposed to highlight potential dangers when exposing integer ID's, and how they can allow someone motivated (or sad) enough to track data you might not want to share. Simple Python Code to find it out has been shared. &lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;a href=&quot;http://www.dreisbach.us/blog/building-dashboards-with-django-and-d3/&quot; target=&quot;_blank&quot;&gt;Building Dashboards with Django and D3 — dreisbach.us&lt;/a&gt;&lt;/div&gt;&lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;django&lt;/div&gt;,&lt;/em&gt; &lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;Django Rest Framework&lt;/div&gt;,&lt;/em&gt; &lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;d3&lt;/div&gt;&lt;/em&gt;&lt;div class=&quot;body-text&quot;&gt;My workplace recently collaborated with several police departments to build a dashboard showing 911 (also known as Call for Service) data, allowing users to drill down into that data. When I started on the project, there was a prototype written in dc.js, a JavaScript framework for building dynamic dashboards with all the data on the frontend, built around records from Tampa, FL. I needed to take this and make it capable of handling much more data -- millions of records. I took on the task of building this using Django and D3. Along the way, I found a set of tools that worked for me. &lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;a href=&quot;http://feedproxy.google.com/~r/TheMouseVsThePython/~3/6r5nR2o7lIg/&quot; target=&quot;_blank&quot;&gt;PyDev of the Week: Nicholas Tollervey&lt;/a&gt;&lt;/div&gt;&lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;interview&lt;/div&gt;&lt;/em&gt;&lt;div class=&quot;body-text&quot;&gt;This week we welcome Nicholas Tollervey (@ntoll) as our PyDev of the Week. He is the author of the Python in Education booklet and the co-author of Learning jQuery Deferreds: Taming Callback Hell with Deferreds and Promises. He was one of the co-founders of the London Python Code Dojo. You should check out his website to see what he’s up to. Let’s spend some time learning more about our fellow Pythonista! &lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;a href=&quot;http://www.djangocurrent.com/2016/07/uwsgi-basic-django-setup_74.html&quot; target=&quot;_blank&quot;&gt;uWSGI Basic Django Setup&lt;/a&gt;&lt;/div&gt;&lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;django&lt;/div&gt;&lt;/em&gt;&lt;div class=&quot;body-text&quot;&gt;Here are two basic examples of almost the same uWSGI configuration to run a Django project; one is configured via an ini configuration file and the other is configured via a command line argument. This does not represent a production-ready example, but can be used as a starting point for the configuration. &lt;br /&gt;&lt;/div&gt;&lt;br /&gt; &lt;br /&gt;&lt;div class=&quot;title&quot;&gt;Jobs&lt;div class=&quot;hr&quot;&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;a href=&quot;http://importpython.com/jobboard/81/python-developer/&quot;&gt;Python developer at Stefanini Hungary Ltd&lt;/a&gt;&lt;/div&gt;&lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;Hungary&lt;/div&gt;&lt;/em&gt;&lt;div class=&quot;body-text&quot;&gt;Someone who can do systems level and applications software engineering and programming. System administration functions as well develop and implement systems automation and reliability functions for our infrastructure.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;a href=&quot;http://importpython.com/jobboard/82/python-programmer-mid-senior-position/&quot;&gt;Python Programmer (mid-senior position) at Skylable Sp. z o.o.&lt;/a&gt;&lt;/div&gt;&lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;Torun, Poland&lt;/div&gt;&lt;/em&gt;&lt;div class=&quot;body-text&quot;&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;a href=&quot;http://importpython.com/jobboard/83/python-programmer-junior-position/&quot;&gt;Python Programmer (junior position) at Skylable Sp. z o.o.&lt;/a&gt;&lt;/div&gt;&lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;Torun, Poland&lt;/div&gt;&lt;/em&gt;&lt;div class=&quot;body-text&quot;&gt;Skylable Sp. z o.o., an innovative IT firm founded in 2012, operating in Torun, London and Boston, Our cloud team is responsible for the architecture, development and scaling of core backend systems that power the Skylable cloud platform.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;a href=&quot;http://importpython.com/jobboard/84/backend-python-developer/&quot;&gt;Backend Python Developer at Kwalee&lt;/a&gt;&lt;/div&gt;&lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;Leamington Spa, United Kingdom&lt;/div&gt;&lt;/em&gt;&lt;div class=&quot;body-text&quot;&gt;Kwalee is an expanding, independent mobile game developer based right in the heart of Leamington Spa, England, specialising in multiplayer, mass market games featuring user generated content. The Company was founded by David Darling CBE in 2011 (he was one of the original founders of Codemasters). &lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;a href=&quot;http://importpython.com/jobboard/85/python-developer/&quot;&gt;Python Developer at Venturesity&lt;/a&gt;&lt;/div&gt;&lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;Bangalore, Karnataka, India&lt;/div&gt;&lt;/em&gt;&lt;div class=&quot;body-text&quot;&gt;Venturesity is a challenge and peer learning platform. We are using a challenge model to help companies discover relevant talent and hire better people. The platform allows companies to post challenges to job seekers instead of boring job descriptions.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt; &lt;br /&gt;&lt;div class=&quot;title&quot;&gt;Upcoming Conference / User Group Meet&lt;/div&gt;&lt;div class=&quot;hr&quot;&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;div&gt;&lt;a href=&quot;https://www.pycon.kr/2016apac/&quot;&gt;PyCon APAC 2016&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;body-text&quot;&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;http://maps.google.com/maps/api/staticmap?center=37.5172363,127.0473248&amp;zoom=8&amp;size=160x160&amp;sensor=false&quot; /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;div&gt;&lt;a href=&quot;http://pycon.my/&quot;&gt;PyCon MY 2016&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;body-text&quot;&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;http://maps.google.com/maps/api/staticmap?center=3.139003,101.686855&amp;zoom=8&amp;size=160x160&amp;sensor=false&quot; /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;div&gt;&lt;a href=&quot;http://www.pyunconf.de/&quot;&gt;Python Unconference 2016&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;body-text&quot;&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;http://maps.google.com/maps/api/staticmap?center=53.5510846,9.9936818&amp;zoom=8&amp;size=160x160&amp;sensor=false&quot; /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;div&gt;&lt;a href=&quot;http://kiwi.pycon.org/&quot;&gt;Kiwi PyCon&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;body-text&quot;&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;http://maps.google.com/maps/api/staticmap?center=-45.8787605,170.5027976&amp;zoom=8&amp;size=160x160&amp;sensor=false&quot; /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;div&gt;&lt;a href=&quot;https://pycon.jp/2016/&quot;&gt;PyCon JP 2016&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;body-text&quot;&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;http://maps.google.com/maps/api/staticmap?center=35.6938401,139.7035494&amp;zoom=8&amp;size=160x160&amp;sensor=false&quot; /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;div&gt;&lt;a href=&quot;https://za.pycon.org/&quot;&gt;PyCon ZA 2016&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;body-text&quot;&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;http://maps.google.com/maps/api/staticmap?center=-33.9366787,18.4753484&amp;zoom=8&amp;size=160x160&amp;sensor=false&quot; /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;div&gt;&lt;a href=&quot;http://pl.pycon.org/2016/&quot;&gt;PyCon PL 2016&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;body-text&quot;&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;http://maps.google.com/maps/api/staticmap?center=51.76623,20.25623&amp;zoom=8&amp;size=160x160&amp;sensor=false&quot; /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;div&gt;&lt;a href=&quot;http://conferences.oreilly.com/oscon/open-source-eu-2016&quot;&gt;OSCON Europe 2016&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;body-text&quot;&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;http://maps.google.com/maps/api/staticmap?center=51.5073509,-0.1277583&amp;zoom=8&amp;size=160x160&amp;sensor=false&quot; /&gt;&lt;/div&gt;&lt;br /&gt; &lt;br /&gt;&lt;div class=&quot;title&quot;&gt;Projects&lt;/div&gt;&lt;div class=&quot;hr&quot;&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;a href=&quot;https://github.com/python/devguide&quot; target=&quot;_blank&quot;&gt;devguide&lt;/a&gt; - &lt;small&gt;51 Stars, 2 Fork&lt;/small&gt;&lt;/div&gt;&lt;div class=&quot;body-text&quot;&gt;The Python developer's guide. This guide covers how to contribute to CPython. It is known by the nickname of &quot;the devguide&quot; by the Python core developers.&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;a href=&quot;https://github.com/asyncio-doc/asyncio-doc&quot; target=&quot;_blank&quot;&gt;asyncio-doc&lt;/a&gt; - &lt;small&gt;9 Stars, 2 Fork&lt;/small&gt;&lt;/div&gt;&lt;div class=&quot;body-text&quot;&gt;Asyncio documentation. Tutorials should use Python 3.5 async and await keywords rather than @asyncio.coroutine and yield from.&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;a href=&quot;https://github.com/trishume/LastSecondSlides&quot; target=&quot;_blank&quot;&gt;LastSecondSlides&lt;/a&gt; - &lt;small&gt;6 Stars, 0 Fork&lt;/small&gt;&lt;/div&gt;&lt;div class=&quot;body-text&quot;&gt;Use the Google speech-to-text API to generate presentation slides as you talk!&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;subtitle&quot;&gt;&lt;a href=&quot;https://github.com/loics2/sorta&quot; target=&quot;_blank&quot;&gt;sorta&lt;/a&gt; - &lt;small&gt;5 Stars, 2 Fork&lt;/small&gt;&lt;/div&gt;&lt;div class=&quot;body-text&quot;&gt;Sorta is a tool to help you sort your files&lt;/div&gt;&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;</description>
	<pubDate>Thu, 28 Jul 2016 10:40:25 +0000</pubDate>
</item>
<item>
	<title>Chris Mitchell: Wooey v. 0.9.3 released</title>
	<guid>http://pyinformatics.blogspot.com/2016/07/wooey-v-093-released.html</guid>
	<link>http://pyinformatics.blogspot.com/2016/07/wooey-v-093-released.html</link>
	<description>After a somewhat long delay, &lt;a href=&quot;https://github.com/wooey/Wooey&quot;&gt;Wooey&lt;/a&gt; 0.9.3 is finally released.&lt;br /&gt;&lt;br /&gt;Some of the major features of this new release:&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Real time updates of Job status&lt;/h4&gt;&lt;div&gt;This was an often requested feature that is now implemented. The output of scripts as well and execution status of a script will be updated in real time so there is no need to reload a page for job updates. By default, this makes use of the database to store job information, but can be easily configured to store this information in a cache layer via the &lt;code&gt;WOOEY_REALTIME_CACHE&lt;/code&gt; setting.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;Improved updates to scripts&lt;/h4&gt;&lt;div&gt;Another request was better integration with filewatchers to automatically update scripts with changes. To this end, the script parameters are now more intelligently created and parameters that are unchanged between script versions will not be updated. Via the command line, this behavior can be achieved by adding the &lt;code&gt;--update&lt;/code&gt; flag to the &lt;code&gt;addscript&lt;/code&gt; command and is automatically performed when updating scripts via the admin. &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Reduced file duplication&lt;/h4&gt;&lt;div&gt;Another issue was duplication of files between uploads. Because Wooey was designed for multiple users with privacy for their files, this obviously can lead many files duplicated between analyses and wasted disk space. To rectify this, Wooey now performs a checksum on uploaded files to identify duplicated files, and adds a permission layer to users that allows multiple users to access the same uploads (provided that user had the file in the first place to upload!). As an added benefit, this setup paves the way for a media dashboard that will allow users and groups to easily share files with one another.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Some other notable improvements:&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;An awesome user,&amp;nbsp;&lt;a href=&quot;https://github.com/manicmaniac&quot;&gt;manicmaniac&lt;/a&gt;, added translations for Japanese.&lt;/li&gt;&lt;li&gt;Automatic deletion of jobs older than a given date&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;h3&gt;&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 28 Jul 2016 05:30:25 +0000</pubDate>
</item>
<item>
	<title>Philip Semanchuk: Creating PDF Documents Using LibreOffice and Python</title>
	<guid>http://blog.pyspoken.com/2016/07/27/creating-pdf-documents-using-libreoffice-and-python/</guid>
	<link>http://blog.pyspoken.com/2016/07/27/creating-pdf-documents-using-libreoffice-and-python/</link>
	<description>&lt;p&gt;This post is a supplement to &lt;a href=&quot;http://pyohio.org/schedule/presentation/239/&quot;&gt;a talk I&amp;#8217;m giving at PyOhio&lt;/a&gt; about using Python to create PDFs &amp;#8220;the lazy way&amp;#8221;. It&amp;#8217;s the first of a series on this subject which is a bit too big for just one blog post.&lt;/p&gt;
&lt;p&gt;In the talk and in this series, I advocate a technique for creating PDFs that uses LibreOffice (or OpenOffice) to do most of the hard work, and I contrast that to the common solution of using &lt;a href=&quot;http://www.reportlab.com/opensource/&quot;&gt;ReportLab&lt;/a&gt; (or a library like it).&lt;/p&gt;
&lt;p&gt;This technique offers some unique benefits, and in some common use cases—most importantly, perhaps in &lt;em&gt;your&lt;/em&gt; case—it can be much more efficient than the alternative. I&amp;#8217;ll compare and contrast the two in another blog post. In this post I just want to describe the technique I&amp;#8217;m advocating.&lt;/p&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;Creating PDFs programmatically is a task most Python programmers encounter&lt;br /&gt;
at least once.&lt;/p&gt;
&lt;p&gt;When I talk about creating PDFs programmtically, I&amp;#8217;m thinking of the situation where one wants to create a lot of PDFs that follow a template. For instance, you might work for a bank that wants to produce end-of-month account statements for each of its 100,000 customers. The cover page will always contain the bank&amp;#8217;s logo, some legal boilerplate, the month and year, and a bland stock photo &lt;img class=&quot;size-medium wp-image-111 alignright&quot; src=&quot;http://blog.pyspoken.com/wp-content/uploads/2016/07/17068-a-woman-and-older-man-sitting-at-a-table-pv-300x240.jpg&quot; alt=&quot;17068-a-woman-and-older-man-sitting-at-a-table-pv&quot; width=&quot;300&quot; height=&quot;240&quot; /&gt;of happy customers doing something  unrelated to banking, like this one.&lt;/p&gt;
&lt;p&gt;The first page after that will be a summary of the customer&amp;#8217;s accounts, and then subsequent pages contain information about the account—a list of transactions, changes in values of stocks, etc.&lt;/p&gt;
&lt;p&gt;Each PDF will be different, but similar because they follow a template. Computers are great for this sort of thing, and this technique is particularly good at it. As I said above, I&amp;#8217;ll tell you why I think it&amp;#8217;s good in another blog post. For now, I want to stop talking mysteriously about &amp;#8220;the technique&amp;#8221; and actually describe it.&lt;/p&gt;
&lt;h2&gt;Outline&lt;/h2&gt;
&lt;p&gt;Here&amp;#8217;s a concise outline. Don&amp;#8217;t worry if you don&amp;#8217;t understand all the steps; they&amp;#8217;re fleshed out below.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a LibreOffice document that will serve as a template for the documents you want to create. (Note: I mean &amp;#8220;template&amp;#8221; in the general sense of a form or skeleton, not a LibreOffice &lt;code&gt;.ott&lt;/code&gt; template file.)&lt;/li&gt;
&lt;li&gt;Unzip that document.&lt;/li&gt;
&lt;li&gt;Manipulate the document&amp;#8217;s XML using standard Python libraries.&lt;/li&gt;
&lt;li&gt;Zip the modified files into a new LibreOffice &lt;code&gt;.odt&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;Ask LibreOffice to export the document in PDF format.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let&amp;#8217;s go through these step by step. I encourage you to follow along. We&amp;#8217;re not going to write a single line of Python code, just explore a process. Writing Python would come later when you automate steps 2 &amp;#8211; 5.&lt;/p&gt;
&lt;h2&gt;1. Create a LibreOffice Document to Use as a Template&lt;/h2&gt;
&lt;p&gt;This step will probably require the most work.&lt;/p&gt;
&lt;p&gt;We usually know in advance at least some of the content we want. For instance, in the bank example above, we know what the cover page will look like, where each section should appear in the document, and how a section (e.g. a list of account transactions) should be formatted, even if we don&amp;#8217;t know in advance the exact values of each transaction.&lt;/p&gt;
&lt;p&gt;Your job during this step is to create a LibreOffice document that will serve as a skeleton (or template, or form) for your final documents. For content that you don&amp;#8217;t know (words in paragraphs, images, bullet points in a list, table contents, etc.), leave placeholders.&lt;/p&gt;
&lt;p&gt;If you want to play along with this blog post, here&amp;#8217;s &lt;a href=&quot;http://blog.pyspoken.com/wp-content/uploads/2016/07/practice.odt&quot;&gt;the LibreOffice document&lt;/a&gt; that I&amp;#8217;ll use in the examples below.&lt;/p&gt;
&lt;h2&gt;2. Unzip the Document&lt;/h2&gt;
&lt;p&gt;This is a trick you might not know—LibreOffice documents are ZIP files. (This is true of all documents that follow the &lt;a href=&quot;https://en.wikipedia.org/wiki/OpenDocument&quot;&gt;Open Document Format for Office Applications&lt;/a&gt;). You can unzip them with command line tools, or with the &lt;code&gt;zipfile&lt;/code&gt; module in Python&amp;#8217;s standard library.&lt;/p&gt;
&lt;p&gt;On my Mac, the following command unzips the document into the directory &lt;code&gt;unzipped&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;unzip practice.odt -d unzipped&lt;/pre&gt;
&lt;p&gt;After unzipping, you&amp;#8217;ll see a bunch of files like this:&lt;/p&gt;
&lt;pre&gt;drwxr-xr-x  11 philip staff    374 Jul 27 16:43 Configurations2/
drwxr-xr-x   3 philip staff    102 Jul 27 16:43 META-INF/
drwxr-xr-x   3 philip staff    102 Jul 27 16:43 Thumbnails/
-rw-r--r--   1 philip staff   8988 Jul 27 16:44 content.xml
-rw-r--r--   1 philip staff    899 Jul 27  2016 manifest.rdf
-rw-r--r--   1 philip staff   1005 Jul 27  2016 meta.xml
-rw-r--r--   1 philip staff     39 Jul 27  2016 mimetype
-rw-r--r--   1 philip staff  10319 Jul 27  2016 settings.xml
-rw-r--r--   1 philip staff  14903 Jul 27  2016 styles.xml&lt;/pre&gt;
&lt;p&gt;Of the files above, you&amp;#8217;re only likely to be interested in &lt;code&gt;content.xml&lt;/code&gt;. (You might also want to explore &lt;code&gt;styles.xml&lt;/code&gt;, but I consider that an advanced topic, and I&amp;#8217;m trying to maintain a rigorous standard of laziness.)&lt;/p&gt;
&lt;h2&gt;3. Manipulate the XML&lt;/h2&gt;
&lt;p&gt;The XML in &lt;code&gt;content.xml&lt;/code&gt; is governed by the 846-page &lt;a href=&quot;http://docs.oasis-open.org/office/v1.2/OpenDocument-v1.2.html&quot;&gt;Open Document Format for Office Applications&lt;/a&gt;. You might think I&amp;#8217;m going to suggest you read it, or at least familiarize yourself with it.&lt;/p&gt;
&lt;p&gt;Heck no! That&amp;#8217;s not the lazy way. I&amp;#8217;m very pleased that it&amp;#8217;s an ISO standard, but I don&amp;#8217;t want to learn it if I can save time and effort by not doing so, and you shouldn&amp;#8217;t have to either.&lt;/p&gt;
&lt;p&gt;Instead I suggest you use what I use: common sense and intution, which can get you surprisingly far. For instance, if you see this in the XML—&lt;/p&gt;
&lt;pre&gt;&amp;lt;text:p text:style-name=&quot;P4&quot;&amp;gt;
 The fox jumped over the dog.
&amp;lt;/text:p&amp;gt;&lt;/pre&gt;
&lt;p&gt;You don&amp;#8217;t have to read 846 pages of documentation to guess that you can change it to this—&lt;/p&gt;
&lt;pre&gt;&amp;lt;text:p text:style-name=&quot;P4&quot;&amp;gt;
 The quick brown fox jumped over the lazy dog.
&amp;lt;/text:p&amp;gt;&lt;/pre&gt;
&lt;p&gt;Or even this—&lt;/p&gt;
&lt;pre&gt;&amp;lt;text:p text:style-name=&quot;P4&quot;&amp;gt;
 No one expects the Spanish Inquisition!
&amp;lt;/text:p&amp;gt;&lt;/pre&gt;
&lt;p&gt;Are you starting to see some possibilities?&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re doing this programmatically, you can use LibreOffice bookmarks to demarcate the text you want to replace. Bookmarks are visible in the XML and trivial to locate using XPath. You can see this in my example document where I&amp;#8217;ve surrounded two blank space characters with bookmarks where adjectives might go to describe the fox and dog.&lt;/p&gt;
&lt;pre&gt;&amp;lt;text:p text:style-name=&quot;P1&quot;&amp;gt;
    The
    &amp;lt;text:bookmark-start text:name=&quot;fox_type_placeholder&quot;/&amp;gt;
    &amp;lt;text:s/&amp;gt;
    &amp;lt;text:bookmark-end text:name=&quot;fox_type_placeholder&quot;/&amp;gt;
    &amp;lt;text:s/&amp;gt;
    fox jumped over the
    &amp;lt;text:bookmark-start text:name=&quot;dog_type_placeholder&quot;/&amp;gt;
    &amp;lt;text:s/&amp;gt;
    &amp;lt;text:bookmark-end text:name=&quot;dog_type_placeholder&quot;/&amp;gt;
    &amp;lt;text:s/&amp;gt;
    dog.
&amp;lt;/text:p&amp;gt;&lt;/pre&gt;
&lt;p&gt;What do you think will happen if you replace the first occurrence of  &lt;code&gt;&amp;lt;text:s/&amp;gt;&lt;/code&gt; with &lt;code&gt;quick brown&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Text isn&amp;#8217;t the only thing you can change.&lt;/p&gt;
&lt;p&gt;If you have a list item with bullets and you want another bullet or three, you can just duplicate existing bullets. For instance, if you start with this—&lt;/p&gt;
&lt;pre&gt;&amp;lt;text:list xml:id=&quot;list3413943092755896283&quot; text:style-name=&quot;L1&quot;&amp;gt;
    &amp;lt;text:list-item&amp;gt;
        &amp;lt;text:p text:style-name=&quot;P2&quot;&amp;gt;First&amp;lt;/text:p&amp;gt;
    &amp;lt;/text:list-item&amp;gt;
    &amp;lt;text:list-item&amp;gt;
        &amp;lt;text:p text:style-name=&quot;P2&quot;&amp;gt;Second&amp;lt;/text:p&amp;gt;
    &amp;lt;/text:list-item&amp;gt;
    &amp;lt;text:list-item&amp;gt;
        &amp;lt;text:p text:style-name=&quot;P2&quot;&amp;gt;Third&amp;lt;/text:p&amp;gt;
    &amp;lt;/text:list-item&amp;gt;
&amp;lt;/text:list&amp;gt;&lt;/pre&gt;
&lt;p&gt;You can turn it into this—&lt;/p&gt;
&lt;pre&gt;&amp;lt;text:list xml:id=&quot;list3413943092755896283&quot; text:style-name=&quot;L1&quot;&amp;gt;
    &amp;lt;text:list-item&amp;gt;
        &amp;lt;text:p text:style-name=&quot;P2&quot;&amp;gt;First&amp;lt;/text:p&amp;gt;
    &amp;lt;/text:list-item&amp;gt;
    &amp;lt;text:list-item&amp;gt;
        &amp;lt;text:p text:style-name=&quot;P2&quot;&amp;gt;Second&amp;lt;/text:p&amp;gt;
    &amp;lt;/text:list-item&amp;gt;
    &amp;lt;text:list-item&amp;gt;
        &amp;lt;text:p text:style-name=&quot;P2&quot;&amp;gt;Third&amp;lt;/text:p&amp;gt;
    &amp;lt;/text:list-item&amp;gt;
    &amp;lt;text:list-item&amp;gt;
        &amp;lt;text:p text:style-name=&quot;P2&quot;&amp;gt;Fourth&amp;lt;/text:p&amp;gt;
    &amp;lt;/text:list-item&amp;gt;
    &amp;lt;text:list-item&amp;gt;
        &amp;lt;text:p text:style-name=&quot;P2&quot;&amp;gt;Fifth&amp;lt;/text:p&amp;gt;
    &amp;lt;/text:list-item&amp;gt;
    &amp;lt;text:list-item&amp;gt;
        &amp;lt;text:p text:style-name=&quot;P2&quot;&amp;gt;Sixth&amp;lt;/text:p&amp;gt;
    &amp;lt;/text:list-item&amp;gt;
&amp;lt;/text:list&amp;gt;&lt;/pre&gt;
&lt;p&gt;Note that the &lt;code&gt;text:list&lt;/code&gt; element itself has what looks like a unique id associated with it. This is a yellow flag that indicates to me that if you want to copy the entire list, you&amp;#8217;ll need to give it a new unique id, and hope that LibreOffice  doesn&amp;#8217;t reference that id in some other file.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m sure the details are somewhere in that 846-page document. You can read that document, or you can also just try your change and see what happens. The worst case scenario is that LibreOffice will tell you that your document is corrupted and you&amp;#8217;ll have to go back and explore some more.&lt;/p&gt;
&lt;h2&gt;4. Zip a New LibreOffice File&lt;/h2&gt;
&lt;p&gt;Once you&amp;#8217;ve made the changes you want, it&amp;#8217;s time to reverse step 2, using your modified &lt;code&gt;content.xml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the command that works on my Mac—&lt;/p&gt;
&lt;pre&gt;cd unzipped &amp;amp;&amp;amp; zip -r ../my_new_file.odt * &amp;amp;&amp;amp; cd ..&lt;/pre&gt;
&lt;p&gt;Note that this command doesn&amp;#8217;t respect the OpenDocument specification which has rules regarding how the mime type file should be represented in the zip file (as the first file in the archive, and uncompressed, per &lt;a href=&quot;http://docs.oasis-open.org/office/v1.2/os/OpenDocument-v1.2-os-part3.odt&quot;&gt;OpenDocument v1.2 part3&lt;/a&gt;, § 3.3 MIME Media Type). It works for me, maybe because LibreOffice is forgiving. It&amp;#8217;s not something you should rely on, however. In another post, I&amp;#8217;ll present some Python code that constructs the ZIP file according to standard.&lt;/p&gt;
&lt;h2&gt;5. Export to PDF via LibreOffice&lt;/h2&gt;
&lt;p&gt;If you&amp;#8217;re just experimenting, you can just open the document in LibreOffice manually and then use the &amp;#8220;File/Export as PDF&amp;#8230;&amp;#8221; menu item. (Opening manually is also a good test that you didn&amp;#8217;t do anything objectionable to the XML.)&lt;/p&gt;
&lt;p&gt;Programmatically, I recommend using &lt;a href=&quot;https://github.com/dagwieers/unoconv&quot;&gt;unoconv&lt;/a&gt; for converting your finished document to PDF.&lt;/p&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;p&gt;So there you have it! If you feel underwhelmed, keep in mind that this was only a proof of concept. In some future posts, I&amp;#8217;ll explain why I think this method is often an excellent choice (and also when it isn&amp;#8217;t).&lt;/p&gt;
&lt;h2&gt;Photo Credit&lt;/h2&gt;
&lt;p&gt;Thanks to the &lt;a href=&quot;https://visualsonline.cancer.gov&quot;&gt;National Cancer Institute&lt;/a&gt; for making many photos available for free, including the one used in this blog post which was taken by Rhoda Baer.&lt;/p&gt;</description>
	<pubDate>Thu, 28 Jul 2016 03:51:43 +0000</pubDate>
</item>
<item>
	<title>Thomas Guest: Python Streams vs Unix Pipes</title>
	<guid>http://wordaligned.org/articles/python-streams-vs-unix-pipes</guid>
	<link>http://wordaligned.org/articles/python-streams-vs-unix-pipes</link>
	<description>&lt;div class=&quot;toc&quot;&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#tocinfinite-series-and-python&quot; name=&quot;toc0&quot; id=&quot;toc0&quot;&gt;Infinite series and Python&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#tocinfinite-series-in-other-languages&quot; name=&quot;toc1&quot; id=&quot;toc1&quot;&gt;Infinite series in Other Languages&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#tocpartial-sums&quot; name=&quot;toc2&quot; id=&quot;toc2&quot;&gt;Partial sums.&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#tocconsecutive-sums&quot; name=&quot;toc3&quot; id=&quot;toc3&quot;&gt;Consecutive sums&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#tocbug-fixes&quot; name=&quot;toc4&quot; id=&quot;toc4&quot;&gt;Bug Fixes&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#tocmerging-streams&quot; name=&quot;toc5&quot; id=&quot;toc5&quot;&gt;Merging Streams&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#tocgenerating-primes&quot; name=&quot;toc6&quot; id=&quot;toc6&quot;&gt;Generating Primes&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#tocpipe-connection&quot; name=&quot;toc7&quot; id=&quot;toc7&quot;&gt;Pipe Connection&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#tocpipe-teeing&quot; name=&quot;toc8&quot; id=&quot;toc8&quot;&gt;Pipe Teeing&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#tocportability&quot; name=&quot;toc9&quot; id=&quot;toc9&quot;&gt;Portability&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#tocstream-merge&quot; name=&quot;toc10&quot; id=&quot;toc10&quot;&gt;Stream Merge&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#tocalternative-solutions&quot; name=&quot;toc11&quot; id=&quot;toc11&quot;&gt;Alternative Solutions&lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;p&gt;I chanced upon an interesting puzzle:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Find the smallest number that can be expressed as the sum of 5, 17, 563, 641 consecutive prime numbers, and is itself a prime number.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;img src=&quot;http://wordaligned.org/images/primes.png&quot; alt=&quot;Small primes graphic&quot; /&gt;


&lt;h3&gt;&lt;a href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#toc0&quot; name=&quot;tocinfinite-series-and-python&quot; id=&quot;tocinfinite-series-and-python&quot;&gt;Infinite series and Python&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The prime numbers famously form an infinite series and my first thought was to tackle this puzzle using Python iterators and generators. Courtesy of the Python Cookbook, I already had a couple of &lt;a href=&quot;http://www.onlamp.com/pub/a/python/excerpt/pythonckbk_chap1/index1.html?page=2&quot;&gt;useful&lt;/a&gt; &lt;a href=&quot;http://code.activestate.com/recipes/491285-iterator-merge/&quot;&gt;recipes&lt;/a&gt;:
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;def primes():
    '''Generate the sequence of prime numbers: 2, 3, 5 ... '''
    ....

def stream_merge(*ss):
    '''Merge a collection of sorted streams.
    
    Example: merge multiples of 2, 3, 5
    &amp;gt;&amp;gt;&amp;gt; from itertools import count, islice
    &amp;gt;&amp;gt;&amp;gt; def multiples(x): return (x * n for n in count(1))
    &amp;gt;&amp;gt;&amp;gt; s = stream_merge(multiples(2), multiples(3), multiples(5))
    &amp;gt;&amp;gt;&amp;gt; list(islice(s, 12))
    [2, 3, 4, 5, 6, 6, 8, 9, 10, 10, 12, 12]
    '''
    ....

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Both these functions merit a closer look for the cunning use they make of standard containers, but we&amp;#8217;ll defer this inspection until later. In passing, note that &lt;code&gt;stream_merge()&lt;/code&gt;&amp;#8217;s docstring suggests we might try using it as basis for &lt;code&gt;primes()&lt;/code&gt;:
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;&lt;p&gt;form the series of composite (non-prime) numbers by merging the streams formed by multiples of prime numbers; 
&lt;/p&gt;

 &lt;/li&gt;

 &lt;li&gt;&lt;p&gt;the primes remain when you remove these composites from the series of natural numbers.
&lt;/p&gt;

 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This scheme is hardly original &amp;#8212; it&amp;#8217;s a variant of &lt;a href=&quot;http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes&quot;&gt;Eratosthenes&amp;#8217; famous sieve&lt;/a&gt; &amp;#8212; but if you look carefully you&amp;#8217;ll notice the self-reference. Unfortunately recursive definitions of infinite series don&amp;#8217;t work well with Python&lt;a id=&quot;fn1link&quot; href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;, hence &lt;code&gt;primes()&lt;/code&gt; requires a little more finesse. We&amp;#8217;ll take a look at it later.
&lt;/p&gt;
&lt;p&gt;Moving on then, to solve the original puzzle we need a consecutive sum filter. This takes a stream of numbers and yields a stream of consecutive sums of these numbers:
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;def consecutive_sum(s, n):
    '''Generate the series of sums of n consecutive elements of s
    
    Example: 0, 1, 2, 3, 4 ... =&amp;gt; 0+1, 1+2, 2+3, 3+4, ...
    &amp;gt;&amp;gt;&amp;gt; from itertools import count, islice
    &amp;gt;&amp;gt;&amp;gt; list(islice(consecutive_sum(count(), 2), 10))
    [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
    '''
    lo, hi = itertools.tee(s)
    csum = sum(next(hi) for _ in range(n))
    while True:
        yield csum
        csum += next(hi) - next(lo)

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here we visualise the summed elements as lying within a sliding window: each time we slide the window an element gets added to the top and an element gets removed from the bottom, and we adjust &lt;code&gt;csum&lt;/code&gt; accordingly.
&lt;/p&gt;
&lt;p&gt;So, now we have:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     the series of prime numbers, &lt;code&gt;primes()&lt;/code&gt;
 &lt;/li&gt;

 &lt;li&gt;
     a &lt;code&gt;stream_merge()&lt;/code&gt; connector
 &lt;/li&gt;

 &lt;li&gt;
     a &lt;code&gt;consecutive_sum()&lt;/code&gt; filter
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The remaining stream adaptors come from the standard &lt;a href=&quot;http://docs.python.org/lib/itertools-functions.html&quot;&gt;itertools module&lt;/a&gt;. Note that the &lt;code&gt;stream_merge()&lt;/code&gt; works here since all the consecutive sum series are strictly increasing. Note also that the stream of prime numbers can be treated as &lt;code&gt;consecutive_sum(s=primes(), n=1)&lt;/code&gt;, handling the &amp;#8220;and is itself a prime number&amp;#8221; requirement.
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&amp;gt;&amp;gt;&amp;gt; lens = 1, 5, 17, 563, 641
&amp;gt;&amp;gt;&amp;gt; N = len(lens)
&amp;gt;&amp;gt;&amp;gt; from itertools import tee, groupby
&amp;gt;&amp;gt;&amp;gt; ps = tee(primes(), N)
&amp;gt;&amp;gt;&amp;gt; csums = [consecutive_sum(p, n) for p, n in zip(ps, lens)]
&amp;gt;&amp;gt;&amp;gt; solns = (n for n, g in groupby(stream_merge(*csums)) 
             if len(list(g)) == N)
&amp;gt;&amp;gt;&amp;gt; next(solns)
7002221

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here&amp;#8217;s a picture of how these stream tools link up to solve this particular puzzle. The great thing is that we can reconnect these same tools to solve a wide range of puzzles, and indeed more practical &lt;a href=&quot;http://www.dabeaz.com/generators/&quot;&gt;processing tasks&lt;/a&gt;. To use the common analogy, we direct data streams along pipes.
&lt;/p&gt;
&lt;img alt=&quot;Stream connections&quot; src=&quot;http://wordaligned.org/images/pipeline.png&quot; /&gt;


&lt;h3&gt;&lt;a href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#toc1&quot; name=&quot;tocinfinite-series-in-other-languages&quot; id=&quot;tocinfinite-series-in-other-languages&quot;&gt;Infinite series in Other Languages&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Python is the high-level language I find most convenient most of the time, which explains why I reached for it first. It&amp;#8217;s an increasingly popular language, which helps explain why it I didn&amp;#8217;t need to write the tricky parts of my solution from scratch: they&amp;#8217;d already been done. Python is also a language which makes compromises. Having used Python to find a solution to the puzzle I wondered if there wasn&amp;#8217;t some other language better suited to this kind of problem.
&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://haskell.org&quot;&gt;Haskell&lt;/a&gt; makes no compromises when it comes to functional programming. Its lazy evaluation and guilt-free recursion make it a perfect fit for this kind of puzzle &amp;#8212; but my Pythonic approach of teeing, filtering and merging streams made me think first of the Unix Shell. Now, I use Bash every day and page through its manual at least once a week. Scripting appeals and I&amp;#8217;m comfortable at the command line. How hard could it be to solve this puzzle using Bash? After all, I already knew the answer! Let&amp;#8217;s give it a go.
&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#toc2&quot; name=&quot;tocpartial-sums&quot; id=&quot;tocpartial-sums&quot;&gt;Partial sums.&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here&amp;#8217;s a simple shell function to generate partial sums. I&amp;#8217;ve used &lt;code&gt;awk&lt;/code&gt;, a little language I gave up on a long time ago in favour of more rounded scripting languages like Perl and then Python. Now I look at it again, it seems to fill a useful gap. Awk processes a file sequentially, applying pattern-action rules to each line, a processing pattern which I&amp;#8217;ve reinvented less cleanly many times. Despite my rediscovery of &lt;code&gt;awk&lt;/code&gt;, I&amp;#8217;ll be keeping its use strongly in check in what follows.
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ psum() { awk '{ print s += $1 }'; }

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Much like Perl, &lt;code&gt;awk&lt;/code&gt; guesses what you want to do. Here, it conjures the summation variable, &lt;code&gt;s&lt;/code&gt;, into existence, assigning it a default initial value of 0. (Good guess!) Since we&amp;#8217;re doing arithmetic &lt;code&gt;awk&lt;/code&gt; converts the first field of each input line into a number. We can test &lt;code&gt;psum&lt;/code&gt; by using &lt;code&gt;jot&lt;/code&gt; to generate the sequence 1, 2, 3, 4, 5 (on a Linux platform use &lt;code&gt;seq&lt;/code&gt; instead of &lt;code&gt;jot&lt;/code&gt;).
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ jot 5 | psum
1
3
6
10
15

&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;&lt;a href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#toc3&quot; name=&quot;tocconsecutive-sums&quot; id=&quot;tocconsecutive-sums&quot;&gt;Consecutive sums&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You may be wondering why we&amp;#8217;ve bothered creating this partial sum filter since it&amp;#8217;s the sums of consecutive elements we&amp;#8217;re after, rather than the sum of the series so far. Well, notice that if P[i] and P[i+n] are two elements from the series of partial sums of S, then their difference, P[i+n] - P[i], is the sum of the n consecutive elements from S.
&lt;/p&gt;
&lt;p&gt;So to form an n-element consecutive sum series we can tee the partial sums streams, advance one of these by n, then zip through them in parallel finding their differences. An example makes things clear:
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ mkfifo pipe
$ jot 5 | psum | tee pipe | tail -n +2 | paste - pipe
3       1
6       3
10      6
15      10
        15

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here, &lt;code&gt;jot 5&lt;/code&gt; generates the sequence 1, 2, 3, 4, 5, which &lt;code&gt;psum&lt;/code&gt; progressively accumulates to 1, 3, 6, 10, 15. We then &lt;code&gt;tee&lt;/code&gt; this partial sum series through two pipes: the first, &lt;code&gt;pipe&lt;/code&gt;, is an explicitly created named pipe created by &lt;code&gt;mkfifo&lt;/code&gt;, the second is implicitly created by the pipeline operator, &lt;code&gt;|&lt;/code&gt;. The remainder of the command line delays one series by one (note that &lt;code&gt;tail&lt;/code&gt; numbers lines from &lt;code&gt;1&lt;/code&gt;, not &lt;code&gt;0&lt;/code&gt;, so &lt;code&gt;tail -n +1&lt;/code&gt; is the identity filter) then pastes the two series back together&lt;a id=&quot;fn2link&quot; href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;By appending a single &lt;code&gt;awk&lt;/code&gt; action to the pipeline we get a consecutive sum series.
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ jot 5 | psum | tee pipe | tail -n +2 | paste - pipe | awk '{print $1 - $2}'
2
3
4
5
15

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The output 2, 3, 4, 5 is the series of consecutive sums of length 1 taken from the original series 1, 2, 3, 4, 5. The trailing 15 and the 1 missed from the start are edge case problems, and easily corrected. 
&lt;/p&gt;
&lt;p&gt;Accumulating an increasing series of numbers in order to find the differences between elements lying a given distance apart on this series isn&amp;#8217;t a very smart idea on a computer with a fixed word-size, but it&amp;#8217;s good to know (e.g.) that &lt;code&gt;awk&lt;/code&gt; doesn&amp;#8217;t stop counting at 32 bits.
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ let &quot;N=1&amp;lt;&amp;lt;32&quot; &amp;amp;&amp;amp; echo $N | tee &amp;gt;(awk '{print $1 * $1}')
4294967296
18446744073709551616

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Exactly if and when awk stops counting, I&amp;#8217;m not sure. The documentation doesn&amp;#8217;t say and I haven&amp;#8217;t looked at the source code.
&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#toc4&quot; name=&quot;tocbug-fixes&quot; id=&quot;tocbug-fixes&quot;&gt;Bug Fixes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Let&amp;#8217;s capture these tiny functions and name them. Here, then, are revised &lt;code&gt;psum()&lt;/code&gt; and &lt;code&gt;sdiff()&lt;/code&gt; filters. The edge case problems should now be fixed.
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ psum()  { awk 'BEGIN { print 0 }{print s += $1 }'; }
$ delay() { let &quot;n = $1 + 1&quot; &amp;amp;&amp;amp; tail +$n; } 
$ sdiff() { mkfifo p.$1 &amp;amp;&amp;amp; tee p.$1 | delay $1 | paste - p.$1 | \
            awk 'NF == 2 {print $1 - $2 }'; }

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;A quick test:
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ jot 5 | psum | sdiff 3
6
9
12

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The output is, as expected, the series of sums of consecutive triples taken from 1, 2, 3, 4, 5 (1+2+3, 2+3+4, 3+4+5).
&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a more pernicious bug, though. &lt;code&gt;Sdiff&lt;/code&gt; can&amp;#8217;t handle an infinite series, so it&amp;#8217;s of limited use as a pipeline tool. For example, if we stream it the series 0, 1, 2, &amp;#8230; (generated here as the partial sums of the series 1, 1, 1, &amp;#8230;) nothing gets output and we have to interrupt the process.
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;# This command appears to hang
$ yes 1 | psum | sdiff 1
^C

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I found a way to work around this problem by redirecting the teed stream to a subshell which itself redirects into a named pipe.
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ sdiff() { mkfifo p.$1 &amp;amp;&amp;amp; tee &amp;gt;(delay $1 &amp;gt;p.$1) | paste - p.$1 | \
            awk 'NF == 2 {print $2 - $1 }'; }
$ yes 1 | psum | sdiff 1
1
1
1
1
^C

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;As you can see this gets data flowing once again, but I&amp;#8217;m already out of my comfort zone: I couldn&amp;#8217;t tell you why exactly this works but the preceding version doesn&amp;#8217;t.
&lt;/p&gt;
&lt;p&gt;(You can of course write a consecutive sum function directly in &lt;code&gt;awk&lt;/code&gt;: here&amp;#8217;s a version which leans hard on the &amp;#8220;do what I mean&amp;#8221; style of programming, accessing and deleting array entries which haven&amp;#8217;t even been set.
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;csum() { 
awk -v n=$1 
'{lo = NR - n; w[NR] = $1; s += $1 - w[lo]; delete w[lo]}' \
'NR &amp;gt;= n {print s}'
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;For this article I&amp;#8217;ve avoided pushing the consecutive sum job &lt;code&gt;awk&lt;/code&gt;&amp;#8217;s way because I&amp;#8217;m more interested in figuring out how this pipe-connection works for non-trivial cases. Any advice would be welcome!)
&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#toc5&quot; name=&quot;tocmerging-streams&quot; id=&quot;tocmerging-streams&quot;&gt;Merging Streams&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Unix shell merges streams rather more succinctly than Python. &lt;code&gt;Sort -m&lt;/code&gt; does the job directly. Note that a standard &lt;code&gt;sort&lt;/code&gt; cannot yield any output until all its inputs are exhausted, since the final input item might turn out to be the one which should appear first in the output. Merge sort, &lt;code&gt;sort -m&lt;/code&gt; can and does produce output without delay&lt;a id=&quot;fn3link&quot; href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;.
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ yes | sort
^C
$ yes | sort -m
y
y
y
y
y
^C

&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;&lt;a href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#toc6&quot; name=&quot;tocgenerating-primes&quot; id=&quot;tocgenerating-primes&quot;&gt;Generating Primes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;No doubt it&amp;#8217;s possible to generate the infinite series of prime numbers using native Bash code, but I chose to reuse the &lt;a href=&quot;http://www.onlamp.com/pub/a/python/excerpt/pythonckbk_chap1/index1.html?page=2&quot;&gt;Python Cookbook recipe&lt;/a&gt; for the job.
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;primes&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;#!/usr/bin/env python
import itertools

def primes():
    '''Generate the prime number series: 2, 3, 5 ... '''
    D = {}
    for n in itertools.count(2):
        p = D.pop(n, None)
        if p is None:
            yield n
            D[n * n] = n
        else:
            x = n + p
            while x in D:
                x += p
            D[x] = p

for p in primes():
    print(p)

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This is a subtle little program which makes clever use of Python&amp;#8217;s native hashed array container, the dictionary. In this case dictionary values are the primes less than &lt;code&gt;n&lt;/code&gt; and the keys are composite multiples of these primes. The loop invariant, roughly speaking, is that the dictionary values are the primes less than &lt;code&gt;n&lt;/code&gt;, and the corresponding keys are the lowest multiples of these primes greater than or equal to &lt;code&gt;n&lt;/code&gt;. It&amp;#8217;s a lazy, recursion-free variant of Eratosthenes&amp;#8217; sieve.
&lt;/p&gt;
&lt;p&gt;For the purposes of this article the important things about this program are:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     it generates an infinite series of numbers to standard output&lt;a id=&quot;fn4link&quot; href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;, making it a good source for a shell pipeline;
 &lt;/li&gt;

 &lt;li&gt;
     by making it executable and adding the usual shebang incantation, we can invoke this Python program seamlessly from the shell.
 &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#toc7&quot; name=&quot;tocpipe-connection&quot; id=&quot;tocpipe-connection&quot;&gt;Pipe Connection&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Recall the original puzzle:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Find the smallest number that can be expressed as the sum of 5, 17, 563, 641 consecutive prime numbers, and is itself a prime number.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;First, let&amp;#8217;s check the connections by solving a simpler problem which we can manually verify: to find prime numbers which are also the sum of 2 consecutive primes. As we noted before, this is the same as finding primes numbers which are the consecutive sums of 1 and 2 primes.
&lt;/p&gt;
&lt;p&gt;In one shell window we create a couple of named pipes, &lt;code&gt;c.1&lt;/code&gt; and &lt;code&gt;c.2&lt;/code&gt;, which we&amp;#8217;ll use to stream the consecutive sum series of 1 and 2 primes respectively. The results series comprises the duplicates when we merge these pipes.
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;Shell 1&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ mkfifo c.{1,2}
$ sort -mn c.{1,2} | uniq -d

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In another shell window, stream data into c.1 and c.2:
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;Shell 2&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ for i in 1 2; do (primes | psum | sdiff $i &amp;gt; c.$i) &amp;amp; done

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In the first window we see the single number &lt;code&gt;5&lt;/code&gt;, which is the first and only prime number equal to the sum of two consecutive primes.
&lt;/p&gt;
&lt;p&gt;Prime numbers equal to the sum of three consecutive primes are more interesting. In each shell window recall the previous commands and switch the 2s to 3s (a simple command history recall and edit, &lt;code&gt;^2^3^&lt;/code&gt;, does the trick). The merged output now looks like this:
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ sort -mn c.1 c.3 | uniq -d
23
31
41
...

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We can check the first few values:
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;23 = 5 + 7 + 11
31 = 7 + 11 + 13
41 = 11 + 13 + 17

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;At this point we&amp;#8217;re confident enough to give the actual puzzle a try. Start up the solutions stream.
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ mkfifo c.{1,5,17,563,641}
$ sort -mn c.{1,5,17,563,641} | uniq -c | grep &quot;5 &quot;

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here, we use a standard &lt;a href=&quot;http://wordaligned.org/articles/shell-script-sets&quot;&gt;shell script set intersection&lt;/a&gt; recipe: &lt;code&gt;uniq -c&lt;/code&gt; groups and counts repeated elements, and the &lt;code&gt;grep&lt;/code&gt; pattern matches those numbers common to all five input streams.
&lt;/p&gt;
&lt;p&gt;Now we can kick off the processes which will feed into the consecutive sum streams, which &lt;code&gt;sort&lt;/code&gt; is waiting on.
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ for i in 1 5 17 563 641; do (primes | psum | sdiff $i &amp;gt; c.$i) &amp;amp; done

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Sure enough, after about 15 seconds elapsed time&lt;a id=&quot;fn5link&quot; href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;, out pops the result:
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ sort -mn c.{1,5,17,563,641} | uniq -c | grep &quot;5 &quot;
    5 7002221

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;15 seconds seems an eternity for arithmetic on a modern computer (you could start up a word processor in less time!), and you might be inclined to blame the overhead of all those processes, files, large numbers, etc. In fact it took around 6 seconds for the Python program simply to generate prime numbers up to 7002221, and my pure Python solution ran in 9 seconds.
&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#toc8&quot; name=&quot;tocpipe-teeing&quot; id=&quot;tocpipe-teeing&quot;&gt;Pipe Teeing&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;5 &amp;times; primes | sum&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ for i in 1 5 17 563 641; do (primes | psum | sdiff $i &amp;gt; c.$i) &amp;amp; done

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This shell solution works but I&amp;#8217;m not happy with it. The source loop spawns 5 separate instances of &lt;code&gt;primes&lt;/code&gt; and pipes them all through &lt;code&gt;psum&lt;/code&gt;. I don&amp;#8217;t care about giving the computer more to do than necessary, but I do wish I could figure out the details of this dataflow plumbing. What I&amp;#8217;d &lt;em&gt;like&lt;/em&gt; to do is split the output of &lt;code&gt;primes | psum&lt;/code&gt; five ways, connecting each resulting stream to an instance of &lt;code&gt;sdiff&lt;/code&gt;. Something &lt;em&gt;like&lt;/em&gt; the following:
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;This doesn&amp;#8217;t work&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ mkfifo t.{1,5,17,563,641}
$ primes | psum | tee t.{1,5,17,563,641} &amp;gt;/dev/null &amp;amp;
$ for i in 1 5 17 563 641; do (sdiff $i &amp;lt; t.$i &amp;gt; c.$i) &amp;amp; done
$ sort -mn c.{1,5,17,563,641} | uniq -c | grep &quot; 5 &quot;

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;When I run this sequence of commands nothing happens: by which I mean something blocks and nothing gets through to &lt;code&gt;sort&lt;/code&gt;. Again, I&amp;#8217;m out of my depth and not sure what&amp;#8217;s going on &amp;#8212; any advice would be welcome. The shell makes it all too easy to experiment, and I reckon I&amp;#8217;ve already exhausted the obvious permutations of wax, tac, crunch, wane, amp, zap, tic, pretzel.
&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#toc9&quot; name=&quot;tocportability&quot; id=&quot;tocportability&quot;&gt;Portability&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One of the most convenient things about Python is its portability. I don&amp;#8217;t mean &amp;#8220;portable so long as you conform to the language standard&amp;#8221; or &amp;#8220;portable if you stick to a subset of the language&amp;#8221; &amp;#8212; I mean that a Python program works whatever platform I use without me having to worry about it. In fact I&amp;#8217;m guilty of taking this portability for granted, and was surprised to discover a program of mine failed on Windows (the &lt;a href=&quot;http://docs.python.org/lib/module-fcntl.html&quot;&gt;fcntl module&lt;/a&gt; is Unix only).
&lt;/p&gt;
&lt;p&gt;Non-portability put me off the Unix shell when I first encountered it: there seemed too many details, too many platform differences &amp;#8212; which shell are you using? which extensions? which implementation of the core utilities, etc, etc? Readily available and well-written documentation didn&amp;#8217;t help much here: generally I want the shell to just do what I mean, which is why I switched so happily to Perl when I discovered it.
&lt;/p&gt;
&lt;p&gt;Since then this situation has, for me, improved in many ways. Non-Unix platforms are declining as are the different flavours of Unix. Bash seems to have become the standard shell of choice and Cygwin gets better all the time. GNU coreutils predominate. As a consequence I&amp;#8217;ve forgotten almost all the Perl I ever knew and am actively rediscovering the Unix shell.
&lt;/p&gt;
&lt;p&gt;Writing this article, though, I was reminded of the platform dependent behaviour which used to discourage me. On a Linux platform close to hand I had to use &lt;code&gt;seq&lt;/code&gt; instead of &lt;code&gt;jot&lt;/code&gt;, and &lt;code&gt;awk&lt;/code&gt; formatted large integers in a scientific form with a loss of precision.
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;Loss of precision&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ echo '10000000001 0' | awk '{print $1 - $2}'
1e+10

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;On OS X the same command outputs 10000000001. I couldn&amp;#8217;t tell you which implementation is more correct. The fix is to explicitly format these numbers as decimal integers, but the danger is that the shell silently swallows these discrepancies and you&amp;#8217;ve got a portability problem you don&amp;#8217;t even notice.
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;Precision recovered&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ echo '10000000001 0' | awk '{printf &quot;%d\n&quot;, $1 - $2}'
10000000001

&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;&lt;a href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#toc10&quot; name=&quot;tocstream-merge&quot; id=&quot;tocstream-merge&quot;&gt;Stream Merge&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I mentioned &lt;code&gt;stream_merge()&lt;/code&gt; at the start of this article, a general purpose function written by Raymond Hettinger which I originally found in the Python Cookbook. As with the prime number generator, you might imagine the merge algorithm to be recursively defined:
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;&lt;p&gt;to merge a pair of streams, take items from the first which are less than the head of the second, then swap;
&lt;/p&gt;

 &lt;/li&gt;

 &lt;li&gt;&lt;p&gt;to merge N streams, merge the first stream with the merged (N-1) rest.
&lt;/p&gt;

 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Again the Python solution does it differently, this time using a heap as a priority queue of items from the input streams. It&amp;#8217;s ingenious and efficient. Look how easy it is in Python to shunt functions and pairs in and out of queues.
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;from heapq import heapify, heappop, heapreplace

def stream_merge(*ss):
    '''Merge a collection of sorted streams.'''
    pqueue = []
    for i in map(iter, ss):
        try:
            pqueue.append((i.next(), i.next))
        except StopIteration:
            pass
    heapify(pqueue)
    while pqueue:
        val, it = pqueue[0]
        yield val
        try:
            heapreplace(pqueue, (it(), it))
        except StopIteration:
            heappop(pqueue)

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;A more sophisticated version of this code has made it into the Python standard library, where it goes by the name of &lt;a href=&quot;http://docs.python.org/dev/library/heapq.html#heapq.merge&quot;&gt;heapq.merge&lt;/a&gt; (I wonder why it wasn&amp;#8217;t filed in &lt;a href=&quot;http://docs.python.org/lib/itertools-functions.html&quot;&gt;itertools&lt;/a&gt;?)
&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#toc11&quot; name=&quot;tocalternative-solutions&quot; id=&quot;tocalternative-solutions&quot;&gt;Alternative Solutions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As usual Haskell wins the elegance award, so I&amp;#8217;ll quote in full a solution built without resorting to cookbookery which produces the (correct!) answer in 20 seconds.
&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;module Main where

import List

isPrime x = all (\i -&amp;gt; 0/=x`mod`i) $ takeWhile (\i -&amp;gt; i*i &amp;lt;= x) primes

primes = 2:filter (\x -&amp;gt; isPrime x) [3..]

cplist n = map (sum . take n) (tails primes)

meet (x:xs) (y:ys) | x &amp;lt; y = meet xs (y:ys)
                   | y &amp;lt; x = meet (x:xs) ys
                   | x == y =  x:meet xs ys

main = print $ head $ \
(primes `meet` cplist 5) `meet` (cplist 17 `meet` cplist 563) `meet` cplist 641

&lt;/pre&gt;

&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a id=&quot;fn1&quot; href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#fn1link&quot;&gt;[1]&lt;/a&gt; CPython, more precisely &amp;#8212; I don&amp;#8217;t think anything in the Python language itself prohibits tail recursion. Even using CPython, yet another &lt;a href=&quot;http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/496691&quot;&gt;recipe&lt;/a&gt; from the online Python Cookbook explores the idea of an &lt;code&gt;@tail_recursion&lt;/code&gt; decorator.
&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;fn2&quot; href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#fn2link&quot;&gt;[2]&lt;/a&gt; &lt;code&gt;Tail&lt;/code&gt; is more commonly used to yield a fixed number of lines from the end of the file: by prefixing the line count argument with a &lt;code&gt;+&lt;/code&gt; sign, it skips lines from the head of the file. The GNU version of &lt;code&gt;head&lt;/code&gt; can similarly be used with a &lt;code&gt;-&lt;/code&gt; prefix to skip lines at the tail of a file. The notation is {compact,powerful,subtle,implementation dependent}.
&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;fn3&quot; href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#fn3link&quot;&gt;[3]&lt;/a&gt; &lt;code&gt;Sort -m&lt;/code&gt; is a sort which doesn&amp;#8217;t really sort &amp;#8212; its inputs should already be sorted &amp;#8212; rather like the &lt;code&gt;+n&lt;/code&gt; option turning &lt;code&gt;tail&lt;/code&gt; on its head.
&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;fn4&quot; href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#fn4link&quot;&gt;[4]&lt;/a&gt; The series is infinite in theory only: at time &lt;code&gt;n&lt;/code&gt; the number of items in the &lt;code&gt;has_prime_factors&lt;/code&gt; dictionary equals the number of primes less than &lt;code&gt;n&lt;/code&gt;, and each key in this dictionary is larger than &lt;code&gt;n&lt;/code&gt;. So resource use increases steadily as &lt;code&gt;n&lt;/code&gt; increases.
&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;fn5&quot; href=&quot;http://wordaligned.org/articles/python-streams-vs-unix-pipes#fn5link&quot;&gt;[5]&lt;/a&gt; I used a MacBook laptop used to run these scripts. 
&lt;/p&gt;
&lt;pre&gt;
  Model Name:               MacBook
  Model Identifier:         MacBook1,1
  Processor Name:           Intel Core Duo
  Processor Speed:          2 GHz
  Number Of Processors:     1
  Total Number Of Cores:    2
  L2 Cache (per processor): 2 MB
  Memory:                   2 GB
  Bus Speed:                667 MHz
&lt;/pre&gt;</description>
	<pubDate>Thu, 28 Jul 2016 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Caktus Consulting Group: How I Built a Power Debugger (PyCon 2016 Must-See Talk: 3/6)</title>
	<guid>https://www.caktusgroup.com/blog/2016/07/27/how-i-built-power-debugger-pycon-2016-must-see-talk-36/</guid>
	<link>https://www.caktusgroup.com/blog/2016/07/27/how-i-built-power-debugger-pycon-2016-must-see-talk-36/</link>
	<description>&lt;p&gt;&lt;em&gt;Part three of six in our annual &lt;a href=&quot;https://www.caktusgroup.com/blog/tags/PyCon%20Must%20See%20Series/&quot;&gt;PyCon Must-See Series&lt;/a&gt;, a weekly highlight of talks our staff especially loved at PyCon. With so many fantastic talks, it’s hard to know where to start, so here’s our short list.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;While at PyCon 2016, I really enjoyed Doug Hellmann’s talk, “How I built a power debugger out of the standard library and things I found on the internet” (video below). It's listed as a novice talk but anyone can learn from this talk. Doug talked about the process of creating this project more than the project itself. He talked about his original idea, his motivations, and how he worked in pieces towards his goal. His approach and attitude were refreshing, including talking about places that he struggled and now how long the process took. A beautiful glimpse into the mind of a very smart, creative, and humble developer.&lt;/p&gt;


&lt;p&gt;&lt;br /&gt;More in the annual &lt;a href=&quot;https://www.caktusgroup.com/blog/tags/PyCon%20Must%20See%20Series/&quot;&gt;PyCon Must-See Talks Series&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Wed, 27 Jul 2016 14:15:27 +0000</pubDate>
</item>
<item>
	<title>Ned Batchelder: Coverage.py 4.2</title>
	<guid>http://nedbatchelder.com//blog/201607/coveragepy_42.html</guid>
	<link>http://nedbatchelder.com//blog/201607/coveragepy_42.html</link>
	<description>&lt;p&gt;&lt;a href=&quot;https://pypi.python.org/pypi/coverage/4.2&quot;&gt;Coverage.py 4.2&lt;/a&gt;
    is done.&lt;/p&gt;&lt;p&gt;As I mentioned in the &lt;a href=&quot;http://nedbatchelder.com/blog/201607/coveragepy_42_beta_1.html&quot;&gt;beta 1 announcement&lt;/a&gt;, this contains work from the sprint at PyCon
    2016 in Portland.&lt;/p&gt;&lt;p&gt;The biggest change since 4.1 is the only incompatible change.  The
    &quot;coverage combine&quot; command now will ignore an existing .coverage data file,
    rather than appending to it as it used to do.  This new behavior makes more
    sense to people, and matches how &quot;coverage run&quot; works.  If you've ever seen
    (or written!) a tox.ini file with an explicit coverage-clean step, you
    won't have to any more. There's also a new &quot;--append&quot; option on &quot;coverage
    combine&quot;, so you can get the old behavior if you want it.&lt;/p&gt;&lt;p&gt;The multiprocessing support continues to get the polish it deserves:&lt;/p&gt;&lt;ul&gt;

    &lt;li&gt;Now the concurrency option can be multi-valued, so you can measure
        programs that use multiprocessing and another library like gevent.&lt;/li&gt;

    &lt;li&gt;Options on the command line weren't being passed to multiprocessing
        subprocesses.  Now they still aren't, but instead of failing silently,
        you'll get an error explaining the situation.&lt;/li&gt;

    &lt;li&gt;If you're using a custom-named configuration file, multiprocessing processes
        now will use that same file, so that all the processes will be measured the same.&lt;/li&gt;

    &lt;li&gt;Enabling multiprocessing support now also enables parallel measurement,
        since there will be subprocesses.  This reduces the possibility for error
        when configuring coverage.py.&lt;/li&gt;

&lt;/ul&gt;&lt;p&gt;Finally, the text report can be sorted by columns as you wish, making it more
    convenient.&lt;/p&gt;&lt;p&gt;The &lt;a href=&quot;https://bitbucket.org/ned/coveragepy/src/tip/CHANGES.rst&quot;&gt;complete
    change history&lt;/a&gt; is in the source.&lt;/p&gt;</description>
	<pubDate>Wed, 27 Jul 2016 13:35:00 +0000</pubDate>
</item>
<item>
	<title>PyCon Australia: Announcing keynote speaker Damien George</title>
	<guid>http://2016.pycon-au.org/media/news/50</guid>
	<link>http://2016.pycon-au.org/media/news/50</link>
	<description>&lt;img src=&quot;https://2016.pycon-au.org/images/damiengeorge.jpg&quot; height=&quot;488px&quot; alt=&quot;Damien George&quot; /&gt;
&lt;p&gt;
The PyCon Australia team is quietly ecstatic to announce that our second keynote speaker will be &lt;b&gt;Damien George&lt;/b&gt;.
&lt;/p&gt;&lt;p&gt;
Damien is the creator of MicroPython and ran two very fruitful Kickstarter campaigns to build a community around this microcontroller language. He has built a successful company based on MicroPython and the pyboard, brought it to makers, teachers and industry developers around the world, worked with the BBC on the micro:bit project, and embarked on projects with the European Space Agency to bring MicroPython into space.
&lt;/p&gt;&lt;p&gt;
“Damien’s work, and continuing community efforts, have been an important part of the Python ecosystem,” said Richard Jones, conference chair. “I’m especially excited to hear Damien talk through the journey of dreaming up and implementing a whole new Python just for the smallest possible deployments, on microcontrollers, and where that journey has taken him.”
&lt;/p&gt;&lt;p&gt;
We are fascinated to hear Damien’s keynote address and hear about MicroPython in our macro universe. Will you be there?
&lt;/p&gt;&lt;p&gt;
Registrations for PyCon Australia 2016 are already open and tickets are almost sold out. &lt;a href=&quot;https://2016.pycon-au.org/register/prices&quot;&gt;Book your conference ticket today!&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 27 Jul 2016 13:21:15 +0000</pubDate>
</item>
<item>
	<title>Mike Driscoll: Python: Visualization with Bokeh</title>
	<guid>http://www.blog.pythonlibrary.org/2016/07/27/python-visualization-with-bokeh/</guid>
	<link>http://www.blog.pythonlibrary.org/2016/07/27/python-visualization-with-bokeh/</link>
	<description>&lt;div class=&quot;pf-content&quot;&gt;&lt;p&gt;The &lt;a href=&quot;http://bokeh.pydata.org/en/latest/&quot; target=&quot;_blank&quot;&gt;Bokeh package&lt;/a&gt; is an interactive visualization library that uses web browsers for its presentation. Its goal is to provide graphics in the vein of D3.js that look elegant and are easy to construct. Bokeh supports large and streaming datasets. You will probably be using this library for creating plots / graphs. One of its primary competitors seems to be &lt;a href=&quot;https://plot.ly/&quot; target=&quot;_blank&quot;&gt;Plotly&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: This will not be an in-depth tutorial on the Bokeh library as the number of different graphs and visualizations it is capable of is quite large. Instead, the aim of the article is to give you a taste of what this interesting library can do.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s take a moment and get it installed. The easiest way to do so is to use pip or conda. Here&amp;#8217;s how you can use pip: &lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;pip install bokeh&lt;/pre&gt;
&lt;p&gt;This will install Bokeh and all its dependencies. You may want to install Bokeh into a virtualenv because of this, but that&amp;#8217;s up to you. Now let&amp;#8217;s check out a simple example. Save the following code into a file with whatever name you deem appropriate.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;more-5689&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;from&lt;/span&gt; bokeh.&lt;span&gt;plotting&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; figure, output_file, show
&amp;nbsp;
output_file&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;/path/to/test.html&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
x = &lt;span&gt;range&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;6&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
y = &lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;7&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;6&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;
plot = figure&lt;span&gt;&amp;#40;&lt;/span&gt;title=&lt;span&gt;'Line example'&lt;/span&gt;, x_axis_label=&lt;span&gt;'x'&lt;/span&gt;, y_axis_label=&lt;span&gt;'y'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
plot.&lt;span&gt;line&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;x, y, legend=&lt;span&gt;'Test'&lt;/span&gt;, line_width=&lt;span&gt;4&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
show&lt;span&gt;&amp;#40;&lt;/span&gt;plot&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Here we just import a few items from the Bokeh library. We just tell it where to save the output. You will note that the output is HTML. Then we create some values for the x and y axises so we can create the plot. Then we actually create the figure object and give it a title and labels for the two axises. Finally we plot the line, give it a legend and line width and show the plot. The show command will actually open your plot in your default browser. You should end up seeing something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.blog.pythonlibrary.org/wp-content/uploads/2016/07/bokeh_line.png&quot; alt=&quot;bokeh_line&quot; width=&quot;615&quot; height=&quot;584&quot; class=&quot;aligncenter size-full wp-image-5703&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Bokeh also supports the Jupyter Notebook with the only change being that you will need to use &lt;strong&gt;output_notebook&lt;/strong&gt; instead of &lt;strong&gt;output_file&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The Bokeh &lt;a href=&quot;http://bokeh.pydata.org/en/latest/docs/user_guide/quickstart.html#userguide-quickstart&quot;&gt;quick start guide&lt;/a&gt; has a neat example of a series of sine waves on a grid plot. I reduced the example down a bit to just one sine wave. Note that you will need NumPy installed for the following example to work correctly:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;import&lt;/span&gt; numpy as np
&amp;nbsp;
&lt;span&gt;from&lt;/span&gt; bokeh.&lt;span&gt;layouts&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; gridplot
&lt;span&gt;from&lt;/span&gt; bokeh.&lt;span&gt;plotting&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; figure, output_file, show
&amp;nbsp;
N = &lt;span&gt;100&lt;/span&gt;
x = np.&lt;span&gt;linspace&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;np.&lt;span&gt;pi&lt;/span&gt;, N&lt;span&gt;&amp;#41;&lt;/span&gt;
y0 = np.&lt;span&gt;sin&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;x&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
output_file&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'sinewave.html'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
sine = figure&lt;span&gt;&amp;#40;&lt;/span&gt;width=&lt;span&gt;500&lt;/span&gt;, plot_height=&lt;span&gt;500&lt;/span&gt;, title=&lt;span&gt;'Sine'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
sine.&lt;span&gt;circle&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;x, y0, size=&lt;span&gt;10&lt;/span&gt;, color=&lt;span&gt;&amp;quot;navy&amp;quot;&lt;/span&gt;, alpha=&lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
p = gridplot&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;sine&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;, toolbar_location=&lt;span&gt;None&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
show&lt;span&gt;&amp;#40;&lt;/span&gt;p&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;The main difference between this example and the previous one is that we are using NumPy to generate the data points and we&amp;#8217;re putting our figure inside of a &lt;strong&gt;gridplot&lt;/strong&gt; instead of just drawing the figure itself. When you run this code, you should end up with a plot that looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.blog.pythonlibrary.org/wp-content/uploads/2016/07/bokeh_sine_wave.png&quot; alt=&quot;bokeh_sine_wave&quot; width=&quot;536&quot; height=&quot;502&quot; class=&quot;aligncenter size-full wp-image-5740&quot; /&gt;&lt;/p&gt;
&lt;p&gt;If you don&amp;#8217;t like circles, then you&amp;#8217;ll be happy to know that Bokeh supports other shapes, such as square, triangle and several others.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Wrapping Up&lt;/h3&gt;
&lt;p&gt;
&lt;p&gt;The Bokeh project is really interesting and provides a simple, easy-to-use API for creating graphs, plots and other visualizations of your data. The documentation is quite well put together and includes lots of examples that showcase what this package can do for you. It is well worth just skimming the documentation so you can see what some of the other graphs look like and how short the code examples are that generate such nice results. My only gripe is that Bokeh doesn&amp;#8217;t have a way to save an image file programmatically. This appears to be a long term &lt;a href=&quot;https://github.com/bokeh/bokeh/issues/538&quot; target=&quot;_blank&quot;&gt;bug&lt;/a&gt; that they have been trying to fix for a couple of years now. Hopefully they find a way to support that feature soon. Otherwise, I thought it was really cool! &lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 27 Jul 2016 12:30:34 +0000</pubDate>
</item>
<item>
	<title>Python Software Foundation: PyGotham: a Python Conference at the United Nations</title>
	<guid>http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/yPNa1QUjj0Y/pygotham-python-conference-at-united.html</guid>
	<link>http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/yPNa1QUjj0Y/pygotham-python-conference-at-united.html</link>
	<description>&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot;&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-nHQ1ck3PsAg/V5ff0TmhjDI/AAAAAAAAAjM/-peGuemgkugEIsI9uh5iHXFt7x93OCoKACLcB/s1600/North_by_Northwest_movie_trailer_screenshot_%252813%2529.jpg&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;236&quot; src=&quot;https://4.bp.blogspot.com/-nHQ1ck3PsAg/V5ff0TmhjDI/AAAAAAAAAjM/-peGuemgkugEIsI9uh5iHXFt7x93OCoKACLcB/s640/North_by_Northwest_movie_trailer_screenshot_%252813%2529.jpg&quot; title=&quot;Image Description: Swooping white building in the foreground with curved roof, with slate-blue rectangular skyscraper in the background. 60s-era slightly grainy color image, vintage taxis are seen small in the foreground.&quot; width=&quot;420&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;tr-caption&quot;&gt;&lt;a href=&quot;https://commons.wikimedia.org/wiki/File:North_by_Northwest_movie_trailer_screenshot_(13).jpg&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;i&gt;United Nations Headquarters&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br /&gt;
I've never had to take my belt off to get into a Python conference before.&lt;br /&gt;
&lt;br /&gt;
This is the fifth year I attended PyGotham, here in New York City. In past years we held the conference in a standard convention center or, memorably, on a couple boats moored in the Hudson River. But this year PyGotham gathered in the United Nations.&lt;br /&gt;
&lt;br /&gt;
What first struck me about the new venue was its vigilant security, of course. Guards in blue uniforms sent us through metal detectors and x-rayed our bags. Once I got through security and put my belt on, I entered the UN Conference Building. The lobby is full of inspiring posters about anti-poverty summits, scientific committees, global peace initiatives. In the conference rooms themselves every seat has its own microphone and an earpiece for simultaneous translation. Sound-proof booths surround and overlook each room, with signs in their thick glass windows saying &quot;English&quot;, &quot;French&quot;, &quot;German&quot;. Along a hallway stands old-fashioned gray communications gear. There are rows of plug boards, analog meters, tape-to-tape reels, cathode ray tube screens surrounded by switches, buttons, and dials.&lt;br /&gt;
&lt;br /&gt;
I turned my attention from the conference environment to the people there, and I was struck by a second novel impression: demographics! I've come to expect Python conferences to include many women and people of color, but at &lt;a href=&quot;https://2016.pygotham.org/&quot;&gt;PyGotham 2016&lt;/a&gt;&amp;nbsp;women of color were particularly well-represented, and there were teenage coders and even a few pre-teens.&lt;br /&gt;
&lt;br /&gt;
PyGotham is a production of &lt;a href=&quot;http://bigapplepy.org/&quot;&gt;Big Apple Py&lt;/a&gt;. Our spot in the UN is the outcome of a new partnership: PyGotham has joined&amp;nbsp;&lt;a href=&quot;http://opencamps.org/about.html&quot;&gt;Open Camp&lt;/a&gt;, a giant UN-sponsored series of technology conferences that focus on technology's humanitarian uses.&lt;br /&gt;
&lt;br /&gt;
I interviewed Big Apple Py's Jon Banafato, and Open Camp coordinator Forest Mars, to learn more about why this PyGotham was so different from the past.&lt;br /&gt;
&lt;br /&gt;
&lt;hr /&gt;
&lt;br /&gt;
PyGotham started in 2011 as a conference for the New York City Python community. The conference has grown a lot since then. This year, we had over 500 attendees from around the world, but PyGotham still remains a tight-knit community of New Yorkers at heart.&lt;br /&gt;
&lt;br /&gt;
The organizing team strives for a diverse speaker list and audience. This year’s conference would not have been the same without the help of the Python Software Foundation, who funded 50 diversity scholarship tickets.&lt;br /&gt;
&lt;br /&gt;
A half-dozen community groups helped us get tickets into the right hands: &lt;a href=&quot;http://www.meetup.com/NYC-PyLadies/&quot;&gt;NYC PyLadies&lt;/a&gt;, &lt;a href=&quot;https://www.girldevelopit.com/&quot;&gt;Girl Develop It&lt;/a&gt;, &lt;a href=&quot;https://djangogirls.org/nyc/&quot;&gt;Django Girls NYC&lt;/a&gt;, &lt;a href=&quot;http://www.writespeakcode.com/&quot;&gt;Write Speak Code&lt;/a&gt;, and &lt;a href=&quot;http://wimlds.org/&quot;&gt;Women in Machine Learning and Data Science&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;
Working with Open Camps and the United Nations this year let us make 2016 the most affordable and largest PyGotham to date. We hope this better accomplishes our goals of promoting open source software and making Python education more accessible to all.&lt;br /&gt;
&lt;br /&gt;
— Jon Banafato&lt;br /&gt;
&lt;br /&gt;
&lt;hr /&gt;
&lt;br /&gt;
Open Camp is a community-organized open source technology conference, which also happens to be one of the largest open source conferences in the world. This year (our 5th) nearly 6,000 individuals attended over the course of 10 days.&lt;br /&gt;
&lt;br /&gt;
Open Camps is &quot;mission-driven&quot;: we're distinguished from other conferences by our focus on how technology is used, its impact on the world, and its alignment with humanitarian ideals. Rather than proscribe, however, Open Camps provides a forum where these topics can be discussed.&lt;br /&gt;
&lt;br /&gt;
At the start we were on the campuses of Columbia University and NYU. For the past three years we've been graciously hosted by the United Nations at their world headquarters in New York. &lt;a href=&quot;http://www.un.org/press/en/2016/pi2160.doc.htm&quot; target=&quot;_blank&quot;&gt;Open Camps at the UN is a collaboration&lt;/a&gt; of the United Nations Open Source Innovation Initiative (Unite Open Source), the Open Camps organizing team and dozens of open-source communities.&lt;br /&gt;
&lt;br /&gt;
Open Camps is dedicated to the principles of inclusiveness and diversity, and has always been free for anyone to attend. Our 2013 theme was &quot;Get Off the Island&quot;—we wanted to combat isolationism in communities of technology. Our first year at the UN we chose the theme &quot;Women in Technology&quot; featuring two keynote addresses by influential women in tech, and a panel discussion.&lt;br /&gt;
&lt;br /&gt;
Since the beginning, we've included the &quot;Next Generation&quot; initiative for youth in technology. We work with &lt;a href=&quot;http://www.csnyc.org/&quot;&gt;CSNYC&lt;/a&gt; and &lt;a href=&quot;https://www.scripted.org/&quot;&gt;ScriptEd&lt;/a&gt;. Open Camp speakers have been as young as 11 years old. The Next Gen program is also ongoing, and we have hosted numerous hands-on workshops teaching youth how to use open source technology.&lt;br /&gt;
&lt;br /&gt;
Long terms goals for Open Camps include a &quot;tech assembly&quot;: we want to bring together thought leaders from around the globe to engage in a broader conversation. We'll discuss consensus-driven tech, and technology transfer of open source tools and best practices between the &quot;technology haves&quot; and the technology &quot;have nots&quot;.&lt;br /&gt;
&lt;br /&gt;
We care about giving back. Each year we host programs ranging from &quot;Coding for a Cause&quot; to &quot;Hacking for Humanity.&quot; Last year we had a ground-breaking event: not just the first Hackathon at the UN, but the first 24 hour hackathon. This year, our Unite For Humanity Hackathon drew 20 teams, again to spend 24 hours building solutions for the UN's 17 Sustainable Development Goals. The winning team will then work with the UN to develop their hackathon project into an application.&lt;br /&gt;
&lt;br /&gt;
— Forest Mars&lt;br /&gt;
&lt;br /&gt;
&lt;hr /&gt;
&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot;&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-RhEJUbkjmN0/V5eBWFgQK9I/AAAAAAAAAi8/x_UIXdJsHlAW6_IlXyS61jBfFnQiHa4NgCLcB/s1600/IMG_2134.jpg&quot;&gt;&lt;img alt=&quot;Image description: man posing in front of old-fashioned gray communications gear. There are analog meters, a tape-to-tape reel, a cathode-ray tube screen surrounded by switches, buttons, and dials. Directly behind the man is a plugboard with dozens of sockets.&quot; border=&quot;0&quot; height=&quot;300&quot; src=&quot;https://4.bp.blogspot.com/-RhEJUbkjmN0/V5eBWFgQK9I/AAAAAAAAAi8/x_UIXdJsHlAW6_IlXyS61jBfFnQiHa4NgCLcB/s400/IMG_2134.jpg&quot; title=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;tr-caption&quot;&gt;&lt;span&gt;&lt;i&gt;Your correspondent, standing in front of vintage United Nations communications gear.&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;div class=&quot;feedflare&quot;&gt;
&lt;a href=&quot;http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?a=yPNa1QUjj0Y:Wv5JIaQXXPk:yIl2AUoC8zA&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?d=yIl2AUoC8zA&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?a=yPNa1QUjj0Y:Wv5JIaQXXPk:-BTjWOF_DHI&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?i=yPNa1QUjj0Y:Wv5JIaQXXPk:-BTjWOF_DHI&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?a=yPNa1QUjj0Y:Wv5JIaQXXPk:F7zBnMyn0Lo&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?i=yPNa1QUjj0Y:Wv5JIaQXXPk:F7zBnMyn0Lo&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?a=yPNa1QUjj0Y:Wv5JIaQXXPk:V_sGLiPBpWU&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?i=yPNa1QUjj0Y:Wv5JIaQXXPk:V_sGLiPBpWU&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/PythonSoftwareFoundationNews/~4/yPNa1QUjj0Y&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot; /&gt;</description>
	<pubDate>Wed, 27 Jul 2016 09:00:16 +0000</pubDate>
</item>
<item>
	<title>A. Jesse Jiryu Davis: Talk Python to Me: &quot;Write an Excellent Programming Blog&quot;</title>
	<guid>https://emptysqua.re/blog/talk-python-episode-on-writing/</guid>
	<link>https://emptysqua.re/blog/talk-python-episode-on-writing/</link>
	<description>&lt;p&gt;Michael Kennedy and I talked about writing about programming. What kind of writing is most valuable, how do you choose a topic, improve your writing, find an audience, and find the time to write? Listen to the podcast on &lt;a href=&quot;https://talkpython.fm/episodes/show/69/write-an-excellent-programming-blog&quot;&gt;the Talk Python To Me&lt;/a&gt; site.&lt;/p&gt;
&lt;p&gt;I've talked with Michael before: &lt;a href=&quot;https://talkpython.fm/episodes/show/2/python-and-mongodb&quot;&gt;Episode 2 of &quot;Talk Python to Me&quot; was about MongoDB and Python&lt;/a&gt;.&lt;/p&gt;


&lt;hr /&gt;
&lt;p&gt;By the way: Michael's a Python expert and a master teacher. &lt;a href=&quot;https://www.kickstarter.com/projects/mikeckennedy/python-for-entrepreneurs-video-course&quot;&gt;Join his &quot;Python for Entrepreneurs&quot; course on Kickstarter&lt;/a&gt; now for early access to the course at a deeply discounted price.&lt;/p&gt;</description>
	<pubDate>Tue, 26 Jul 2016 20:50:50 +0000</pubDate>
</item>
<item>
	<title>Marcos Dione: deriving-centerlines-from-riverbanks-without</title>
	<guid>http://www.grulic.org.ar/~mdione/glob//posts/deriving-centerlines-from-riverbanks-without/</guid>
	<link>http://www.grulic.org.ar/~mdione/glob//posts/deriving-centerlines-from-riverbanks-without/</link>
	<description>&lt;p&gt;For a long time now I've been thinking on a problem: OSM data sometimes contains
riverbanks that have no centerline. This means that someone mapped (part of) the
coasts of a river (or stream!), but didn't care about adding a line that would
mark its centerline.&lt;/p&gt;

&lt;p&gt;But this should be computationally solvable, right? Well, it's not that easy.
See, for given any riverbank polygon in OSM's database, you have 4 types of
segments: those representing the right and left riverbanks (two types) and the
flow-in and flow-out segments, which link the banks upstream and downstream. With
a little bit of luck there will be only one flow-in and one flow-out segment, but
there are no guarantees here.&lt;/p&gt;

&lt;p&gt;One method could try and identify these segments,
then draw a line starting in the middle of the flow-in segment, calculating the
middle by traversing both banks at the same time, and finally connect to the
middle for the flow-out segment. Identifying the segments by itself is hard,
but it is also possible that the result is not optimal, leading to a jagged line.
I didn't try anything on those lines, but I could try some examples by hand...&lt;/p&gt;

&lt;p&gt;Enter topology, the section of maths that deals with this kind of problems. The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Topological_skeleton&quot;&gt;skeleton&lt;/a&gt; of a polygon is a
group of lines that are equidistant to the borders of the polygon. One of the
properties this set of lines provides is direction, which can be exploited to
find the banks and try to apply the previous algorithm. But a skeleton has a lot
of 'branches' that might confuse the algo.
Going a little further,
there's the &lt;a href=&quot;https://en.wikipedia.org/wiki/Medial_axis&quot;&gt;medial axis&lt;/a&gt;, which in
most cases can be considered a simplified skeleton, without most of the skeleton
branches.&lt;/p&gt;

&lt;p&gt;Enter free software :) &lt;a href=&quot;http://doc.cgal.org/latest/Manual/packages.html&quot;&gt;CGAL&lt;/a&gt;
is a library that can compute a lot of topological properties. PostGIS is clever
enough to leverage those algorithms and present, among others, the functions
&lt;code&gt;ST_StraightSkeleton()&lt;/code&gt; and &lt;code&gt;ST_ApproximateMedialAxis()&lt;/code&gt;. With these two and the
original polygon I plan to derive the centerline. But first an image that will
help explaining it:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.grulic.org.ar/~mdione/glob//images/expanded_medial_1.png&quot;&gt;&lt;img src=&quot;http://www.grulic.org.ar/~mdione/glob//images/expanded_medial_1.png&quot; width=&quot;369&quot; height=&quot;226&quot; class=&quot;img&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The green 'rectangle' is the original riverbank polygon. The thin black
line is the skeleton for it; the medium red line is the medial. Notice how the
medial and the center of the skeleton coincide. Then we have the 4 branches
forming a V shape with its vertex at each end of the medial and its other two
ends coincide with the ends of the flow in and flow out segments!&lt;/p&gt;

&lt;p&gt;So the algorithm is simple: start with the medial; from its ends, find the
branches in the skeleton that form that V; using the other two ends of those Vs,
calculate the point right between them, and extend the medial to those points.
This only calculates a centerline. The next step would be to give it a direction.
For that I will need to see if there are any nearby lines that could be part of
the river (that's what the centerline is for, to possibly extend existing
rivers/centerlines), and use its direction to give it to the new centerline.&lt;/p&gt;

&lt;p&gt;For the moment the algorithm only solves this simple case. A slightly more
complex case is not that trivial, as skeletons and medials are returned as a
&lt;code&gt;MultiLineString&lt;/code&gt; with a line for each &lt;em&gt;segment&lt;/em&gt;, so I will have to rebuild them
into &lt;code&gt;LineString&lt;/code&gt;s before processing.&lt;/p&gt;

&lt;p&gt;I put all the code
&lt;a href=&quot;https://github.com/StyXman/osm-centerlines/blob/master/centerlines.py&quot;&gt;online&lt;/a&gt;, of course :)
Besides a preloaded PostgreSQL+PostGIS database with OSM data, you'll need
&lt;code&gt;python3-sqlalchemy&lt;/code&gt;, &lt;code&gt;geoalchemy&lt;/code&gt;, &lt;code&gt;python3-fiona&lt;/code&gt; and &lt;code&gt;python3-shapely&lt;/code&gt;. The
first two allows me to fetch the data from the db. Ah! by the way, you will need
a couple of views:&lt;/p&gt;

&lt;div class=&quot;highlight-sql&quot;&gt;&lt;pre class=&quot;hl&quot;&gt;&lt;span class=&quot;hl kwa&quot;&gt;CREATE VIEW&lt;/span&gt; planet_osm_riverbank_skel   &lt;span class=&quot;hl kwa&quot;&gt;AS SELECT&lt;/span&gt; osm_id&lt;span class=&quot;hl opt&quot;&gt;,&lt;/span&gt; way&lt;span class=&quot;hl opt&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hl kwd&quot;&gt;ST_StraightSkeleton&lt;/span&gt; &lt;span class=&quot;hl opt&quot;&gt;(&lt;/span&gt;way&lt;span class=&quot;hl opt&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;hl kwa&quot;&gt;AS&lt;/span&gt; skel   &lt;span class=&quot;hl kwa&quot;&gt;FROM&lt;/span&gt; planet_osm_polygon &lt;span class=&quot;hl kwa&quot;&gt;WHERE&lt;/span&gt; waterway &lt;span class=&quot;hl opt&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hl str&quot;&gt;'riverbank'&lt;/span&gt;&lt;span class=&quot;hl opt&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;hl kwa&quot;&gt;CREATE VIEW&lt;/span&gt; planet_osm_riverbank_medial &lt;span class=&quot;hl kwa&quot;&gt;AS SELECT&lt;/span&gt; osm_id&lt;span class=&quot;hl opt&quot;&gt;,&lt;/span&gt; way&lt;span class=&quot;hl opt&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hl kwd&quot;&gt;ST_ApproximateMedialAxis&lt;/span&gt; &lt;span class=&quot;hl opt&quot;&gt;(&lt;/span&gt;way&lt;span class=&quot;hl opt&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hl kwa&quot;&gt;AS&lt;/span&gt; medial &lt;span class=&quot;hl kwa&quot;&gt;FROM&lt;/span&gt; planet_osm_polygon &lt;span class=&quot;hl kwa&quot;&gt;WHERE&lt;/span&gt; waterway &lt;span class=&quot;hl opt&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hl str&quot;&gt;'riverbank'&lt;/span&gt;&lt;span class=&quot;hl opt&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Shapely allows me to manipulate the polygonal data, and fiona is used to save the
results to a shapefile. This is the first time I ever use all of them (except
SQLAlchemy), and it's nice that it's so easy to do all this in Python.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;http://www.grulic.org.ar/~mdione/glob//tags/openstreetmap/&quot;&gt;openstreetmap&lt;/a&gt; &lt;a href=&quot;http://www.grulic.org.ar/~mdione/glob//tags/gis/&quot;&gt;gis&lt;/a&gt; &lt;span class=&quot;selflink&quot;&gt;python&lt;/span&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 26 Jul 2016 16:55:14 +0000</pubDate>
</item>

</channel>
</rss>
